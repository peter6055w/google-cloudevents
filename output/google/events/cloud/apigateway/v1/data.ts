// Code generated by protoc-gen-ts_proto. DO NOT EDIT.
// versions:
//   protoc-gen-ts_proto  v2.7.7
//   protoc               v6.32.0
// source: google/events/cloud/apigateway/v1/data.proto

/* eslint-disable */
import { BinaryReader, BinaryWriter } from "@bufbuild/protobuf/wire";
import Long from "long";
import { Timestamp } from "../../../../protobuf/timestamp";

export const protobufPackage = "google.events.cloud.apigateway.v1";

/** An API that can be served by one or more Gateways. */
export interface Api {
  /**
   * Output only. Resource name of the API.
   * Format: projects/{project}/locations/global/apis/{api}
   */
  name: string;
  /** Output only. Created time. */
  createTime?:
    | Date
    | undefined;
  /** Output only. Updated time. */
  updateTime?:
    | Date
    | undefined;
  /**
   * Optional. Resource labels to represent user-provided metadata.
   * Refer to cloud documentation on labels for more details.
   * https://cloud.google.com/compute/docs/labeling-resources
   */
  labels: { [key: string]: string };
  /** Optional. Display name. */
  displayName: string;
  /**
   * Optional. Immutable. The name of a Google Managed Service (
   * https://cloud.google.com/service-infrastructure/docs/glossary#managed).
   * If not specified, a new Service will automatically be created in the same
   * project as this API.
   */
  managedService: string;
  /** Output only. State of the API. */
  state: Api_State;
}

/** All the possible API states. */
export enum Api_State {
  /** STATE_UNSPECIFIED - API does not have a state yet. */
  STATE_UNSPECIFIED = 0,
  /** CREATING - API is being created. */
  CREATING = 1,
  /** ACTIVE - API is active. */
  ACTIVE = 2,
  /** FAILED - API creation failed. */
  FAILED = 3,
  /** DELETING - API is being deleted. */
  DELETING = 4,
  /** UPDATING - API is being updated. */
  UPDATING = 5,
  UNRECOGNIZED = -1,
}

export function api_StateFromJSON(object: any): Api_State {
  switch (object) {
    case 0:
    case "STATE_UNSPECIFIED":
      return Api_State.STATE_UNSPECIFIED;
    case 1:
    case "CREATING":
      return Api_State.CREATING;
    case 2:
    case "ACTIVE":
      return Api_State.ACTIVE;
    case 3:
    case "FAILED":
      return Api_State.FAILED;
    case 4:
    case "DELETING":
      return Api_State.DELETING;
    case 5:
    case "UPDATING":
      return Api_State.UPDATING;
    case -1:
    case "UNRECOGNIZED":
    default:
      return Api_State.UNRECOGNIZED;
  }
}

export function api_StateToJSON(object: Api_State): string {
  switch (object) {
    case Api_State.STATE_UNSPECIFIED:
      return "STATE_UNSPECIFIED";
    case Api_State.CREATING:
      return "CREATING";
    case Api_State.ACTIVE:
      return "ACTIVE";
    case Api_State.FAILED:
      return "FAILED";
    case Api_State.DELETING:
      return "DELETING";
    case Api_State.UPDATING:
      return "UPDATING";
    case Api_State.UNRECOGNIZED:
    default:
      return "UNRECOGNIZED";
  }
}

export interface Api_LabelsEntry {
  key: string;
  value: string;
}

/**
 * An API Configuration is a combination of settings for both the Managed
 * Service and Gateways serving this API Config.
 */
export interface ApiConfig {
  /**
   * Output only. Resource name of the API Config.
   * Format: projects/{project}/locations/global/apis/{api}/configs/{api_config}
   */
  name: string;
  /** Output only. Created time. */
  createTime?:
    | Date
    | undefined;
  /** Output only. Updated time. */
  updateTime?:
    | Date
    | undefined;
  /**
   * Optional. Resource labels to represent user-provided metadata.
   * Refer to cloud documentation on labels for more details.
   * https://cloud.google.com/compute/docs/labeling-resources
   */
  labels: { [key: string]: string };
  /** Optional. Display name. */
  displayName: string;
  /**
   * Immutable. The Google Cloud IAM Service Account that Gateways serving this
   * config should use to authenticate to other services. This may either be the
   * Service Account's email
   * (`{ACCOUNT_ID}@{PROJECT}.iam.gserviceaccount.com`) or its full resource
   * name (`projects/{PROJECT}/accounts/{UNIQUE_ID}`). This is most often used
   * when the service is a GCP resource such as a Cloud Run Service or an
   * IAP-secured service.
   */
  gatewayServiceAccount: string;
  /**
   * Output only. The ID of the associated Service Config (
   * https://cloud.google.com/service-infrastructure/docs/glossary#config).
   */
  serviceConfigId: string;
  /** Output only. State of the API Config. */
  state: ApiConfig_State;
  /**
   * Optional. OpenAPI specification documents. If specified, grpc_services and
   * managed_service_configs must not be included.
   */
  openapiDocuments: ApiConfig_OpenApiDocument[];
  /**
   * Optional. gRPC service definition files. If specified, openapi_documents
   * must not be included.
   */
  grpcServices: ApiConfig_GrpcServiceDefinition[];
  /**
   * Optional. Service Configuration files. At least one must be included when
   * using gRPC service definitions. See
   * https://cloud.google.com/endpoints/docs/grpc/grpc-service-config#service_configuration_overview
   * for the expected file contents.
   *
   * If multiple files are specified, the files are merged with the following
   * rules:
   * * All singular scalar fields are merged using "last one wins" semantics in
   * the order of the files uploaded.
   * * Repeated fields are concatenated.
   * * Singular embedded messages are merged using these rules for nested
   * fields.
   */
  managedServiceConfigs: ApiConfig_File[];
}

/** All the possible API Config states. */
export enum ApiConfig_State {
  /** STATE_UNSPECIFIED - API Config does not have a state yet. */
  STATE_UNSPECIFIED = 0,
  /** CREATING - API Config is being created and deployed to the API Controller. */
  CREATING = 1,
  /** ACTIVE - API Config is ready for use by Gateways. */
  ACTIVE = 2,
  /** FAILED - API Config creation failed. */
  FAILED = 3,
  /** DELETING - API Config is being deleted. */
  DELETING = 4,
  /** UPDATING - API Config is being updated. */
  UPDATING = 5,
  /**
   * ACTIVATING - API Config settings are being activated in downstream systems.
   * API Configs in this state cannot be used by Gateways.
   */
  ACTIVATING = 6,
  UNRECOGNIZED = -1,
}

export function apiConfig_StateFromJSON(object: any): ApiConfig_State {
  switch (object) {
    case 0:
    case "STATE_UNSPECIFIED":
      return ApiConfig_State.STATE_UNSPECIFIED;
    case 1:
    case "CREATING":
      return ApiConfig_State.CREATING;
    case 2:
    case "ACTIVE":
      return ApiConfig_State.ACTIVE;
    case 3:
    case "FAILED":
      return ApiConfig_State.FAILED;
    case 4:
    case "DELETING":
      return ApiConfig_State.DELETING;
    case 5:
    case "UPDATING":
      return ApiConfig_State.UPDATING;
    case 6:
    case "ACTIVATING":
      return ApiConfig_State.ACTIVATING;
    case -1:
    case "UNRECOGNIZED":
    default:
      return ApiConfig_State.UNRECOGNIZED;
  }
}

export function apiConfig_StateToJSON(object: ApiConfig_State): string {
  switch (object) {
    case ApiConfig_State.STATE_UNSPECIFIED:
      return "STATE_UNSPECIFIED";
    case ApiConfig_State.CREATING:
      return "CREATING";
    case ApiConfig_State.ACTIVE:
      return "ACTIVE";
    case ApiConfig_State.FAILED:
      return "FAILED";
    case ApiConfig_State.DELETING:
      return "DELETING";
    case ApiConfig_State.UPDATING:
      return "UPDATING";
    case ApiConfig_State.ACTIVATING:
      return "ACTIVATING";
    case ApiConfig_State.UNRECOGNIZED:
    default:
      return "UNRECOGNIZED";
  }
}

/** A lightweight description of a file. */
export interface ApiConfig_File {
  /**
   * The file path (full or relative path). This is typically the path of the
   * file when it is uploaded.
   */
  path: string;
  /** The bytes that constitute the file. */
  contents: Uint8Array;
}

/** An OpenAPI Specification Document describing an API. */
export interface ApiConfig_OpenApiDocument {
  /** The OpenAPI Specification document file. */
  document?: ApiConfig_File | undefined;
}

/** A gRPC service definition. */
export interface ApiConfig_GrpcServiceDefinition {
  /**
   * Optional. Uncompiled proto files associated with the descriptor set, used
   * for display purposes (server-side compilation is not supported). These
   * should match the inputs to 'protoc' command used to generate
   * file_descriptor_set.
   */
  source: ApiConfig_File[];
}

export interface ApiConfig_LabelsEntry {
  key: string;
  value: string;
}

/**
 * A Gateway is an API-aware HTTP proxy. It performs API-Method and/or
 * API-Consumer specific actions based on an API Config such as authentication,
 * policy enforcement, and backend selection.
 */
export interface Gateway {
  /**
   * Output only. Resource name of the Gateway.
   * Format: projects/{project}/locations/{location}/gateways/{gateway}
   */
  name: string;
  /** Output only. Created time. */
  createTime?:
    | Date
    | undefined;
  /** Output only. Updated time. */
  updateTime?:
    | Date
    | undefined;
  /**
   * Optional. Resource labels to represent user-provided metadata.
   * Refer to cloud documentation on labels for more details.
   * https://cloud.google.com/compute/docs/labeling-resources
   */
  labels: { [key: string]: string };
  /** Optional. Display name. */
  displayName: string;
  /**
   * Required. Resource name of the API Config for this Gateway.
   * Format: projects/{project}/locations/global/apis/{api}/configs/{apiConfig}
   */
  apiConfig: string;
  /** Output only. The current state of the Gateway. */
  state: Gateway_State;
  /**
   * Output only. The default API Gateway host name of the form
   * `{gateway_id}-{hash}.{region_code}.gateway.dev`.
   */
  defaultHostname: string;
}

/** All the possible Gateway states. */
export enum Gateway_State {
  /** STATE_UNSPECIFIED - Gateway does not have a state yet. */
  STATE_UNSPECIFIED = 0,
  /** CREATING - Gateway is being created. */
  CREATING = 1,
  /** ACTIVE - Gateway is running and ready for requests. */
  ACTIVE = 2,
  /** FAILED - Gateway creation failed. */
  FAILED = 3,
  /** DELETING - Gateway is being deleted. */
  DELETING = 4,
  /** UPDATING - Gateway is being updated. */
  UPDATING = 5,
  UNRECOGNIZED = -1,
}

export function gateway_StateFromJSON(object: any): Gateway_State {
  switch (object) {
    case 0:
    case "STATE_UNSPECIFIED":
      return Gateway_State.STATE_UNSPECIFIED;
    case 1:
    case "CREATING":
      return Gateway_State.CREATING;
    case 2:
    case "ACTIVE":
      return Gateway_State.ACTIVE;
    case 3:
    case "FAILED":
      return Gateway_State.FAILED;
    case 4:
    case "DELETING":
      return Gateway_State.DELETING;
    case 5:
    case "UPDATING":
      return Gateway_State.UPDATING;
    case -1:
    case "UNRECOGNIZED":
    default:
      return Gateway_State.UNRECOGNIZED;
  }
}

export function gateway_StateToJSON(object: Gateway_State): string {
  switch (object) {
    case Gateway_State.STATE_UNSPECIFIED:
      return "STATE_UNSPECIFIED";
    case Gateway_State.CREATING:
      return "CREATING";
    case Gateway_State.ACTIVE:
      return "ACTIVE";
    case Gateway_State.FAILED:
      return "FAILED";
    case Gateway_State.DELETING:
      return "DELETING";
    case Gateway_State.UPDATING:
      return "UPDATING";
    case Gateway_State.UNRECOGNIZED:
    default:
      return "UNRECOGNIZED";
  }
}

export interface Gateway_LabelsEntry {
  key: string;
  value: string;
}

/** The data within all Gateway events. */
export interface GatewayEventData {
  /** Optional. The Gateway event payload. Unset for deletion events. */
  payload?: Gateway | undefined;
}

/** The data within all ApiConfig events. */
export interface ApiConfigEventData {
  /** Optional. The ApiConfig event payload. Unset for deletion events. */
  payload?: ApiConfig | undefined;
}

/** The data within all Api events. */
export interface ApiEventData {
  /** Optional. The Api event payload. Unset for deletion events. */
  payload?: Api | undefined;
}

function createBaseApi(): Api {
  return {
    name: "",
    createTime: undefined,
    updateTime: undefined,
    labels: {},
    displayName: "",
    managedService: "",
    state: 0,
  };
}

export const Api: MessageFns<Api> = {
  encode(message: Api, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.name !== "") {
      writer.uint32(10).string(message.name);
    }
    if (message.createTime !== undefined) {
      Timestamp.encode(toTimestamp(message.createTime), writer.uint32(18).fork()).join();
    }
    if (message.updateTime !== undefined) {
      Timestamp.encode(toTimestamp(message.updateTime), writer.uint32(26).fork()).join();
    }
    Object.entries(message.labels).forEach(([key, value]) => {
      Api_LabelsEntry.encode({ key: key as any, value }, writer.uint32(34).fork()).join();
    });
    if (message.displayName !== "") {
      writer.uint32(42).string(message.displayName);
    }
    if (message.managedService !== "") {
      writer.uint32(58).string(message.managedService);
    }
    if (message.state !== 0) {
      writer.uint32(96).int32(message.state);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): Api {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    const end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseApi();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.name = reader.string();
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.createTime = fromTimestamp(Timestamp.decode(reader, reader.uint32()));
          continue;
        }
        case 3: {
          if (tag !== 26) {
            break;
          }

          message.updateTime = fromTimestamp(Timestamp.decode(reader, reader.uint32()));
          continue;
        }
        case 4: {
          if (tag !== 34) {
            break;
          }

          const entry4 = Api_LabelsEntry.decode(reader, reader.uint32());
          if (entry4.value !== undefined) {
            message.labels[entry4.key] = entry4.value;
          }
          continue;
        }
        case 5: {
          if (tag !== 42) {
            break;
          }

          message.displayName = reader.string();
          continue;
        }
        case 7: {
          if (tag !== 58) {
            break;
          }

          message.managedService = reader.string();
          continue;
        }
        case 12: {
          if (tag !== 96) {
            break;
          }

          message.state = reader.int32() as any;
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): Api {
    return {
      name: isSet(object.name) ? globalThis.String(object.name) : "",
      createTime: isSet(object.createTime) ? fromJsonTimestamp(object.createTime) : undefined,
      updateTime: isSet(object.updateTime) ? fromJsonTimestamp(object.updateTime) : undefined,
      labels: isObject(object.labels)
        ? Object.entries(object.labels).reduce<{ [key: string]: string }>((acc, [key, value]) => {
          acc[key] = String(value);
          return acc;
        }, {})
        : {},
      displayName: isSet(object.displayName) ? globalThis.String(object.displayName) : "",
      managedService: isSet(object.managedService) ? globalThis.String(object.managedService) : "",
      state: isSet(object.state) ? api_StateFromJSON(object.state) : 0,
    };
  },

  toJSON(message: Api): unknown {
    const obj: any = {};
    if (message.name !== "") {
      obj.name = message.name;
    }
    if (message.createTime !== undefined) {
      obj.createTime = message.createTime.toISOString();
    }
    if (message.updateTime !== undefined) {
      obj.updateTime = message.updateTime.toISOString();
    }
    if (message.labels) {
      const entries = Object.entries(message.labels);
      if (entries.length > 0) {
        obj.labels = {};
        entries.forEach(([k, v]) => {
          obj.labels[k] = v;
        });
      }
    }
    if (message.displayName !== "") {
      obj.displayName = message.displayName;
    }
    if (message.managedService !== "") {
      obj.managedService = message.managedService;
    }
    if (message.state !== 0) {
      obj.state = api_StateToJSON(message.state);
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<Api>, I>>(base?: I): Api {
    return Api.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<Api>, I>>(object: I): Api {
    const message = createBaseApi();
    message.name = object.name ?? "";
    message.createTime = object.createTime ?? undefined;
    message.updateTime = object.updateTime ?? undefined;
    message.labels = Object.entries(object.labels ?? {}).reduce<{ [key: string]: string }>((acc, [key, value]) => {
      if (value !== undefined) {
        acc[key] = globalThis.String(value);
      }
      return acc;
    }, {});
    message.displayName = object.displayName ?? "";
    message.managedService = object.managedService ?? "";
    message.state = object.state ?? 0;
    return message;
  },
};

function createBaseApi_LabelsEntry(): Api_LabelsEntry {
  return { key: "", value: "" };
}

export const Api_LabelsEntry: MessageFns<Api_LabelsEntry> = {
  encode(message: Api_LabelsEntry, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.key !== "") {
      writer.uint32(10).string(message.key);
    }
    if (message.value !== "") {
      writer.uint32(18).string(message.value);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): Api_LabelsEntry {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    const end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseApi_LabelsEntry();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.key = reader.string();
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.value = reader.string();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): Api_LabelsEntry {
    return {
      key: isSet(object.key) ? globalThis.String(object.key) : "",
      value: isSet(object.value) ? globalThis.String(object.value) : "",
    };
  },

  toJSON(message: Api_LabelsEntry): unknown {
    const obj: any = {};
    if (message.key !== "") {
      obj.key = message.key;
    }
    if (message.value !== "") {
      obj.value = message.value;
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<Api_LabelsEntry>, I>>(base?: I): Api_LabelsEntry {
    return Api_LabelsEntry.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<Api_LabelsEntry>, I>>(object: I): Api_LabelsEntry {
    const message = createBaseApi_LabelsEntry();
    message.key = object.key ?? "";
    message.value = object.value ?? "";
    return message;
  },
};

function createBaseApiConfig(): ApiConfig {
  return {
    name: "",
    createTime: undefined,
    updateTime: undefined,
    labels: {},
    displayName: "",
    gatewayServiceAccount: "",
    serviceConfigId: "",
    state: 0,
    openapiDocuments: [],
    grpcServices: [],
    managedServiceConfigs: [],
  };
}

export const ApiConfig: MessageFns<ApiConfig> = {
  encode(message: ApiConfig, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.name !== "") {
      writer.uint32(10).string(message.name);
    }
    if (message.createTime !== undefined) {
      Timestamp.encode(toTimestamp(message.createTime), writer.uint32(18).fork()).join();
    }
    if (message.updateTime !== undefined) {
      Timestamp.encode(toTimestamp(message.updateTime), writer.uint32(26).fork()).join();
    }
    Object.entries(message.labels).forEach(([key, value]) => {
      ApiConfig_LabelsEntry.encode({ key: key as any, value }, writer.uint32(34).fork()).join();
    });
    if (message.displayName !== "") {
      writer.uint32(42).string(message.displayName);
    }
    if (message.gatewayServiceAccount !== "") {
      writer.uint32(114).string(message.gatewayServiceAccount);
    }
    if (message.serviceConfigId !== "") {
      writer.uint32(98).string(message.serviceConfigId);
    }
    if (message.state !== 0) {
      writer.uint32(64).int32(message.state);
    }
    for (const v of message.openapiDocuments) {
      ApiConfig_OpenApiDocument.encode(v!, writer.uint32(74).fork()).join();
    }
    for (const v of message.grpcServices) {
      ApiConfig_GrpcServiceDefinition.encode(v!, writer.uint32(82).fork()).join();
    }
    for (const v of message.managedServiceConfigs) {
      ApiConfig_File.encode(v!, writer.uint32(90).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): ApiConfig {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    const end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseApiConfig();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.name = reader.string();
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.createTime = fromTimestamp(Timestamp.decode(reader, reader.uint32()));
          continue;
        }
        case 3: {
          if (tag !== 26) {
            break;
          }

          message.updateTime = fromTimestamp(Timestamp.decode(reader, reader.uint32()));
          continue;
        }
        case 4: {
          if (tag !== 34) {
            break;
          }

          const entry4 = ApiConfig_LabelsEntry.decode(reader, reader.uint32());
          if (entry4.value !== undefined) {
            message.labels[entry4.key] = entry4.value;
          }
          continue;
        }
        case 5: {
          if (tag !== 42) {
            break;
          }

          message.displayName = reader.string();
          continue;
        }
        case 14: {
          if (tag !== 114) {
            break;
          }

          message.gatewayServiceAccount = reader.string();
          continue;
        }
        case 12: {
          if (tag !== 98) {
            break;
          }

          message.serviceConfigId = reader.string();
          continue;
        }
        case 8: {
          if (tag !== 64) {
            break;
          }

          message.state = reader.int32() as any;
          continue;
        }
        case 9: {
          if (tag !== 74) {
            break;
          }

          message.openapiDocuments.push(ApiConfig_OpenApiDocument.decode(reader, reader.uint32()));
          continue;
        }
        case 10: {
          if (tag !== 82) {
            break;
          }

          message.grpcServices.push(ApiConfig_GrpcServiceDefinition.decode(reader, reader.uint32()));
          continue;
        }
        case 11: {
          if (tag !== 90) {
            break;
          }

          message.managedServiceConfigs.push(ApiConfig_File.decode(reader, reader.uint32()));
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): ApiConfig {
    return {
      name: isSet(object.name) ? globalThis.String(object.name) : "",
      createTime: isSet(object.createTime) ? fromJsonTimestamp(object.createTime) : undefined,
      updateTime: isSet(object.updateTime) ? fromJsonTimestamp(object.updateTime) : undefined,
      labels: isObject(object.labels)
        ? Object.entries(object.labels).reduce<{ [key: string]: string }>((acc, [key, value]) => {
          acc[key] = String(value);
          return acc;
        }, {})
        : {},
      displayName: isSet(object.displayName) ? globalThis.String(object.displayName) : "",
      gatewayServiceAccount: isSet(object.gatewayServiceAccount) ? globalThis.String(object.gatewayServiceAccount) : "",
      serviceConfigId: isSet(object.serviceConfigId) ? globalThis.String(object.serviceConfigId) : "",
      state: isSet(object.state) ? apiConfig_StateFromJSON(object.state) : 0,
      openapiDocuments: globalThis.Array.isArray(object?.openapiDocuments)
        ? object.openapiDocuments.map((e: any) => ApiConfig_OpenApiDocument.fromJSON(e))
        : [],
      grpcServices: globalThis.Array.isArray(object?.grpcServices)
        ? object.grpcServices.map((e: any) => ApiConfig_GrpcServiceDefinition.fromJSON(e))
        : [],
      managedServiceConfigs: globalThis.Array.isArray(object?.managedServiceConfigs)
        ? object.managedServiceConfigs.map((e: any) => ApiConfig_File.fromJSON(e))
        : [],
    };
  },

  toJSON(message: ApiConfig): unknown {
    const obj: any = {};
    if (message.name !== "") {
      obj.name = message.name;
    }
    if (message.createTime !== undefined) {
      obj.createTime = message.createTime.toISOString();
    }
    if (message.updateTime !== undefined) {
      obj.updateTime = message.updateTime.toISOString();
    }
    if (message.labels) {
      const entries = Object.entries(message.labels);
      if (entries.length > 0) {
        obj.labels = {};
        entries.forEach(([k, v]) => {
          obj.labels[k] = v;
        });
      }
    }
    if (message.displayName !== "") {
      obj.displayName = message.displayName;
    }
    if (message.gatewayServiceAccount !== "") {
      obj.gatewayServiceAccount = message.gatewayServiceAccount;
    }
    if (message.serviceConfigId !== "") {
      obj.serviceConfigId = message.serviceConfigId;
    }
    if (message.state !== 0) {
      obj.state = apiConfig_StateToJSON(message.state);
    }
    if (message.openapiDocuments?.length) {
      obj.openapiDocuments = message.openapiDocuments.map((e) => ApiConfig_OpenApiDocument.toJSON(e));
    }
    if (message.grpcServices?.length) {
      obj.grpcServices = message.grpcServices.map((e) => ApiConfig_GrpcServiceDefinition.toJSON(e));
    }
    if (message.managedServiceConfigs?.length) {
      obj.managedServiceConfigs = message.managedServiceConfigs.map((e) => ApiConfig_File.toJSON(e));
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<ApiConfig>, I>>(base?: I): ApiConfig {
    return ApiConfig.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<ApiConfig>, I>>(object: I): ApiConfig {
    const message = createBaseApiConfig();
    message.name = object.name ?? "";
    message.createTime = object.createTime ?? undefined;
    message.updateTime = object.updateTime ?? undefined;
    message.labels = Object.entries(object.labels ?? {}).reduce<{ [key: string]: string }>((acc, [key, value]) => {
      if (value !== undefined) {
        acc[key] = globalThis.String(value);
      }
      return acc;
    }, {});
    message.displayName = object.displayName ?? "";
    message.gatewayServiceAccount = object.gatewayServiceAccount ?? "";
    message.serviceConfigId = object.serviceConfigId ?? "";
    message.state = object.state ?? 0;
    message.openapiDocuments = object.openapiDocuments?.map((e) => ApiConfig_OpenApiDocument.fromPartial(e)) || [];
    message.grpcServices = object.grpcServices?.map((e) => ApiConfig_GrpcServiceDefinition.fromPartial(e)) || [];
    message.managedServiceConfigs = object.managedServiceConfigs?.map((e) => ApiConfig_File.fromPartial(e)) || [];
    return message;
  },
};

function createBaseApiConfig_File(): ApiConfig_File {
  return { path: "", contents: new Uint8Array(0) };
}

export const ApiConfig_File: MessageFns<ApiConfig_File> = {
  encode(message: ApiConfig_File, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.path !== "") {
      writer.uint32(10).string(message.path);
    }
    if (message.contents.length !== 0) {
      writer.uint32(18).bytes(message.contents);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): ApiConfig_File {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    const end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseApiConfig_File();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.path = reader.string();
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.contents = reader.bytes();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): ApiConfig_File {
    return {
      path: isSet(object.path) ? globalThis.String(object.path) : "",
      contents: isSet(object.contents) ? bytesFromBase64(object.contents) : new Uint8Array(0),
    };
  },

  toJSON(message: ApiConfig_File): unknown {
    const obj: any = {};
    if (message.path !== "") {
      obj.path = message.path;
    }
    if (message.contents.length !== 0) {
      obj.contents = base64FromBytes(message.contents);
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<ApiConfig_File>, I>>(base?: I): ApiConfig_File {
    return ApiConfig_File.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<ApiConfig_File>, I>>(object: I): ApiConfig_File {
    const message = createBaseApiConfig_File();
    message.path = object.path ?? "";
    message.contents = object.contents ?? new Uint8Array(0);
    return message;
  },
};

function createBaseApiConfig_OpenApiDocument(): ApiConfig_OpenApiDocument {
  return { document: undefined };
}

export const ApiConfig_OpenApiDocument: MessageFns<ApiConfig_OpenApiDocument> = {
  encode(message: ApiConfig_OpenApiDocument, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.document !== undefined) {
      ApiConfig_File.encode(message.document, writer.uint32(10).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): ApiConfig_OpenApiDocument {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    const end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseApiConfig_OpenApiDocument();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.document = ApiConfig_File.decode(reader, reader.uint32());
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): ApiConfig_OpenApiDocument {
    return { document: isSet(object.document) ? ApiConfig_File.fromJSON(object.document) : undefined };
  },

  toJSON(message: ApiConfig_OpenApiDocument): unknown {
    const obj: any = {};
    if (message.document !== undefined) {
      obj.document = ApiConfig_File.toJSON(message.document);
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<ApiConfig_OpenApiDocument>, I>>(base?: I): ApiConfig_OpenApiDocument {
    return ApiConfig_OpenApiDocument.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<ApiConfig_OpenApiDocument>, I>>(object: I): ApiConfig_OpenApiDocument {
    const message = createBaseApiConfig_OpenApiDocument();
    message.document = (object.document !== undefined && object.document !== null)
      ? ApiConfig_File.fromPartial(object.document)
      : undefined;
    return message;
  },
};

function createBaseApiConfig_GrpcServiceDefinition(): ApiConfig_GrpcServiceDefinition {
  return { source: [] };
}

export const ApiConfig_GrpcServiceDefinition: MessageFns<ApiConfig_GrpcServiceDefinition> = {
  encode(message: ApiConfig_GrpcServiceDefinition, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    for (const v of message.source) {
      ApiConfig_File.encode(v!, writer.uint32(18).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): ApiConfig_GrpcServiceDefinition {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    const end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseApiConfig_GrpcServiceDefinition();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.source.push(ApiConfig_File.decode(reader, reader.uint32()));
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): ApiConfig_GrpcServiceDefinition {
    return {
      source: globalThis.Array.isArray(object?.source) ? object.source.map((e: any) => ApiConfig_File.fromJSON(e)) : [],
    };
  },

  toJSON(message: ApiConfig_GrpcServiceDefinition): unknown {
    const obj: any = {};
    if (message.source?.length) {
      obj.source = message.source.map((e) => ApiConfig_File.toJSON(e));
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<ApiConfig_GrpcServiceDefinition>, I>>(base?: I): ApiConfig_GrpcServiceDefinition {
    return ApiConfig_GrpcServiceDefinition.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<ApiConfig_GrpcServiceDefinition>, I>>(
    object: I,
  ): ApiConfig_GrpcServiceDefinition {
    const message = createBaseApiConfig_GrpcServiceDefinition();
    message.source = object.source?.map((e) => ApiConfig_File.fromPartial(e)) || [];
    return message;
  },
};

function createBaseApiConfig_LabelsEntry(): ApiConfig_LabelsEntry {
  return { key: "", value: "" };
}

export const ApiConfig_LabelsEntry: MessageFns<ApiConfig_LabelsEntry> = {
  encode(message: ApiConfig_LabelsEntry, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.key !== "") {
      writer.uint32(10).string(message.key);
    }
    if (message.value !== "") {
      writer.uint32(18).string(message.value);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): ApiConfig_LabelsEntry {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    const end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseApiConfig_LabelsEntry();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.key = reader.string();
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.value = reader.string();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): ApiConfig_LabelsEntry {
    return {
      key: isSet(object.key) ? globalThis.String(object.key) : "",
      value: isSet(object.value) ? globalThis.String(object.value) : "",
    };
  },

  toJSON(message: ApiConfig_LabelsEntry): unknown {
    const obj: any = {};
    if (message.key !== "") {
      obj.key = message.key;
    }
    if (message.value !== "") {
      obj.value = message.value;
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<ApiConfig_LabelsEntry>, I>>(base?: I): ApiConfig_LabelsEntry {
    return ApiConfig_LabelsEntry.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<ApiConfig_LabelsEntry>, I>>(object: I): ApiConfig_LabelsEntry {
    const message = createBaseApiConfig_LabelsEntry();
    message.key = object.key ?? "";
    message.value = object.value ?? "";
    return message;
  },
};

function createBaseGateway(): Gateway {
  return {
    name: "",
    createTime: undefined,
    updateTime: undefined,
    labels: {},
    displayName: "",
    apiConfig: "",
    state: 0,
    defaultHostname: "",
  };
}

export const Gateway: MessageFns<Gateway> = {
  encode(message: Gateway, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.name !== "") {
      writer.uint32(10).string(message.name);
    }
    if (message.createTime !== undefined) {
      Timestamp.encode(toTimestamp(message.createTime), writer.uint32(18).fork()).join();
    }
    if (message.updateTime !== undefined) {
      Timestamp.encode(toTimestamp(message.updateTime), writer.uint32(26).fork()).join();
    }
    Object.entries(message.labels).forEach(([key, value]) => {
      Gateway_LabelsEntry.encode({ key: key as any, value }, writer.uint32(34).fork()).join();
    });
    if (message.displayName !== "") {
      writer.uint32(42).string(message.displayName);
    }
    if (message.apiConfig !== "") {
      writer.uint32(50).string(message.apiConfig);
    }
    if (message.state !== 0) {
      writer.uint32(56).int32(message.state);
    }
    if (message.defaultHostname !== "") {
      writer.uint32(74).string(message.defaultHostname);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): Gateway {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    const end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseGateway();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.name = reader.string();
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.createTime = fromTimestamp(Timestamp.decode(reader, reader.uint32()));
          continue;
        }
        case 3: {
          if (tag !== 26) {
            break;
          }

          message.updateTime = fromTimestamp(Timestamp.decode(reader, reader.uint32()));
          continue;
        }
        case 4: {
          if (tag !== 34) {
            break;
          }

          const entry4 = Gateway_LabelsEntry.decode(reader, reader.uint32());
          if (entry4.value !== undefined) {
            message.labels[entry4.key] = entry4.value;
          }
          continue;
        }
        case 5: {
          if (tag !== 42) {
            break;
          }

          message.displayName = reader.string();
          continue;
        }
        case 6: {
          if (tag !== 50) {
            break;
          }

          message.apiConfig = reader.string();
          continue;
        }
        case 7: {
          if (tag !== 56) {
            break;
          }

          message.state = reader.int32() as any;
          continue;
        }
        case 9: {
          if (tag !== 74) {
            break;
          }

          message.defaultHostname = reader.string();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): Gateway {
    return {
      name: isSet(object.name) ? globalThis.String(object.name) : "",
      createTime: isSet(object.createTime) ? fromJsonTimestamp(object.createTime) : undefined,
      updateTime: isSet(object.updateTime) ? fromJsonTimestamp(object.updateTime) : undefined,
      labels: isObject(object.labels)
        ? Object.entries(object.labels).reduce<{ [key: string]: string }>((acc, [key, value]) => {
          acc[key] = String(value);
          return acc;
        }, {})
        : {},
      displayName: isSet(object.displayName) ? globalThis.String(object.displayName) : "",
      apiConfig: isSet(object.apiConfig) ? globalThis.String(object.apiConfig) : "",
      state: isSet(object.state) ? gateway_StateFromJSON(object.state) : 0,
      defaultHostname: isSet(object.defaultHostname) ? globalThis.String(object.defaultHostname) : "",
    };
  },

  toJSON(message: Gateway): unknown {
    const obj: any = {};
    if (message.name !== "") {
      obj.name = message.name;
    }
    if (message.createTime !== undefined) {
      obj.createTime = message.createTime.toISOString();
    }
    if (message.updateTime !== undefined) {
      obj.updateTime = message.updateTime.toISOString();
    }
    if (message.labels) {
      const entries = Object.entries(message.labels);
      if (entries.length > 0) {
        obj.labels = {};
        entries.forEach(([k, v]) => {
          obj.labels[k] = v;
        });
      }
    }
    if (message.displayName !== "") {
      obj.displayName = message.displayName;
    }
    if (message.apiConfig !== "") {
      obj.apiConfig = message.apiConfig;
    }
    if (message.state !== 0) {
      obj.state = gateway_StateToJSON(message.state);
    }
    if (message.defaultHostname !== "") {
      obj.defaultHostname = message.defaultHostname;
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<Gateway>, I>>(base?: I): Gateway {
    return Gateway.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<Gateway>, I>>(object: I): Gateway {
    const message = createBaseGateway();
    message.name = object.name ?? "";
    message.createTime = object.createTime ?? undefined;
    message.updateTime = object.updateTime ?? undefined;
    message.labels = Object.entries(object.labels ?? {}).reduce<{ [key: string]: string }>((acc, [key, value]) => {
      if (value !== undefined) {
        acc[key] = globalThis.String(value);
      }
      return acc;
    }, {});
    message.displayName = object.displayName ?? "";
    message.apiConfig = object.apiConfig ?? "";
    message.state = object.state ?? 0;
    message.defaultHostname = object.defaultHostname ?? "";
    return message;
  },
};

function createBaseGateway_LabelsEntry(): Gateway_LabelsEntry {
  return { key: "", value: "" };
}

export const Gateway_LabelsEntry: MessageFns<Gateway_LabelsEntry> = {
  encode(message: Gateway_LabelsEntry, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.key !== "") {
      writer.uint32(10).string(message.key);
    }
    if (message.value !== "") {
      writer.uint32(18).string(message.value);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): Gateway_LabelsEntry {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    const end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseGateway_LabelsEntry();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.key = reader.string();
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.value = reader.string();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): Gateway_LabelsEntry {
    return {
      key: isSet(object.key) ? globalThis.String(object.key) : "",
      value: isSet(object.value) ? globalThis.String(object.value) : "",
    };
  },

  toJSON(message: Gateway_LabelsEntry): unknown {
    const obj: any = {};
    if (message.key !== "") {
      obj.key = message.key;
    }
    if (message.value !== "") {
      obj.value = message.value;
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<Gateway_LabelsEntry>, I>>(base?: I): Gateway_LabelsEntry {
    return Gateway_LabelsEntry.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<Gateway_LabelsEntry>, I>>(object: I): Gateway_LabelsEntry {
    const message = createBaseGateway_LabelsEntry();
    message.key = object.key ?? "";
    message.value = object.value ?? "";
    return message;
  },
};

function createBaseGatewayEventData(): GatewayEventData {
  return { payload: undefined };
}

export const GatewayEventData: MessageFns<GatewayEventData> = {
  encode(message: GatewayEventData, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.payload !== undefined) {
      Gateway.encode(message.payload, writer.uint32(10).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): GatewayEventData {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    const end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseGatewayEventData();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.payload = Gateway.decode(reader, reader.uint32());
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): GatewayEventData {
    return { payload: isSet(object.payload) ? Gateway.fromJSON(object.payload) : undefined };
  },

  toJSON(message: GatewayEventData): unknown {
    const obj: any = {};
    if (message.payload !== undefined) {
      obj.payload = Gateway.toJSON(message.payload);
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<GatewayEventData>, I>>(base?: I): GatewayEventData {
    return GatewayEventData.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<GatewayEventData>, I>>(object: I): GatewayEventData {
    const message = createBaseGatewayEventData();
    message.payload = (object.payload !== undefined && object.payload !== null)
      ? Gateway.fromPartial(object.payload)
      : undefined;
    return message;
  },
};

function createBaseApiConfigEventData(): ApiConfigEventData {
  return { payload: undefined };
}

export const ApiConfigEventData: MessageFns<ApiConfigEventData> = {
  encode(message: ApiConfigEventData, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.payload !== undefined) {
      ApiConfig.encode(message.payload, writer.uint32(10).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): ApiConfigEventData {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    const end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseApiConfigEventData();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.payload = ApiConfig.decode(reader, reader.uint32());
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): ApiConfigEventData {
    return { payload: isSet(object.payload) ? ApiConfig.fromJSON(object.payload) : undefined };
  },

  toJSON(message: ApiConfigEventData): unknown {
    const obj: any = {};
    if (message.payload !== undefined) {
      obj.payload = ApiConfig.toJSON(message.payload);
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<ApiConfigEventData>, I>>(base?: I): ApiConfigEventData {
    return ApiConfigEventData.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<ApiConfigEventData>, I>>(object: I): ApiConfigEventData {
    const message = createBaseApiConfigEventData();
    message.payload = (object.payload !== undefined && object.payload !== null)
      ? ApiConfig.fromPartial(object.payload)
      : undefined;
    return message;
  },
};

function createBaseApiEventData(): ApiEventData {
  return { payload: undefined };
}

export const ApiEventData: MessageFns<ApiEventData> = {
  encode(message: ApiEventData, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.payload !== undefined) {
      Api.encode(message.payload, writer.uint32(10).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): ApiEventData {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    const end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseApiEventData();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.payload = Api.decode(reader, reader.uint32());
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): ApiEventData {
    return { payload: isSet(object.payload) ? Api.fromJSON(object.payload) : undefined };
  },

  toJSON(message: ApiEventData): unknown {
    const obj: any = {};
    if (message.payload !== undefined) {
      obj.payload = Api.toJSON(message.payload);
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<ApiEventData>, I>>(base?: I): ApiEventData {
    return ApiEventData.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<ApiEventData>, I>>(object: I): ApiEventData {
    const message = createBaseApiEventData();
    message.payload = (object.payload !== undefined && object.payload !== null)
      ? Api.fromPartial(object.payload)
      : undefined;
    return message;
  },
};

function bytesFromBase64(b64: string): Uint8Array {
  if ((globalThis as any).Buffer) {
    return Uint8Array.from(globalThis.Buffer.from(b64, "base64"));
  } else {
    const bin = globalThis.atob(b64);
    const arr = new Uint8Array(bin.length);
    for (let i = 0; i < bin.length; ++i) {
      arr[i] = bin.charCodeAt(i);
    }
    return arr;
  }
}

function base64FromBytes(arr: Uint8Array): string {
  if ((globalThis as any).Buffer) {
    return globalThis.Buffer.from(arr).toString("base64");
  } else {
    const bin: string[] = [];
    arr.forEach((byte) => {
      bin.push(globalThis.String.fromCharCode(byte));
    });
    return globalThis.btoa(bin.join(""));
  }
}

type Builtin = Date | Function | Uint8Array | string | number | boolean | undefined;

export type DeepPartial<T> = T extends Builtin ? T
  : T extends Long ? string | number | Long : T extends globalThis.Array<infer U> ? globalThis.Array<DeepPartial<U>>
  : T extends ReadonlyArray<infer U> ? ReadonlyArray<DeepPartial<U>>
  : T extends {} ? { [K in keyof T]?: DeepPartial<T[K]> }
  : Partial<T>;

type KeysOfUnion<T> = T extends T ? keyof T : never;
export type Exact<P, I extends P> = P extends Builtin ? P
  : P & { [K in keyof P]: Exact<P[K], I[K]> } & { [K in Exclude<keyof I, KeysOfUnion<P>>]: never };

function toTimestamp(date: Date): Timestamp {
  const seconds = numberToLong(Math.trunc(date.getTime() / 1_000));
  const nanos = (date.getTime() % 1_000) * 1_000_000;
  return { seconds, nanos };
}

function fromTimestamp(t: Timestamp): Date {
  let millis = (t.seconds.toNumber() || 0) * 1_000;
  millis += (t.nanos || 0) / 1_000_000;
  return new globalThis.Date(millis);
}

function fromJsonTimestamp(o: any): Date {
  if (o instanceof globalThis.Date) {
    return o;
  } else if (typeof o === "string") {
    return new globalThis.Date(o);
  } else {
    return fromTimestamp(Timestamp.fromJSON(o));
  }
}

function numberToLong(number: number) {
  return Long.fromNumber(number);
}

function isObject(value: any): boolean {
  return typeof value === "object" && value !== null;
}

function isSet(value: any): boolean {
  return value !== null && value !== undefined;
}

export interface MessageFns<T> {
  encode(message: T, writer?: BinaryWriter): BinaryWriter;
  decode(input: BinaryReader | Uint8Array, length?: number): T;
  fromJSON(object: any): T;
  toJSON(message: T): unknown;
  create<I extends Exact<DeepPartial<T>, I>>(base?: I): T;
  fromPartial<I extends Exact<DeepPartial<T>, I>>(object: I): T;
}
