// Code generated by protoc-gen-ts_proto. DO NOT EDIT.
// versions:
//   protoc-gen-ts_proto  v2.7.7
//   protoc               v6.32.0
// source: google/events/cloud/apigateway/v1/events.proto

/* eslint-disable */
import { BinaryReader, BinaryWriter } from "@bufbuild/protobuf/wire";
import Long from "long";
import { ApiConfigEventData, ApiEventData, GatewayEventData } from "./data";

export const protobufPackage = "google.events.cloud.apigateway.v1";

/** The CloudEvent raised when a Gateway is created. */
export interface GatewayCreatedEvent {
  /** The data associated with the event. */
  data?: GatewayEventData | undefined;
}

/** The CloudEvent raised when a Gateway is updated. */
export interface GatewayUpdatedEvent {
  /** The data associated with the event. */
  data?: GatewayEventData | undefined;
}

/** The CloudEvent raised when a Gateway is deleted. */
export interface GatewayDeletedEvent {
  /** The data associated with the event. */
  data?: GatewayEventData | undefined;
}

/** The CloudEvent raised when an Api is created. */
export interface ApiCreatedEvent {
  /** The data associated with the event. */
  data?: ApiEventData | undefined;
}

/** The CloudEvent raised when an Api is updated. */
export interface ApiUpdatedEvent {
  /** The data associated with the event. */
  data?: ApiEventData | undefined;
}

/** The CloudEvent raised when an Api is deleted. */
export interface ApiDeletedEvent {
  /** The data associated with the event. */
  data?: ApiEventData | undefined;
}

/** The CloudEvent raised when an ApiConfig is created. */
export interface ApiConfigCreatedEvent {
  /** The data associated with the event. */
  data?: ApiConfigEventData | undefined;
}

/** The CloudEvent raised when an ApiConfig is updated. */
export interface ApiConfigUpdatedEvent {
  /** The data associated with the event. */
  data?: ApiConfigEventData | undefined;
}

/** The CloudEvent raised when an ApiConfig is deleted. */
export interface ApiConfigDeletedEvent {
  /** The data associated with the event. */
  data?: ApiConfigEventData | undefined;
}

function createBaseGatewayCreatedEvent(): GatewayCreatedEvent {
  return { data: undefined };
}

export const GatewayCreatedEvent: MessageFns<GatewayCreatedEvent> = {
  encode(message: GatewayCreatedEvent, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.data !== undefined) {
      GatewayEventData.encode(message.data, writer.uint32(10).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): GatewayCreatedEvent {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    const end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseGatewayCreatedEvent();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.data = GatewayEventData.decode(reader, reader.uint32());
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): GatewayCreatedEvent {
    return { data: isSet(object.data) ? GatewayEventData.fromJSON(object.data) : undefined };
  },

  toJSON(message: GatewayCreatedEvent): unknown {
    const obj: any = {};
    if (message.data !== undefined) {
      obj.data = GatewayEventData.toJSON(message.data);
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<GatewayCreatedEvent>, I>>(base?: I): GatewayCreatedEvent {
    return GatewayCreatedEvent.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<GatewayCreatedEvent>, I>>(object: I): GatewayCreatedEvent {
    const message = createBaseGatewayCreatedEvent();
    message.data = (object.data !== undefined && object.data !== null)
      ? GatewayEventData.fromPartial(object.data)
      : undefined;
    return message;
  },
};

function createBaseGatewayUpdatedEvent(): GatewayUpdatedEvent {
  return { data: undefined };
}

export const GatewayUpdatedEvent: MessageFns<GatewayUpdatedEvent> = {
  encode(message: GatewayUpdatedEvent, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.data !== undefined) {
      GatewayEventData.encode(message.data, writer.uint32(10).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): GatewayUpdatedEvent {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    const end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseGatewayUpdatedEvent();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.data = GatewayEventData.decode(reader, reader.uint32());
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): GatewayUpdatedEvent {
    return { data: isSet(object.data) ? GatewayEventData.fromJSON(object.data) : undefined };
  },

  toJSON(message: GatewayUpdatedEvent): unknown {
    const obj: any = {};
    if (message.data !== undefined) {
      obj.data = GatewayEventData.toJSON(message.data);
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<GatewayUpdatedEvent>, I>>(base?: I): GatewayUpdatedEvent {
    return GatewayUpdatedEvent.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<GatewayUpdatedEvent>, I>>(object: I): GatewayUpdatedEvent {
    const message = createBaseGatewayUpdatedEvent();
    message.data = (object.data !== undefined && object.data !== null)
      ? GatewayEventData.fromPartial(object.data)
      : undefined;
    return message;
  },
};

function createBaseGatewayDeletedEvent(): GatewayDeletedEvent {
  return { data: undefined };
}

export const GatewayDeletedEvent: MessageFns<GatewayDeletedEvent> = {
  encode(message: GatewayDeletedEvent, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.data !== undefined) {
      GatewayEventData.encode(message.data, writer.uint32(10).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): GatewayDeletedEvent {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    const end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseGatewayDeletedEvent();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.data = GatewayEventData.decode(reader, reader.uint32());
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): GatewayDeletedEvent {
    return { data: isSet(object.data) ? GatewayEventData.fromJSON(object.data) : undefined };
  },

  toJSON(message: GatewayDeletedEvent): unknown {
    const obj: any = {};
    if (message.data !== undefined) {
      obj.data = GatewayEventData.toJSON(message.data);
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<GatewayDeletedEvent>, I>>(base?: I): GatewayDeletedEvent {
    return GatewayDeletedEvent.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<GatewayDeletedEvent>, I>>(object: I): GatewayDeletedEvent {
    const message = createBaseGatewayDeletedEvent();
    message.data = (object.data !== undefined && object.data !== null)
      ? GatewayEventData.fromPartial(object.data)
      : undefined;
    return message;
  },
};

function createBaseApiCreatedEvent(): ApiCreatedEvent {
  return { data: undefined };
}

export const ApiCreatedEvent: MessageFns<ApiCreatedEvent> = {
  encode(message: ApiCreatedEvent, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.data !== undefined) {
      ApiEventData.encode(message.data, writer.uint32(10).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): ApiCreatedEvent {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    const end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseApiCreatedEvent();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.data = ApiEventData.decode(reader, reader.uint32());
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): ApiCreatedEvent {
    return { data: isSet(object.data) ? ApiEventData.fromJSON(object.data) : undefined };
  },

  toJSON(message: ApiCreatedEvent): unknown {
    const obj: any = {};
    if (message.data !== undefined) {
      obj.data = ApiEventData.toJSON(message.data);
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<ApiCreatedEvent>, I>>(base?: I): ApiCreatedEvent {
    return ApiCreatedEvent.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<ApiCreatedEvent>, I>>(object: I): ApiCreatedEvent {
    const message = createBaseApiCreatedEvent();
    message.data = (object.data !== undefined && object.data !== null)
      ? ApiEventData.fromPartial(object.data)
      : undefined;
    return message;
  },
};

function createBaseApiUpdatedEvent(): ApiUpdatedEvent {
  return { data: undefined };
}

export const ApiUpdatedEvent: MessageFns<ApiUpdatedEvent> = {
  encode(message: ApiUpdatedEvent, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.data !== undefined) {
      ApiEventData.encode(message.data, writer.uint32(10).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): ApiUpdatedEvent {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    const end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseApiUpdatedEvent();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.data = ApiEventData.decode(reader, reader.uint32());
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): ApiUpdatedEvent {
    return { data: isSet(object.data) ? ApiEventData.fromJSON(object.data) : undefined };
  },

  toJSON(message: ApiUpdatedEvent): unknown {
    const obj: any = {};
    if (message.data !== undefined) {
      obj.data = ApiEventData.toJSON(message.data);
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<ApiUpdatedEvent>, I>>(base?: I): ApiUpdatedEvent {
    return ApiUpdatedEvent.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<ApiUpdatedEvent>, I>>(object: I): ApiUpdatedEvent {
    const message = createBaseApiUpdatedEvent();
    message.data = (object.data !== undefined && object.data !== null)
      ? ApiEventData.fromPartial(object.data)
      : undefined;
    return message;
  },
};

function createBaseApiDeletedEvent(): ApiDeletedEvent {
  return { data: undefined };
}

export const ApiDeletedEvent: MessageFns<ApiDeletedEvent> = {
  encode(message: ApiDeletedEvent, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.data !== undefined) {
      ApiEventData.encode(message.data, writer.uint32(10).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): ApiDeletedEvent {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    const end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseApiDeletedEvent();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.data = ApiEventData.decode(reader, reader.uint32());
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): ApiDeletedEvent {
    return { data: isSet(object.data) ? ApiEventData.fromJSON(object.data) : undefined };
  },

  toJSON(message: ApiDeletedEvent): unknown {
    const obj: any = {};
    if (message.data !== undefined) {
      obj.data = ApiEventData.toJSON(message.data);
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<ApiDeletedEvent>, I>>(base?: I): ApiDeletedEvent {
    return ApiDeletedEvent.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<ApiDeletedEvent>, I>>(object: I): ApiDeletedEvent {
    const message = createBaseApiDeletedEvent();
    message.data = (object.data !== undefined && object.data !== null)
      ? ApiEventData.fromPartial(object.data)
      : undefined;
    return message;
  },
};

function createBaseApiConfigCreatedEvent(): ApiConfigCreatedEvent {
  return { data: undefined };
}

export const ApiConfigCreatedEvent: MessageFns<ApiConfigCreatedEvent> = {
  encode(message: ApiConfigCreatedEvent, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.data !== undefined) {
      ApiConfigEventData.encode(message.data, writer.uint32(10).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): ApiConfigCreatedEvent {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    const end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseApiConfigCreatedEvent();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.data = ApiConfigEventData.decode(reader, reader.uint32());
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): ApiConfigCreatedEvent {
    return { data: isSet(object.data) ? ApiConfigEventData.fromJSON(object.data) : undefined };
  },

  toJSON(message: ApiConfigCreatedEvent): unknown {
    const obj: any = {};
    if (message.data !== undefined) {
      obj.data = ApiConfigEventData.toJSON(message.data);
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<ApiConfigCreatedEvent>, I>>(base?: I): ApiConfigCreatedEvent {
    return ApiConfigCreatedEvent.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<ApiConfigCreatedEvent>, I>>(object: I): ApiConfigCreatedEvent {
    const message = createBaseApiConfigCreatedEvent();
    message.data = (object.data !== undefined && object.data !== null)
      ? ApiConfigEventData.fromPartial(object.data)
      : undefined;
    return message;
  },
};

function createBaseApiConfigUpdatedEvent(): ApiConfigUpdatedEvent {
  return { data: undefined };
}

export const ApiConfigUpdatedEvent: MessageFns<ApiConfigUpdatedEvent> = {
  encode(message: ApiConfigUpdatedEvent, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.data !== undefined) {
      ApiConfigEventData.encode(message.data, writer.uint32(10).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): ApiConfigUpdatedEvent {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    const end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseApiConfigUpdatedEvent();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.data = ApiConfigEventData.decode(reader, reader.uint32());
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): ApiConfigUpdatedEvent {
    return { data: isSet(object.data) ? ApiConfigEventData.fromJSON(object.data) : undefined };
  },

  toJSON(message: ApiConfigUpdatedEvent): unknown {
    const obj: any = {};
    if (message.data !== undefined) {
      obj.data = ApiConfigEventData.toJSON(message.data);
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<ApiConfigUpdatedEvent>, I>>(base?: I): ApiConfigUpdatedEvent {
    return ApiConfigUpdatedEvent.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<ApiConfigUpdatedEvent>, I>>(object: I): ApiConfigUpdatedEvent {
    const message = createBaseApiConfigUpdatedEvent();
    message.data = (object.data !== undefined && object.data !== null)
      ? ApiConfigEventData.fromPartial(object.data)
      : undefined;
    return message;
  },
};

function createBaseApiConfigDeletedEvent(): ApiConfigDeletedEvent {
  return { data: undefined };
}

export const ApiConfigDeletedEvent: MessageFns<ApiConfigDeletedEvent> = {
  encode(message: ApiConfigDeletedEvent, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.data !== undefined) {
      ApiConfigEventData.encode(message.data, writer.uint32(10).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): ApiConfigDeletedEvent {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    const end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseApiConfigDeletedEvent();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.data = ApiConfigEventData.decode(reader, reader.uint32());
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): ApiConfigDeletedEvent {
    return { data: isSet(object.data) ? ApiConfigEventData.fromJSON(object.data) : undefined };
  },

  toJSON(message: ApiConfigDeletedEvent): unknown {
    const obj: any = {};
    if (message.data !== undefined) {
      obj.data = ApiConfigEventData.toJSON(message.data);
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<ApiConfigDeletedEvent>, I>>(base?: I): ApiConfigDeletedEvent {
    return ApiConfigDeletedEvent.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<ApiConfigDeletedEvent>, I>>(object: I): ApiConfigDeletedEvent {
    const message = createBaseApiConfigDeletedEvent();
    message.data = (object.data !== undefined && object.data !== null)
      ? ApiConfigEventData.fromPartial(object.data)
      : undefined;
    return message;
  },
};

type Builtin = Date | Function | Uint8Array | string | number | boolean | undefined;

export type DeepPartial<T> = T extends Builtin ? T
  : T extends Long ? string | number | Long : T extends globalThis.Array<infer U> ? globalThis.Array<DeepPartial<U>>
  : T extends ReadonlyArray<infer U> ? ReadonlyArray<DeepPartial<U>>
  : T extends {} ? { [K in keyof T]?: DeepPartial<T[K]> }
  : Partial<T>;

type KeysOfUnion<T> = T extends T ? keyof T : never;
export type Exact<P, I extends P> = P extends Builtin ? P
  : P & { [K in keyof P]: Exact<P[K], I[K]> } & { [K in Exclude<keyof I, KeysOfUnion<P>>]: never };

function isSet(value: any): boolean {
  return value !== null && value !== undefined;
}

export interface MessageFns<T> {
  encode(message: T, writer?: BinaryWriter): BinaryWriter;
  decode(input: BinaryReader | Uint8Array, length?: number): T;
  fromJSON(object: any): T;
  toJSON(message: T): unknown;
  create<I extends Exact<DeepPartial<T>, I>>(base?: I): T;
  fromPartial<I extends Exact<DeepPartial<T>, I>>(object: I): T;
}
