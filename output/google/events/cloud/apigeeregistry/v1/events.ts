// Code generated by protoc-gen-ts_proto. DO NOT EDIT.
// versions:
//   protoc-gen-ts_proto  v2.7.7
//   protoc               v6.32.0
// source: google/events/cloud/apigeeregistry/v1/events.proto

/* eslint-disable */
import { BinaryReader, BinaryWriter } from "@bufbuild/protobuf/wire";
import Long from "long";
import { ApiDeploymentEventData, ApiEventData, ApiSpecEventData, ApiVersionEventData, InstanceEventData } from "./data";

export const protobufPackage = "google.events.cloud.apigeeregistry.v1";

/** The CloudEvent raised when an Instance is created. */
export interface InstanceCreatedEvent {
  /** The data associated with the event. */
  data?: InstanceEventData | undefined;
}

/** The CloudEvent raised when an Instance is deleted. */
export interface InstanceDeletedEvent {
  /** The data associated with the event. */
  data?: InstanceEventData | undefined;
}

/** The CloudEvent raised when an Api is created. */
export interface ApiCreatedEvent {
  /** The data associated with the event. */
  data?: ApiEventData | undefined;
}

/** The CloudEvent raised when an Api is updated. */
export interface ApiUpdatedEvent {
  /** The data associated with the event. */
  data?: ApiEventData | undefined;
}

/** The CloudEvent raised when an Api is deleted. */
export interface ApiDeletedEvent {
  /** The data associated with the event. */
  data?: ApiEventData | undefined;
}

/** The CloudEvent raised when an ApiVersion is created. */
export interface ApiVersionCreatedEvent {
  /** The data associated with the event. */
  data?: ApiVersionEventData | undefined;
}

/** The CloudEvent raised when an ApiVersion is updated. */
export interface ApiVersionUpdatedEvent {
  /** The data associated with the event. */
  data?: ApiVersionEventData | undefined;
}

/** The CloudEvent raised when an ApiVersion is deleted. */
export interface ApiVersionDeletedEvent {
  /** The data associated with the event. */
  data?: ApiVersionEventData | undefined;
}

/** The CloudEvent raised when an ApiSpec is created. */
export interface ApiSpecCreatedEvent {
  /** The data associated with the event. */
  data?: ApiSpecEventData | undefined;
}

/** The CloudEvent raised when an ApiSpec is updated. */
export interface ApiSpecUpdatedEvent {
  /** The data associated with the event. */
  data?: ApiSpecEventData | undefined;
}

/** The CloudEvent raised when an ApiSpec is deleted. */
export interface ApiSpecDeletedEvent {
  /** The data associated with the event. */
  data?: ApiSpecEventData | undefined;
}

/** The CloudEvent raised when an ApiDeployment is created. */
export interface ApiDeploymentCreatedEvent {
  /** The data associated with the event. */
  data?: ApiDeploymentEventData | undefined;
}

/** The CloudEvent raised when an ApiDeployment is updated. */
export interface ApiDeploymentUpdatedEvent {
  /** The data associated with the event. */
  data?: ApiDeploymentEventData | undefined;
}

/** The CloudEvent raised when an ApiDeployment is deleted. */
export interface ApiDeploymentDeletedEvent {
  /** The data associated with the event. */
  data?: ApiDeploymentEventData | undefined;
}

function createBaseInstanceCreatedEvent(): InstanceCreatedEvent {
  return { data: undefined };
}

export const InstanceCreatedEvent: MessageFns<InstanceCreatedEvent> = {
  encode(message: InstanceCreatedEvent, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.data !== undefined) {
      InstanceEventData.encode(message.data, writer.uint32(10).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): InstanceCreatedEvent {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    const end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseInstanceCreatedEvent();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.data = InstanceEventData.decode(reader, reader.uint32());
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): InstanceCreatedEvent {
    return { data: isSet(object.data) ? InstanceEventData.fromJSON(object.data) : undefined };
  },

  toJSON(message: InstanceCreatedEvent): unknown {
    const obj: any = {};
    if (message.data !== undefined) {
      obj.data = InstanceEventData.toJSON(message.data);
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<InstanceCreatedEvent>, I>>(base?: I): InstanceCreatedEvent {
    return InstanceCreatedEvent.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<InstanceCreatedEvent>, I>>(object: I): InstanceCreatedEvent {
    const message = createBaseInstanceCreatedEvent();
    message.data = (object.data !== undefined && object.data !== null)
      ? InstanceEventData.fromPartial(object.data)
      : undefined;
    return message;
  },
};

function createBaseInstanceDeletedEvent(): InstanceDeletedEvent {
  return { data: undefined };
}

export const InstanceDeletedEvent: MessageFns<InstanceDeletedEvent> = {
  encode(message: InstanceDeletedEvent, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.data !== undefined) {
      InstanceEventData.encode(message.data, writer.uint32(10).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): InstanceDeletedEvent {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    const end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseInstanceDeletedEvent();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.data = InstanceEventData.decode(reader, reader.uint32());
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): InstanceDeletedEvent {
    return { data: isSet(object.data) ? InstanceEventData.fromJSON(object.data) : undefined };
  },

  toJSON(message: InstanceDeletedEvent): unknown {
    const obj: any = {};
    if (message.data !== undefined) {
      obj.data = InstanceEventData.toJSON(message.data);
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<InstanceDeletedEvent>, I>>(base?: I): InstanceDeletedEvent {
    return InstanceDeletedEvent.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<InstanceDeletedEvent>, I>>(object: I): InstanceDeletedEvent {
    const message = createBaseInstanceDeletedEvent();
    message.data = (object.data !== undefined && object.data !== null)
      ? InstanceEventData.fromPartial(object.data)
      : undefined;
    return message;
  },
};

function createBaseApiCreatedEvent(): ApiCreatedEvent {
  return { data: undefined };
}

export const ApiCreatedEvent: MessageFns<ApiCreatedEvent> = {
  encode(message: ApiCreatedEvent, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.data !== undefined) {
      ApiEventData.encode(message.data, writer.uint32(10).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): ApiCreatedEvent {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    const end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseApiCreatedEvent();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.data = ApiEventData.decode(reader, reader.uint32());
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): ApiCreatedEvent {
    return { data: isSet(object.data) ? ApiEventData.fromJSON(object.data) : undefined };
  },

  toJSON(message: ApiCreatedEvent): unknown {
    const obj: any = {};
    if (message.data !== undefined) {
      obj.data = ApiEventData.toJSON(message.data);
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<ApiCreatedEvent>, I>>(base?: I): ApiCreatedEvent {
    return ApiCreatedEvent.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<ApiCreatedEvent>, I>>(object: I): ApiCreatedEvent {
    const message = createBaseApiCreatedEvent();
    message.data = (object.data !== undefined && object.data !== null)
      ? ApiEventData.fromPartial(object.data)
      : undefined;
    return message;
  },
};

function createBaseApiUpdatedEvent(): ApiUpdatedEvent {
  return { data: undefined };
}

export const ApiUpdatedEvent: MessageFns<ApiUpdatedEvent> = {
  encode(message: ApiUpdatedEvent, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.data !== undefined) {
      ApiEventData.encode(message.data, writer.uint32(10).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): ApiUpdatedEvent {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    const end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseApiUpdatedEvent();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.data = ApiEventData.decode(reader, reader.uint32());
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): ApiUpdatedEvent {
    return { data: isSet(object.data) ? ApiEventData.fromJSON(object.data) : undefined };
  },

  toJSON(message: ApiUpdatedEvent): unknown {
    const obj: any = {};
    if (message.data !== undefined) {
      obj.data = ApiEventData.toJSON(message.data);
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<ApiUpdatedEvent>, I>>(base?: I): ApiUpdatedEvent {
    return ApiUpdatedEvent.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<ApiUpdatedEvent>, I>>(object: I): ApiUpdatedEvent {
    const message = createBaseApiUpdatedEvent();
    message.data = (object.data !== undefined && object.data !== null)
      ? ApiEventData.fromPartial(object.data)
      : undefined;
    return message;
  },
};

function createBaseApiDeletedEvent(): ApiDeletedEvent {
  return { data: undefined };
}

export const ApiDeletedEvent: MessageFns<ApiDeletedEvent> = {
  encode(message: ApiDeletedEvent, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.data !== undefined) {
      ApiEventData.encode(message.data, writer.uint32(10).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): ApiDeletedEvent {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    const end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseApiDeletedEvent();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.data = ApiEventData.decode(reader, reader.uint32());
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): ApiDeletedEvent {
    return { data: isSet(object.data) ? ApiEventData.fromJSON(object.data) : undefined };
  },

  toJSON(message: ApiDeletedEvent): unknown {
    const obj: any = {};
    if (message.data !== undefined) {
      obj.data = ApiEventData.toJSON(message.data);
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<ApiDeletedEvent>, I>>(base?: I): ApiDeletedEvent {
    return ApiDeletedEvent.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<ApiDeletedEvent>, I>>(object: I): ApiDeletedEvent {
    const message = createBaseApiDeletedEvent();
    message.data = (object.data !== undefined && object.data !== null)
      ? ApiEventData.fromPartial(object.data)
      : undefined;
    return message;
  },
};

function createBaseApiVersionCreatedEvent(): ApiVersionCreatedEvent {
  return { data: undefined };
}

export const ApiVersionCreatedEvent: MessageFns<ApiVersionCreatedEvent> = {
  encode(message: ApiVersionCreatedEvent, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.data !== undefined) {
      ApiVersionEventData.encode(message.data, writer.uint32(10).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): ApiVersionCreatedEvent {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    const end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseApiVersionCreatedEvent();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.data = ApiVersionEventData.decode(reader, reader.uint32());
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): ApiVersionCreatedEvent {
    return { data: isSet(object.data) ? ApiVersionEventData.fromJSON(object.data) : undefined };
  },

  toJSON(message: ApiVersionCreatedEvent): unknown {
    const obj: any = {};
    if (message.data !== undefined) {
      obj.data = ApiVersionEventData.toJSON(message.data);
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<ApiVersionCreatedEvent>, I>>(base?: I): ApiVersionCreatedEvent {
    return ApiVersionCreatedEvent.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<ApiVersionCreatedEvent>, I>>(object: I): ApiVersionCreatedEvent {
    const message = createBaseApiVersionCreatedEvent();
    message.data = (object.data !== undefined && object.data !== null)
      ? ApiVersionEventData.fromPartial(object.data)
      : undefined;
    return message;
  },
};

function createBaseApiVersionUpdatedEvent(): ApiVersionUpdatedEvent {
  return { data: undefined };
}

export const ApiVersionUpdatedEvent: MessageFns<ApiVersionUpdatedEvent> = {
  encode(message: ApiVersionUpdatedEvent, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.data !== undefined) {
      ApiVersionEventData.encode(message.data, writer.uint32(10).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): ApiVersionUpdatedEvent {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    const end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseApiVersionUpdatedEvent();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.data = ApiVersionEventData.decode(reader, reader.uint32());
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): ApiVersionUpdatedEvent {
    return { data: isSet(object.data) ? ApiVersionEventData.fromJSON(object.data) : undefined };
  },

  toJSON(message: ApiVersionUpdatedEvent): unknown {
    const obj: any = {};
    if (message.data !== undefined) {
      obj.data = ApiVersionEventData.toJSON(message.data);
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<ApiVersionUpdatedEvent>, I>>(base?: I): ApiVersionUpdatedEvent {
    return ApiVersionUpdatedEvent.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<ApiVersionUpdatedEvent>, I>>(object: I): ApiVersionUpdatedEvent {
    const message = createBaseApiVersionUpdatedEvent();
    message.data = (object.data !== undefined && object.data !== null)
      ? ApiVersionEventData.fromPartial(object.data)
      : undefined;
    return message;
  },
};

function createBaseApiVersionDeletedEvent(): ApiVersionDeletedEvent {
  return { data: undefined };
}

export const ApiVersionDeletedEvent: MessageFns<ApiVersionDeletedEvent> = {
  encode(message: ApiVersionDeletedEvent, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.data !== undefined) {
      ApiVersionEventData.encode(message.data, writer.uint32(10).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): ApiVersionDeletedEvent {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    const end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseApiVersionDeletedEvent();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.data = ApiVersionEventData.decode(reader, reader.uint32());
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): ApiVersionDeletedEvent {
    return { data: isSet(object.data) ? ApiVersionEventData.fromJSON(object.data) : undefined };
  },

  toJSON(message: ApiVersionDeletedEvent): unknown {
    const obj: any = {};
    if (message.data !== undefined) {
      obj.data = ApiVersionEventData.toJSON(message.data);
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<ApiVersionDeletedEvent>, I>>(base?: I): ApiVersionDeletedEvent {
    return ApiVersionDeletedEvent.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<ApiVersionDeletedEvent>, I>>(object: I): ApiVersionDeletedEvent {
    const message = createBaseApiVersionDeletedEvent();
    message.data = (object.data !== undefined && object.data !== null)
      ? ApiVersionEventData.fromPartial(object.data)
      : undefined;
    return message;
  },
};

function createBaseApiSpecCreatedEvent(): ApiSpecCreatedEvent {
  return { data: undefined };
}

export const ApiSpecCreatedEvent: MessageFns<ApiSpecCreatedEvent> = {
  encode(message: ApiSpecCreatedEvent, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.data !== undefined) {
      ApiSpecEventData.encode(message.data, writer.uint32(10).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): ApiSpecCreatedEvent {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    const end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseApiSpecCreatedEvent();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.data = ApiSpecEventData.decode(reader, reader.uint32());
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): ApiSpecCreatedEvent {
    return { data: isSet(object.data) ? ApiSpecEventData.fromJSON(object.data) : undefined };
  },

  toJSON(message: ApiSpecCreatedEvent): unknown {
    const obj: any = {};
    if (message.data !== undefined) {
      obj.data = ApiSpecEventData.toJSON(message.data);
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<ApiSpecCreatedEvent>, I>>(base?: I): ApiSpecCreatedEvent {
    return ApiSpecCreatedEvent.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<ApiSpecCreatedEvent>, I>>(object: I): ApiSpecCreatedEvent {
    const message = createBaseApiSpecCreatedEvent();
    message.data = (object.data !== undefined && object.data !== null)
      ? ApiSpecEventData.fromPartial(object.data)
      : undefined;
    return message;
  },
};

function createBaseApiSpecUpdatedEvent(): ApiSpecUpdatedEvent {
  return { data: undefined };
}

export const ApiSpecUpdatedEvent: MessageFns<ApiSpecUpdatedEvent> = {
  encode(message: ApiSpecUpdatedEvent, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.data !== undefined) {
      ApiSpecEventData.encode(message.data, writer.uint32(10).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): ApiSpecUpdatedEvent {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    const end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseApiSpecUpdatedEvent();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.data = ApiSpecEventData.decode(reader, reader.uint32());
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): ApiSpecUpdatedEvent {
    return { data: isSet(object.data) ? ApiSpecEventData.fromJSON(object.data) : undefined };
  },

  toJSON(message: ApiSpecUpdatedEvent): unknown {
    const obj: any = {};
    if (message.data !== undefined) {
      obj.data = ApiSpecEventData.toJSON(message.data);
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<ApiSpecUpdatedEvent>, I>>(base?: I): ApiSpecUpdatedEvent {
    return ApiSpecUpdatedEvent.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<ApiSpecUpdatedEvent>, I>>(object: I): ApiSpecUpdatedEvent {
    const message = createBaseApiSpecUpdatedEvent();
    message.data = (object.data !== undefined && object.data !== null)
      ? ApiSpecEventData.fromPartial(object.data)
      : undefined;
    return message;
  },
};

function createBaseApiSpecDeletedEvent(): ApiSpecDeletedEvent {
  return { data: undefined };
}

export const ApiSpecDeletedEvent: MessageFns<ApiSpecDeletedEvent> = {
  encode(message: ApiSpecDeletedEvent, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.data !== undefined) {
      ApiSpecEventData.encode(message.data, writer.uint32(10).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): ApiSpecDeletedEvent {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    const end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseApiSpecDeletedEvent();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.data = ApiSpecEventData.decode(reader, reader.uint32());
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): ApiSpecDeletedEvent {
    return { data: isSet(object.data) ? ApiSpecEventData.fromJSON(object.data) : undefined };
  },

  toJSON(message: ApiSpecDeletedEvent): unknown {
    const obj: any = {};
    if (message.data !== undefined) {
      obj.data = ApiSpecEventData.toJSON(message.data);
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<ApiSpecDeletedEvent>, I>>(base?: I): ApiSpecDeletedEvent {
    return ApiSpecDeletedEvent.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<ApiSpecDeletedEvent>, I>>(object: I): ApiSpecDeletedEvent {
    const message = createBaseApiSpecDeletedEvent();
    message.data = (object.data !== undefined && object.data !== null)
      ? ApiSpecEventData.fromPartial(object.data)
      : undefined;
    return message;
  },
};

function createBaseApiDeploymentCreatedEvent(): ApiDeploymentCreatedEvent {
  return { data: undefined };
}

export const ApiDeploymentCreatedEvent: MessageFns<ApiDeploymentCreatedEvent> = {
  encode(message: ApiDeploymentCreatedEvent, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.data !== undefined) {
      ApiDeploymentEventData.encode(message.data, writer.uint32(10).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): ApiDeploymentCreatedEvent {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    const end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseApiDeploymentCreatedEvent();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.data = ApiDeploymentEventData.decode(reader, reader.uint32());
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): ApiDeploymentCreatedEvent {
    return { data: isSet(object.data) ? ApiDeploymentEventData.fromJSON(object.data) : undefined };
  },

  toJSON(message: ApiDeploymentCreatedEvent): unknown {
    const obj: any = {};
    if (message.data !== undefined) {
      obj.data = ApiDeploymentEventData.toJSON(message.data);
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<ApiDeploymentCreatedEvent>, I>>(base?: I): ApiDeploymentCreatedEvent {
    return ApiDeploymentCreatedEvent.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<ApiDeploymentCreatedEvent>, I>>(object: I): ApiDeploymentCreatedEvent {
    const message = createBaseApiDeploymentCreatedEvent();
    message.data = (object.data !== undefined && object.data !== null)
      ? ApiDeploymentEventData.fromPartial(object.data)
      : undefined;
    return message;
  },
};

function createBaseApiDeploymentUpdatedEvent(): ApiDeploymentUpdatedEvent {
  return { data: undefined };
}

export const ApiDeploymentUpdatedEvent: MessageFns<ApiDeploymentUpdatedEvent> = {
  encode(message: ApiDeploymentUpdatedEvent, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.data !== undefined) {
      ApiDeploymentEventData.encode(message.data, writer.uint32(10).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): ApiDeploymentUpdatedEvent {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    const end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseApiDeploymentUpdatedEvent();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.data = ApiDeploymentEventData.decode(reader, reader.uint32());
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): ApiDeploymentUpdatedEvent {
    return { data: isSet(object.data) ? ApiDeploymentEventData.fromJSON(object.data) : undefined };
  },

  toJSON(message: ApiDeploymentUpdatedEvent): unknown {
    const obj: any = {};
    if (message.data !== undefined) {
      obj.data = ApiDeploymentEventData.toJSON(message.data);
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<ApiDeploymentUpdatedEvent>, I>>(base?: I): ApiDeploymentUpdatedEvent {
    return ApiDeploymentUpdatedEvent.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<ApiDeploymentUpdatedEvent>, I>>(object: I): ApiDeploymentUpdatedEvent {
    const message = createBaseApiDeploymentUpdatedEvent();
    message.data = (object.data !== undefined && object.data !== null)
      ? ApiDeploymentEventData.fromPartial(object.data)
      : undefined;
    return message;
  },
};

function createBaseApiDeploymentDeletedEvent(): ApiDeploymentDeletedEvent {
  return { data: undefined };
}

export const ApiDeploymentDeletedEvent: MessageFns<ApiDeploymentDeletedEvent> = {
  encode(message: ApiDeploymentDeletedEvent, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.data !== undefined) {
      ApiDeploymentEventData.encode(message.data, writer.uint32(10).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): ApiDeploymentDeletedEvent {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    const end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseApiDeploymentDeletedEvent();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.data = ApiDeploymentEventData.decode(reader, reader.uint32());
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): ApiDeploymentDeletedEvent {
    return { data: isSet(object.data) ? ApiDeploymentEventData.fromJSON(object.data) : undefined };
  },

  toJSON(message: ApiDeploymentDeletedEvent): unknown {
    const obj: any = {};
    if (message.data !== undefined) {
      obj.data = ApiDeploymentEventData.toJSON(message.data);
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<ApiDeploymentDeletedEvent>, I>>(base?: I): ApiDeploymentDeletedEvent {
    return ApiDeploymentDeletedEvent.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<ApiDeploymentDeletedEvent>, I>>(object: I): ApiDeploymentDeletedEvent {
    const message = createBaseApiDeploymentDeletedEvent();
    message.data = (object.data !== undefined && object.data !== null)
      ? ApiDeploymentEventData.fromPartial(object.data)
      : undefined;
    return message;
  },
};

type Builtin = Date | Function | Uint8Array | string | number | boolean | undefined;

export type DeepPartial<T> = T extends Builtin ? T
  : T extends Long ? string | number | Long : T extends globalThis.Array<infer U> ? globalThis.Array<DeepPartial<U>>
  : T extends ReadonlyArray<infer U> ? ReadonlyArray<DeepPartial<U>>
  : T extends {} ? { [K in keyof T]?: DeepPartial<T[K]> }
  : Partial<T>;

type KeysOfUnion<T> = T extends T ? keyof T : never;
export type Exact<P, I extends P> = P extends Builtin ? P
  : P & { [K in keyof P]: Exact<P[K], I[K]> } & { [K in Exclude<keyof I, KeysOfUnion<P>>]: never };

function isSet(value: any): boolean {
  return value !== null && value !== undefined;
}

export interface MessageFns<T> {
  encode(message: T, writer?: BinaryWriter): BinaryWriter;
  decode(input: BinaryReader | Uint8Array, length?: number): T;
  fromJSON(object: any): T;
  toJSON(message: T): unknown;
  create<I extends Exact<DeepPartial<T>, I>>(base?: I): T;
  fromPartial<I extends Exact<DeepPartial<T>, I>>(object: I): T;
}
