// Code generated by protoc-gen-ts_proto. DO NOT EDIT.
// versions:
//   protoc-gen-ts_proto  v2.7.7
//   protoc               v6.32.0
// source: google/events/cloud/apihub/v1/events.proto

/* eslint-disable */
import { BinaryReader, BinaryWriter } from "@bufbuild/protobuf/wire";
import Long from "long";
import {
  ApiEventData,
  ApiHubInstanceEventData,
  AttributeEventData,
  DependencyEventData,
  DeploymentEventData,
  ExternalApiEventData,
  HostProjectRegistrationEventData,
  RuntimeProjectAttachmentEventData,
  SpecEventData,
  VersionEventData,
} from "./data";

export const protobufPackage = "google.events.cloud.apihub.v1";

/** The CloudEvent raised when a Api is created. */
export interface ApiCreatedEvent {
  /** The data associated with the event. */
  data?: ApiEventData | undefined;
}

/** The CloudEvent raised when a Api is updated. */
export interface ApiUpdatedEvent {
  /** The data associated with the event. */
  data?: ApiEventData | undefined;
}

/** The CloudEvent raised when a Api is deleted. */
export interface ApiDeletedEvent {
  /** The data associated with the event. */
  data?: ApiEventData | undefined;
}

/** The CloudEvent raised when a Version is created. */
export interface VersionCreatedEvent {
  /** The data associated with the event. */
  data?: VersionEventData | undefined;
}

/** The CloudEvent raised when a Version is updated. */
export interface VersionUpdatedEvent {
  /** The data associated with the event. */
  data?: VersionEventData | undefined;
}

/** The CloudEvent raised when a Version is deleted. */
export interface VersionDeletedEvent {
  /** The data associated with the event. */
  data?: VersionEventData | undefined;
}

/** The CloudEvent raised when a Spec is created. */
export interface SpecCreatedEvent {
  /** The data associated with the event. */
  data?: SpecEventData | undefined;
}

/** The CloudEvent raised when a Spec is updated. */
export interface SpecUpdatedEvent {
  /** The data associated with the event. */
  data?: SpecEventData | undefined;
}

/** The CloudEvent raised when a Spec is deleted. */
export interface SpecDeletedEvent {
  /** The data associated with the event. */
  data?: SpecEventData | undefined;
}

/** The CloudEvent raised when a Deployment is created. */
export interface DeploymentCreatedEvent {
  /** The data associated with the event. */
  data?: DeploymentEventData | undefined;
}

/** The CloudEvent raised when a Deployment is updated. */
export interface DeploymentUpdatedEvent {
  /** The data associated with the event. */
  data?: DeploymentEventData | undefined;
}

/** The CloudEvent raised when a Deployment is deleted. */
export interface DeploymentDeletedEvent {
  /** The data associated with the event. */
  data?: DeploymentEventData | undefined;
}

/** The CloudEvent raised when a Attribute is created. */
export interface AttributeCreatedEvent {
  /** The data associated with the event. */
  data?: AttributeEventData | undefined;
}

/** The CloudEvent raised when a ExternalApi is created. */
export interface ExternalApiCreatedEvent {
  /** The data associated with the event. */
  data?: ExternalApiEventData | undefined;
}

/** The CloudEvent raised when a ExternalApi is updated. */
export interface ExternalApiUpdatedEvent {
  /** The data associated with the event. */
  data?: ExternalApiEventData | undefined;
}

/** The CloudEvent raised when a ExternalApi is deleted. */
export interface ExternalApiDeletedEvent {
  /** The data associated with the event. */
  data?: ExternalApiEventData | undefined;
}

/** The CloudEvent raised when a Dependency is created. */
export interface DependencyCreatedEvent {
  /** The data associated with the event. */
  data?: DependencyEventData | undefined;
}

/** The CloudEvent raised when a Dependency is updated. */
export interface DependencyUpdatedEvent {
  /** The data associated with the event. */
  data?: DependencyEventData | undefined;
}

/** The CloudEvent raised when a Dependency is deleted. */
export interface DependencyDeletedEvent {
  /** The data associated with the event. */
  data?: DependencyEventData | undefined;
}

/** The CloudEvent raised when a HostProjectRegistration is created. */
export interface HostProjectRegistrationCreatedEvent {
  /** The data associated with the event. */
  data?: HostProjectRegistrationEventData | undefined;
}

/** The CloudEvent raised when a ApiHubInstance is created. */
export interface ApiHubInstanceCreatedEvent {
  /** The data associated with the event. */
  data?: ApiHubInstanceEventData | undefined;
}

/** The CloudEvent raised when a RuntimeProjectAttachment is created. */
export interface RuntimeProjectAttachmentCreatedEvent {
  /** The data associated with the event. */
  data?: RuntimeProjectAttachmentEventData | undefined;
}

/** The CloudEvent raised when a RuntimeProjectAttachment is deleted. */
export interface RuntimeProjectAttachmentDeletedEvent {
  /** The data associated with the event. */
  data?: RuntimeProjectAttachmentEventData | undefined;
}

function createBaseApiCreatedEvent(): ApiCreatedEvent {
  return { data: undefined };
}

export const ApiCreatedEvent: MessageFns<ApiCreatedEvent> = {
  encode(message: ApiCreatedEvent, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.data !== undefined) {
      ApiEventData.encode(message.data, writer.uint32(10).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): ApiCreatedEvent {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    const end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseApiCreatedEvent();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.data = ApiEventData.decode(reader, reader.uint32());
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): ApiCreatedEvent {
    return { data: isSet(object.data) ? ApiEventData.fromJSON(object.data) : undefined };
  },

  toJSON(message: ApiCreatedEvent): unknown {
    const obj: any = {};
    if (message.data !== undefined) {
      obj.data = ApiEventData.toJSON(message.data);
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<ApiCreatedEvent>, I>>(base?: I): ApiCreatedEvent {
    return ApiCreatedEvent.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<ApiCreatedEvent>, I>>(object: I): ApiCreatedEvent {
    const message = createBaseApiCreatedEvent();
    message.data = (object.data !== undefined && object.data !== null)
      ? ApiEventData.fromPartial(object.data)
      : undefined;
    return message;
  },
};

function createBaseApiUpdatedEvent(): ApiUpdatedEvent {
  return { data: undefined };
}

export const ApiUpdatedEvent: MessageFns<ApiUpdatedEvent> = {
  encode(message: ApiUpdatedEvent, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.data !== undefined) {
      ApiEventData.encode(message.data, writer.uint32(10).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): ApiUpdatedEvent {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    const end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseApiUpdatedEvent();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.data = ApiEventData.decode(reader, reader.uint32());
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): ApiUpdatedEvent {
    return { data: isSet(object.data) ? ApiEventData.fromJSON(object.data) : undefined };
  },

  toJSON(message: ApiUpdatedEvent): unknown {
    const obj: any = {};
    if (message.data !== undefined) {
      obj.data = ApiEventData.toJSON(message.data);
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<ApiUpdatedEvent>, I>>(base?: I): ApiUpdatedEvent {
    return ApiUpdatedEvent.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<ApiUpdatedEvent>, I>>(object: I): ApiUpdatedEvent {
    const message = createBaseApiUpdatedEvent();
    message.data = (object.data !== undefined && object.data !== null)
      ? ApiEventData.fromPartial(object.data)
      : undefined;
    return message;
  },
};

function createBaseApiDeletedEvent(): ApiDeletedEvent {
  return { data: undefined };
}

export const ApiDeletedEvent: MessageFns<ApiDeletedEvent> = {
  encode(message: ApiDeletedEvent, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.data !== undefined) {
      ApiEventData.encode(message.data, writer.uint32(10).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): ApiDeletedEvent {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    const end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseApiDeletedEvent();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.data = ApiEventData.decode(reader, reader.uint32());
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): ApiDeletedEvent {
    return { data: isSet(object.data) ? ApiEventData.fromJSON(object.data) : undefined };
  },

  toJSON(message: ApiDeletedEvent): unknown {
    const obj: any = {};
    if (message.data !== undefined) {
      obj.data = ApiEventData.toJSON(message.data);
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<ApiDeletedEvent>, I>>(base?: I): ApiDeletedEvent {
    return ApiDeletedEvent.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<ApiDeletedEvent>, I>>(object: I): ApiDeletedEvent {
    const message = createBaseApiDeletedEvent();
    message.data = (object.data !== undefined && object.data !== null)
      ? ApiEventData.fromPartial(object.data)
      : undefined;
    return message;
  },
};

function createBaseVersionCreatedEvent(): VersionCreatedEvent {
  return { data: undefined };
}

export const VersionCreatedEvent: MessageFns<VersionCreatedEvent> = {
  encode(message: VersionCreatedEvent, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.data !== undefined) {
      VersionEventData.encode(message.data, writer.uint32(10).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): VersionCreatedEvent {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    const end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseVersionCreatedEvent();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.data = VersionEventData.decode(reader, reader.uint32());
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): VersionCreatedEvent {
    return { data: isSet(object.data) ? VersionEventData.fromJSON(object.data) : undefined };
  },

  toJSON(message: VersionCreatedEvent): unknown {
    const obj: any = {};
    if (message.data !== undefined) {
      obj.data = VersionEventData.toJSON(message.data);
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<VersionCreatedEvent>, I>>(base?: I): VersionCreatedEvent {
    return VersionCreatedEvent.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<VersionCreatedEvent>, I>>(object: I): VersionCreatedEvent {
    const message = createBaseVersionCreatedEvent();
    message.data = (object.data !== undefined && object.data !== null)
      ? VersionEventData.fromPartial(object.data)
      : undefined;
    return message;
  },
};

function createBaseVersionUpdatedEvent(): VersionUpdatedEvent {
  return { data: undefined };
}

export const VersionUpdatedEvent: MessageFns<VersionUpdatedEvent> = {
  encode(message: VersionUpdatedEvent, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.data !== undefined) {
      VersionEventData.encode(message.data, writer.uint32(10).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): VersionUpdatedEvent {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    const end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseVersionUpdatedEvent();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.data = VersionEventData.decode(reader, reader.uint32());
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): VersionUpdatedEvent {
    return { data: isSet(object.data) ? VersionEventData.fromJSON(object.data) : undefined };
  },

  toJSON(message: VersionUpdatedEvent): unknown {
    const obj: any = {};
    if (message.data !== undefined) {
      obj.data = VersionEventData.toJSON(message.data);
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<VersionUpdatedEvent>, I>>(base?: I): VersionUpdatedEvent {
    return VersionUpdatedEvent.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<VersionUpdatedEvent>, I>>(object: I): VersionUpdatedEvent {
    const message = createBaseVersionUpdatedEvent();
    message.data = (object.data !== undefined && object.data !== null)
      ? VersionEventData.fromPartial(object.data)
      : undefined;
    return message;
  },
};

function createBaseVersionDeletedEvent(): VersionDeletedEvent {
  return { data: undefined };
}

export const VersionDeletedEvent: MessageFns<VersionDeletedEvent> = {
  encode(message: VersionDeletedEvent, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.data !== undefined) {
      VersionEventData.encode(message.data, writer.uint32(10).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): VersionDeletedEvent {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    const end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseVersionDeletedEvent();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.data = VersionEventData.decode(reader, reader.uint32());
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): VersionDeletedEvent {
    return { data: isSet(object.data) ? VersionEventData.fromJSON(object.data) : undefined };
  },

  toJSON(message: VersionDeletedEvent): unknown {
    const obj: any = {};
    if (message.data !== undefined) {
      obj.data = VersionEventData.toJSON(message.data);
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<VersionDeletedEvent>, I>>(base?: I): VersionDeletedEvent {
    return VersionDeletedEvent.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<VersionDeletedEvent>, I>>(object: I): VersionDeletedEvent {
    const message = createBaseVersionDeletedEvent();
    message.data = (object.data !== undefined && object.data !== null)
      ? VersionEventData.fromPartial(object.data)
      : undefined;
    return message;
  },
};

function createBaseSpecCreatedEvent(): SpecCreatedEvent {
  return { data: undefined };
}

export const SpecCreatedEvent: MessageFns<SpecCreatedEvent> = {
  encode(message: SpecCreatedEvent, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.data !== undefined) {
      SpecEventData.encode(message.data, writer.uint32(10).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): SpecCreatedEvent {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    const end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseSpecCreatedEvent();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.data = SpecEventData.decode(reader, reader.uint32());
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): SpecCreatedEvent {
    return { data: isSet(object.data) ? SpecEventData.fromJSON(object.data) : undefined };
  },

  toJSON(message: SpecCreatedEvent): unknown {
    const obj: any = {};
    if (message.data !== undefined) {
      obj.data = SpecEventData.toJSON(message.data);
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<SpecCreatedEvent>, I>>(base?: I): SpecCreatedEvent {
    return SpecCreatedEvent.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<SpecCreatedEvent>, I>>(object: I): SpecCreatedEvent {
    const message = createBaseSpecCreatedEvent();
    message.data = (object.data !== undefined && object.data !== null)
      ? SpecEventData.fromPartial(object.data)
      : undefined;
    return message;
  },
};

function createBaseSpecUpdatedEvent(): SpecUpdatedEvent {
  return { data: undefined };
}

export const SpecUpdatedEvent: MessageFns<SpecUpdatedEvent> = {
  encode(message: SpecUpdatedEvent, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.data !== undefined) {
      SpecEventData.encode(message.data, writer.uint32(10).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): SpecUpdatedEvent {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    const end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseSpecUpdatedEvent();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.data = SpecEventData.decode(reader, reader.uint32());
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): SpecUpdatedEvent {
    return { data: isSet(object.data) ? SpecEventData.fromJSON(object.data) : undefined };
  },

  toJSON(message: SpecUpdatedEvent): unknown {
    const obj: any = {};
    if (message.data !== undefined) {
      obj.data = SpecEventData.toJSON(message.data);
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<SpecUpdatedEvent>, I>>(base?: I): SpecUpdatedEvent {
    return SpecUpdatedEvent.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<SpecUpdatedEvent>, I>>(object: I): SpecUpdatedEvent {
    const message = createBaseSpecUpdatedEvent();
    message.data = (object.data !== undefined && object.data !== null)
      ? SpecEventData.fromPartial(object.data)
      : undefined;
    return message;
  },
};

function createBaseSpecDeletedEvent(): SpecDeletedEvent {
  return { data: undefined };
}

export const SpecDeletedEvent: MessageFns<SpecDeletedEvent> = {
  encode(message: SpecDeletedEvent, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.data !== undefined) {
      SpecEventData.encode(message.data, writer.uint32(10).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): SpecDeletedEvent {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    const end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseSpecDeletedEvent();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.data = SpecEventData.decode(reader, reader.uint32());
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): SpecDeletedEvent {
    return { data: isSet(object.data) ? SpecEventData.fromJSON(object.data) : undefined };
  },

  toJSON(message: SpecDeletedEvent): unknown {
    const obj: any = {};
    if (message.data !== undefined) {
      obj.data = SpecEventData.toJSON(message.data);
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<SpecDeletedEvent>, I>>(base?: I): SpecDeletedEvent {
    return SpecDeletedEvent.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<SpecDeletedEvent>, I>>(object: I): SpecDeletedEvent {
    const message = createBaseSpecDeletedEvent();
    message.data = (object.data !== undefined && object.data !== null)
      ? SpecEventData.fromPartial(object.data)
      : undefined;
    return message;
  },
};

function createBaseDeploymentCreatedEvent(): DeploymentCreatedEvent {
  return { data: undefined };
}

export const DeploymentCreatedEvent: MessageFns<DeploymentCreatedEvent> = {
  encode(message: DeploymentCreatedEvent, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.data !== undefined) {
      DeploymentEventData.encode(message.data, writer.uint32(10).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): DeploymentCreatedEvent {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    const end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseDeploymentCreatedEvent();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.data = DeploymentEventData.decode(reader, reader.uint32());
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): DeploymentCreatedEvent {
    return { data: isSet(object.data) ? DeploymentEventData.fromJSON(object.data) : undefined };
  },

  toJSON(message: DeploymentCreatedEvent): unknown {
    const obj: any = {};
    if (message.data !== undefined) {
      obj.data = DeploymentEventData.toJSON(message.data);
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<DeploymentCreatedEvent>, I>>(base?: I): DeploymentCreatedEvent {
    return DeploymentCreatedEvent.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<DeploymentCreatedEvent>, I>>(object: I): DeploymentCreatedEvent {
    const message = createBaseDeploymentCreatedEvent();
    message.data = (object.data !== undefined && object.data !== null)
      ? DeploymentEventData.fromPartial(object.data)
      : undefined;
    return message;
  },
};

function createBaseDeploymentUpdatedEvent(): DeploymentUpdatedEvent {
  return { data: undefined };
}

export const DeploymentUpdatedEvent: MessageFns<DeploymentUpdatedEvent> = {
  encode(message: DeploymentUpdatedEvent, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.data !== undefined) {
      DeploymentEventData.encode(message.data, writer.uint32(10).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): DeploymentUpdatedEvent {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    const end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseDeploymentUpdatedEvent();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.data = DeploymentEventData.decode(reader, reader.uint32());
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): DeploymentUpdatedEvent {
    return { data: isSet(object.data) ? DeploymentEventData.fromJSON(object.data) : undefined };
  },

  toJSON(message: DeploymentUpdatedEvent): unknown {
    const obj: any = {};
    if (message.data !== undefined) {
      obj.data = DeploymentEventData.toJSON(message.data);
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<DeploymentUpdatedEvent>, I>>(base?: I): DeploymentUpdatedEvent {
    return DeploymentUpdatedEvent.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<DeploymentUpdatedEvent>, I>>(object: I): DeploymentUpdatedEvent {
    const message = createBaseDeploymentUpdatedEvent();
    message.data = (object.data !== undefined && object.data !== null)
      ? DeploymentEventData.fromPartial(object.data)
      : undefined;
    return message;
  },
};

function createBaseDeploymentDeletedEvent(): DeploymentDeletedEvent {
  return { data: undefined };
}

export const DeploymentDeletedEvent: MessageFns<DeploymentDeletedEvent> = {
  encode(message: DeploymentDeletedEvent, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.data !== undefined) {
      DeploymentEventData.encode(message.data, writer.uint32(10).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): DeploymentDeletedEvent {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    const end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseDeploymentDeletedEvent();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.data = DeploymentEventData.decode(reader, reader.uint32());
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): DeploymentDeletedEvent {
    return { data: isSet(object.data) ? DeploymentEventData.fromJSON(object.data) : undefined };
  },

  toJSON(message: DeploymentDeletedEvent): unknown {
    const obj: any = {};
    if (message.data !== undefined) {
      obj.data = DeploymentEventData.toJSON(message.data);
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<DeploymentDeletedEvent>, I>>(base?: I): DeploymentDeletedEvent {
    return DeploymentDeletedEvent.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<DeploymentDeletedEvent>, I>>(object: I): DeploymentDeletedEvent {
    const message = createBaseDeploymentDeletedEvent();
    message.data = (object.data !== undefined && object.data !== null)
      ? DeploymentEventData.fromPartial(object.data)
      : undefined;
    return message;
  },
};

function createBaseAttributeCreatedEvent(): AttributeCreatedEvent {
  return { data: undefined };
}

export const AttributeCreatedEvent: MessageFns<AttributeCreatedEvent> = {
  encode(message: AttributeCreatedEvent, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.data !== undefined) {
      AttributeEventData.encode(message.data, writer.uint32(10).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): AttributeCreatedEvent {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    const end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseAttributeCreatedEvent();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.data = AttributeEventData.decode(reader, reader.uint32());
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): AttributeCreatedEvent {
    return { data: isSet(object.data) ? AttributeEventData.fromJSON(object.data) : undefined };
  },

  toJSON(message: AttributeCreatedEvent): unknown {
    const obj: any = {};
    if (message.data !== undefined) {
      obj.data = AttributeEventData.toJSON(message.data);
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<AttributeCreatedEvent>, I>>(base?: I): AttributeCreatedEvent {
    return AttributeCreatedEvent.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<AttributeCreatedEvent>, I>>(object: I): AttributeCreatedEvent {
    const message = createBaseAttributeCreatedEvent();
    message.data = (object.data !== undefined && object.data !== null)
      ? AttributeEventData.fromPartial(object.data)
      : undefined;
    return message;
  },
};

function createBaseExternalApiCreatedEvent(): ExternalApiCreatedEvent {
  return { data: undefined };
}

export const ExternalApiCreatedEvent: MessageFns<ExternalApiCreatedEvent> = {
  encode(message: ExternalApiCreatedEvent, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.data !== undefined) {
      ExternalApiEventData.encode(message.data, writer.uint32(10).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): ExternalApiCreatedEvent {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    const end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseExternalApiCreatedEvent();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.data = ExternalApiEventData.decode(reader, reader.uint32());
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): ExternalApiCreatedEvent {
    return { data: isSet(object.data) ? ExternalApiEventData.fromJSON(object.data) : undefined };
  },

  toJSON(message: ExternalApiCreatedEvent): unknown {
    const obj: any = {};
    if (message.data !== undefined) {
      obj.data = ExternalApiEventData.toJSON(message.data);
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<ExternalApiCreatedEvent>, I>>(base?: I): ExternalApiCreatedEvent {
    return ExternalApiCreatedEvent.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<ExternalApiCreatedEvent>, I>>(object: I): ExternalApiCreatedEvent {
    const message = createBaseExternalApiCreatedEvent();
    message.data = (object.data !== undefined && object.data !== null)
      ? ExternalApiEventData.fromPartial(object.data)
      : undefined;
    return message;
  },
};

function createBaseExternalApiUpdatedEvent(): ExternalApiUpdatedEvent {
  return { data: undefined };
}

export const ExternalApiUpdatedEvent: MessageFns<ExternalApiUpdatedEvent> = {
  encode(message: ExternalApiUpdatedEvent, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.data !== undefined) {
      ExternalApiEventData.encode(message.data, writer.uint32(10).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): ExternalApiUpdatedEvent {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    const end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseExternalApiUpdatedEvent();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.data = ExternalApiEventData.decode(reader, reader.uint32());
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): ExternalApiUpdatedEvent {
    return { data: isSet(object.data) ? ExternalApiEventData.fromJSON(object.data) : undefined };
  },

  toJSON(message: ExternalApiUpdatedEvent): unknown {
    const obj: any = {};
    if (message.data !== undefined) {
      obj.data = ExternalApiEventData.toJSON(message.data);
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<ExternalApiUpdatedEvent>, I>>(base?: I): ExternalApiUpdatedEvent {
    return ExternalApiUpdatedEvent.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<ExternalApiUpdatedEvent>, I>>(object: I): ExternalApiUpdatedEvent {
    const message = createBaseExternalApiUpdatedEvent();
    message.data = (object.data !== undefined && object.data !== null)
      ? ExternalApiEventData.fromPartial(object.data)
      : undefined;
    return message;
  },
};

function createBaseExternalApiDeletedEvent(): ExternalApiDeletedEvent {
  return { data: undefined };
}

export const ExternalApiDeletedEvent: MessageFns<ExternalApiDeletedEvent> = {
  encode(message: ExternalApiDeletedEvent, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.data !== undefined) {
      ExternalApiEventData.encode(message.data, writer.uint32(10).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): ExternalApiDeletedEvent {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    const end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseExternalApiDeletedEvent();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.data = ExternalApiEventData.decode(reader, reader.uint32());
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): ExternalApiDeletedEvent {
    return { data: isSet(object.data) ? ExternalApiEventData.fromJSON(object.data) : undefined };
  },

  toJSON(message: ExternalApiDeletedEvent): unknown {
    const obj: any = {};
    if (message.data !== undefined) {
      obj.data = ExternalApiEventData.toJSON(message.data);
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<ExternalApiDeletedEvent>, I>>(base?: I): ExternalApiDeletedEvent {
    return ExternalApiDeletedEvent.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<ExternalApiDeletedEvent>, I>>(object: I): ExternalApiDeletedEvent {
    const message = createBaseExternalApiDeletedEvent();
    message.data = (object.data !== undefined && object.data !== null)
      ? ExternalApiEventData.fromPartial(object.data)
      : undefined;
    return message;
  },
};

function createBaseDependencyCreatedEvent(): DependencyCreatedEvent {
  return { data: undefined };
}

export const DependencyCreatedEvent: MessageFns<DependencyCreatedEvent> = {
  encode(message: DependencyCreatedEvent, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.data !== undefined) {
      DependencyEventData.encode(message.data, writer.uint32(10).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): DependencyCreatedEvent {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    const end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseDependencyCreatedEvent();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.data = DependencyEventData.decode(reader, reader.uint32());
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): DependencyCreatedEvent {
    return { data: isSet(object.data) ? DependencyEventData.fromJSON(object.data) : undefined };
  },

  toJSON(message: DependencyCreatedEvent): unknown {
    const obj: any = {};
    if (message.data !== undefined) {
      obj.data = DependencyEventData.toJSON(message.data);
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<DependencyCreatedEvent>, I>>(base?: I): DependencyCreatedEvent {
    return DependencyCreatedEvent.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<DependencyCreatedEvent>, I>>(object: I): DependencyCreatedEvent {
    const message = createBaseDependencyCreatedEvent();
    message.data = (object.data !== undefined && object.data !== null)
      ? DependencyEventData.fromPartial(object.data)
      : undefined;
    return message;
  },
};

function createBaseDependencyUpdatedEvent(): DependencyUpdatedEvent {
  return { data: undefined };
}

export const DependencyUpdatedEvent: MessageFns<DependencyUpdatedEvent> = {
  encode(message: DependencyUpdatedEvent, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.data !== undefined) {
      DependencyEventData.encode(message.data, writer.uint32(10).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): DependencyUpdatedEvent {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    const end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseDependencyUpdatedEvent();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.data = DependencyEventData.decode(reader, reader.uint32());
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): DependencyUpdatedEvent {
    return { data: isSet(object.data) ? DependencyEventData.fromJSON(object.data) : undefined };
  },

  toJSON(message: DependencyUpdatedEvent): unknown {
    const obj: any = {};
    if (message.data !== undefined) {
      obj.data = DependencyEventData.toJSON(message.data);
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<DependencyUpdatedEvent>, I>>(base?: I): DependencyUpdatedEvent {
    return DependencyUpdatedEvent.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<DependencyUpdatedEvent>, I>>(object: I): DependencyUpdatedEvent {
    const message = createBaseDependencyUpdatedEvent();
    message.data = (object.data !== undefined && object.data !== null)
      ? DependencyEventData.fromPartial(object.data)
      : undefined;
    return message;
  },
};

function createBaseDependencyDeletedEvent(): DependencyDeletedEvent {
  return { data: undefined };
}

export const DependencyDeletedEvent: MessageFns<DependencyDeletedEvent> = {
  encode(message: DependencyDeletedEvent, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.data !== undefined) {
      DependencyEventData.encode(message.data, writer.uint32(10).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): DependencyDeletedEvent {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    const end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseDependencyDeletedEvent();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.data = DependencyEventData.decode(reader, reader.uint32());
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): DependencyDeletedEvent {
    return { data: isSet(object.data) ? DependencyEventData.fromJSON(object.data) : undefined };
  },

  toJSON(message: DependencyDeletedEvent): unknown {
    const obj: any = {};
    if (message.data !== undefined) {
      obj.data = DependencyEventData.toJSON(message.data);
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<DependencyDeletedEvent>, I>>(base?: I): DependencyDeletedEvent {
    return DependencyDeletedEvent.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<DependencyDeletedEvent>, I>>(object: I): DependencyDeletedEvent {
    const message = createBaseDependencyDeletedEvent();
    message.data = (object.data !== undefined && object.data !== null)
      ? DependencyEventData.fromPartial(object.data)
      : undefined;
    return message;
  },
};

function createBaseHostProjectRegistrationCreatedEvent(): HostProjectRegistrationCreatedEvent {
  return { data: undefined };
}

export const HostProjectRegistrationCreatedEvent: MessageFns<HostProjectRegistrationCreatedEvent> = {
  encode(message: HostProjectRegistrationCreatedEvent, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.data !== undefined) {
      HostProjectRegistrationEventData.encode(message.data, writer.uint32(10).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): HostProjectRegistrationCreatedEvent {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    const end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseHostProjectRegistrationCreatedEvent();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.data = HostProjectRegistrationEventData.decode(reader, reader.uint32());
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): HostProjectRegistrationCreatedEvent {
    return { data: isSet(object.data) ? HostProjectRegistrationEventData.fromJSON(object.data) : undefined };
  },

  toJSON(message: HostProjectRegistrationCreatedEvent): unknown {
    const obj: any = {};
    if (message.data !== undefined) {
      obj.data = HostProjectRegistrationEventData.toJSON(message.data);
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<HostProjectRegistrationCreatedEvent>, I>>(
    base?: I,
  ): HostProjectRegistrationCreatedEvent {
    return HostProjectRegistrationCreatedEvent.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<HostProjectRegistrationCreatedEvent>, I>>(
    object: I,
  ): HostProjectRegistrationCreatedEvent {
    const message = createBaseHostProjectRegistrationCreatedEvent();
    message.data = (object.data !== undefined && object.data !== null)
      ? HostProjectRegistrationEventData.fromPartial(object.data)
      : undefined;
    return message;
  },
};

function createBaseApiHubInstanceCreatedEvent(): ApiHubInstanceCreatedEvent {
  return { data: undefined };
}

export const ApiHubInstanceCreatedEvent: MessageFns<ApiHubInstanceCreatedEvent> = {
  encode(message: ApiHubInstanceCreatedEvent, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.data !== undefined) {
      ApiHubInstanceEventData.encode(message.data, writer.uint32(10).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): ApiHubInstanceCreatedEvent {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    const end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseApiHubInstanceCreatedEvent();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.data = ApiHubInstanceEventData.decode(reader, reader.uint32());
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): ApiHubInstanceCreatedEvent {
    return { data: isSet(object.data) ? ApiHubInstanceEventData.fromJSON(object.data) : undefined };
  },

  toJSON(message: ApiHubInstanceCreatedEvent): unknown {
    const obj: any = {};
    if (message.data !== undefined) {
      obj.data = ApiHubInstanceEventData.toJSON(message.data);
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<ApiHubInstanceCreatedEvent>, I>>(base?: I): ApiHubInstanceCreatedEvent {
    return ApiHubInstanceCreatedEvent.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<ApiHubInstanceCreatedEvent>, I>>(object: I): ApiHubInstanceCreatedEvent {
    const message = createBaseApiHubInstanceCreatedEvent();
    message.data = (object.data !== undefined && object.data !== null)
      ? ApiHubInstanceEventData.fromPartial(object.data)
      : undefined;
    return message;
  },
};

function createBaseRuntimeProjectAttachmentCreatedEvent(): RuntimeProjectAttachmentCreatedEvent {
  return { data: undefined };
}

export const RuntimeProjectAttachmentCreatedEvent: MessageFns<RuntimeProjectAttachmentCreatedEvent> = {
  encode(message: RuntimeProjectAttachmentCreatedEvent, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.data !== undefined) {
      RuntimeProjectAttachmentEventData.encode(message.data, writer.uint32(10).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): RuntimeProjectAttachmentCreatedEvent {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    const end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseRuntimeProjectAttachmentCreatedEvent();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.data = RuntimeProjectAttachmentEventData.decode(reader, reader.uint32());
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): RuntimeProjectAttachmentCreatedEvent {
    return { data: isSet(object.data) ? RuntimeProjectAttachmentEventData.fromJSON(object.data) : undefined };
  },

  toJSON(message: RuntimeProjectAttachmentCreatedEvent): unknown {
    const obj: any = {};
    if (message.data !== undefined) {
      obj.data = RuntimeProjectAttachmentEventData.toJSON(message.data);
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<RuntimeProjectAttachmentCreatedEvent>, I>>(
    base?: I,
  ): RuntimeProjectAttachmentCreatedEvent {
    return RuntimeProjectAttachmentCreatedEvent.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<RuntimeProjectAttachmentCreatedEvent>, I>>(
    object: I,
  ): RuntimeProjectAttachmentCreatedEvent {
    const message = createBaseRuntimeProjectAttachmentCreatedEvent();
    message.data = (object.data !== undefined && object.data !== null)
      ? RuntimeProjectAttachmentEventData.fromPartial(object.data)
      : undefined;
    return message;
  },
};

function createBaseRuntimeProjectAttachmentDeletedEvent(): RuntimeProjectAttachmentDeletedEvent {
  return { data: undefined };
}

export const RuntimeProjectAttachmentDeletedEvent: MessageFns<RuntimeProjectAttachmentDeletedEvent> = {
  encode(message: RuntimeProjectAttachmentDeletedEvent, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.data !== undefined) {
      RuntimeProjectAttachmentEventData.encode(message.data, writer.uint32(10).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): RuntimeProjectAttachmentDeletedEvent {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    const end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseRuntimeProjectAttachmentDeletedEvent();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.data = RuntimeProjectAttachmentEventData.decode(reader, reader.uint32());
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): RuntimeProjectAttachmentDeletedEvent {
    return { data: isSet(object.data) ? RuntimeProjectAttachmentEventData.fromJSON(object.data) : undefined };
  },

  toJSON(message: RuntimeProjectAttachmentDeletedEvent): unknown {
    const obj: any = {};
    if (message.data !== undefined) {
      obj.data = RuntimeProjectAttachmentEventData.toJSON(message.data);
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<RuntimeProjectAttachmentDeletedEvent>, I>>(
    base?: I,
  ): RuntimeProjectAttachmentDeletedEvent {
    return RuntimeProjectAttachmentDeletedEvent.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<RuntimeProjectAttachmentDeletedEvent>, I>>(
    object: I,
  ): RuntimeProjectAttachmentDeletedEvent {
    const message = createBaseRuntimeProjectAttachmentDeletedEvent();
    message.data = (object.data !== undefined && object.data !== null)
      ? RuntimeProjectAttachmentEventData.fromPartial(object.data)
      : undefined;
    return message;
  },
};

type Builtin = Date | Function | Uint8Array | string | number | boolean | undefined;

export type DeepPartial<T> = T extends Builtin ? T
  : T extends Long ? string | number | Long : T extends globalThis.Array<infer U> ? globalThis.Array<DeepPartial<U>>
  : T extends ReadonlyArray<infer U> ? ReadonlyArray<DeepPartial<U>>
  : T extends {} ? { [K in keyof T]?: DeepPartial<T[K]> }
  : Partial<T>;

type KeysOfUnion<T> = T extends T ? keyof T : never;
export type Exact<P, I extends P> = P extends Builtin ? P
  : P & { [K in keyof P]: Exact<P[K], I[K]> } & { [K in Exclude<keyof I, KeysOfUnion<P>>]: never };

function isSet(value: any): boolean {
  return value !== null && value !== undefined;
}

export interface MessageFns<T> {
  encode(message: T, writer?: BinaryWriter): BinaryWriter;
  decode(input: BinaryReader | Uint8Array, length?: number): T;
  fromJSON(object: any): T;
  toJSON(message: T): unknown;
  create<I extends Exact<DeepPartial<T>, I>>(base?: I): T;
  fromPartial<I extends Exact<DeepPartial<T>, I>>(object: I): T;
}
