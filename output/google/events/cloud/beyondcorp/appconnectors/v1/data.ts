// Code generated by protoc-gen-ts_proto. DO NOT EDIT.
// versions:
//   protoc-gen-ts_proto  v2.7.7
//   protoc               v6.32.0
// source: google/events/cloud/beyondcorp/appconnectors/v1/data.proto

/* eslint-disable */
import { BinaryReader, BinaryWriter } from "@bufbuild/protobuf/wire";
import Long from "long";
import { Timestamp } from "../../../../../protobuf/timestamp";

export const protobufPackage = "google.events.cloud.beyondcorp.appconnectors.v1";

/** HealthStatus represents the health status. */
export enum HealthStatus {
  /** HEALTH_STATUS_UNSPECIFIED - Health status is unknown: not initialized or failed to retrieve. */
  HEALTH_STATUS_UNSPECIFIED = 0,
  /** HEALTHY - The resource is healthy. */
  HEALTHY = 1,
  /** UNHEALTHY - The resource is unhealthy. */
  UNHEALTHY = 2,
  /** UNRESPONSIVE - The resource is unresponsive. */
  UNRESPONSIVE = 3,
  /** DEGRADED - Some sub-resources are UNHEALTHY. */
  DEGRADED = 4,
  UNRECOGNIZED = -1,
}

export function healthStatusFromJSON(object: any): HealthStatus {
  switch (object) {
    case 0:
    case "HEALTH_STATUS_UNSPECIFIED":
      return HealthStatus.HEALTH_STATUS_UNSPECIFIED;
    case 1:
    case "HEALTHY":
      return HealthStatus.HEALTHY;
    case 2:
    case "UNHEALTHY":
      return HealthStatus.UNHEALTHY;
    case 3:
    case "UNRESPONSIVE":
      return HealthStatus.UNRESPONSIVE;
    case 4:
    case "DEGRADED":
      return HealthStatus.DEGRADED;
    case -1:
    case "UNRECOGNIZED":
    default:
      return HealthStatus.UNRECOGNIZED;
  }
}

export function healthStatusToJSON(object: HealthStatus): string {
  switch (object) {
    case HealthStatus.HEALTH_STATUS_UNSPECIFIED:
      return "HEALTH_STATUS_UNSPECIFIED";
    case HealthStatus.HEALTHY:
      return "HEALTHY";
    case HealthStatus.UNHEALTHY:
      return "UNHEALTHY";
    case HealthStatus.UNRESPONSIVE:
      return "UNRESPONSIVE";
    case HealthStatus.DEGRADED:
      return "DEGRADED";
    case HealthStatus.UNRECOGNIZED:
    default:
      return "UNRECOGNIZED";
  }
}

/**
 * ResourceInfo represents the information/status of an app connector resource.
 * Such as:
 * - remote_agent
 *   - container
 *     - runtime
 *     - appgateway
 *       - appconnector
 *         - appconnection
 *           - tunnel
 *       - logagent
 */
export interface ResourceInfo {
  /** Required. Unique Id for the resource. */
  id: string;
  /**
   * Overall health status. Overall status is derived based on the status of
   * each sub level resources.
   */
  status: HealthStatus;
  /**
   * The timestamp to collect the info. It is suggested to be set by
   * the topmost level resource only.
   */
  time?:
    | Date
    | undefined;
  /** List of Info for the sub level resources. */
  sub: ResourceInfo[];
}

/**
 * A BeyondCorp connector resource that represents an application facing
 * component deployed proximal to and with direct access to the application
 * instances. It is used to establish connectivity between the remote enterprise
 * environment and GCP. It initiates connections to the applications and can
 * proxy the data from users over the connection.
 */
export interface AppConnector {
  /**
   * Required. Unique resource name of the AppConnector.
   * The name is ignored when creating a AppConnector.
   */
  name: string;
  /** Output only. Timestamp when the resource was created. */
  createTime?:
    | Date
    | undefined;
  /** Output only. Timestamp when the resource was last modified. */
  updateTime?:
    | Date
    | undefined;
  /** Optional. Resource labels to represent user provided metadata. */
  labels: { [key: string]: string };
  /**
   * Optional. An arbitrary user-provided name for the AppConnector. Cannot
   * exceed 64 characters.
   */
  displayName: string;
  /**
   * Output only. A unique identifier for the instance generated by the
   * system.
   */
  uid: string;
  /** Output only. The current state of the AppConnector. */
  state: AppConnector_State;
  /** Required. Principal information about the Identity of the AppConnector. */
  principalInfo?:
    | AppConnector_PrincipalInfo
    | undefined;
  /** Optional. Resource info of the connector. */
  resourceInfo?: ResourceInfo | undefined;
}

/** Represents the different states of a AppConnector. */
export enum AppConnector_State {
  /** STATE_UNSPECIFIED - Default value. This value is unused. */
  STATE_UNSPECIFIED = 0,
  /** CREATING - AppConnector is being created. */
  CREATING = 1,
  /** CREATED - AppConnector has been created. */
  CREATED = 2,
  /** UPDATING - AppConnector's configuration is being updated. */
  UPDATING = 3,
  /** DELETING - AppConnector is being deleted. */
  DELETING = 4,
  /**
   * DOWN - AppConnector is down and may be restored in the future.
   * This happens when CCFE sends ProjectState = OFF.
   */
  DOWN = 5,
  UNRECOGNIZED = -1,
}

export function appConnector_StateFromJSON(object: any): AppConnector_State {
  switch (object) {
    case 0:
    case "STATE_UNSPECIFIED":
      return AppConnector_State.STATE_UNSPECIFIED;
    case 1:
    case "CREATING":
      return AppConnector_State.CREATING;
    case 2:
    case "CREATED":
      return AppConnector_State.CREATED;
    case 3:
    case "UPDATING":
      return AppConnector_State.UPDATING;
    case 4:
    case "DELETING":
      return AppConnector_State.DELETING;
    case 5:
    case "DOWN":
      return AppConnector_State.DOWN;
    case -1:
    case "UNRECOGNIZED":
    default:
      return AppConnector_State.UNRECOGNIZED;
  }
}

export function appConnector_StateToJSON(object: AppConnector_State): string {
  switch (object) {
    case AppConnector_State.STATE_UNSPECIFIED:
      return "STATE_UNSPECIFIED";
    case AppConnector_State.CREATING:
      return "CREATING";
    case AppConnector_State.CREATED:
      return "CREATED";
    case AppConnector_State.UPDATING:
      return "UPDATING";
    case AppConnector_State.DELETING:
      return "DELETING";
    case AppConnector_State.DOWN:
      return "DOWN";
    case AppConnector_State.UNRECOGNIZED:
    default:
      return "UNRECOGNIZED";
  }
}

/** PrincipalInfo represents an Identity oneof. */
export interface AppConnector_PrincipalInfo {
  /** A GCP service account. */
  serviceAccount?: AppConnector_PrincipalInfo_ServiceAccount | undefined;
}

/** ServiceAccount represents a GCP service account. */
export interface AppConnector_PrincipalInfo_ServiceAccount {
  /** Email address of the service account. */
  email: string;
}

export interface AppConnector_LabelsEntry {
  key: string;
  value: string;
}

/** The data within all AppConnector events. */
export interface AppConnectorEventData {
  /** Optional. The AppConnector event payload. Unset for deletion events. */
  payload?: AppConnector | undefined;
}

function createBaseResourceInfo(): ResourceInfo {
  return { id: "", status: 0, time: undefined, sub: [] };
}

export const ResourceInfo: MessageFns<ResourceInfo> = {
  encode(message: ResourceInfo, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.id !== "") {
      writer.uint32(10).string(message.id);
    }
    if (message.status !== 0) {
      writer.uint32(16).int32(message.status);
    }
    if (message.time !== undefined) {
      Timestamp.encode(toTimestamp(message.time), writer.uint32(34).fork()).join();
    }
    for (const v of message.sub) {
      ResourceInfo.encode(v!, writer.uint32(42).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): ResourceInfo {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    const end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseResourceInfo();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.id = reader.string();
          continue;
        }
        case 2: {
          if (tag !== 16) {
            break;
          }

          message.status = reader.int32() as any;
          continue;
        }
        case 4: {
          if (tag !== 34) {
            break;
          }

          message.time = fromTimestamp(Timestamp.decode(reader, reader.uint32()));
          continue;
        }
        case 5: {
          if (tag !== 42) {
            break;
          }

          message.sub.push(ResourceInfo.decode(reader, reader.uint32()));
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): ResourceInfo {
    return {
      id: isSet(object.id) ? globalThis.String(object.id) : "",
      status: isSet(object.status) ? healthStatusFromJSON(object.status) : 0,
      time: isSet(object.time) ? fromJsonTimestamp(object.time) : undefined,
      sub: globalThis.Array.isArray(object?.sub) ? object.sub.map((e: any) => ResourceInfo.fromJSON(e)) : [],
    };
  },

  toJSON(message: ResourceInfo): unknown {
    const obj: any = {};
    if (message.id !== "") {
      obj.id = message.id;
    }
    if (message.status !== 0) {
      obj.status = healthStatusToJSON(message.status);
    }
    if (message.time !== undefined) {
      obj.time = message.time.toISOString();
    }
    if (message.sub?.length) {
      obj.sub = message.sub.map((e) => ResourceInfo.toJSON(e));
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<ResourceInfo>, I>>(base?: I): ResourceInfo {
    return ResourceInfo.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<ResourceInfo>, I>>(object: I): ResourceInfo {
    const message = createBaseResourceInfo();
    message.id = object.id ?? "";
    message.status = object.status ?? 0;
    message.time = object.time ?? undefined;
    message.sub = object.sub?.map((e) => ResourceInfo.fromPartial(e)) || [];
    return message;
  },
};

function createBaseAppConnector(): AppConnector {
  return {
    name: "",
    createTime: undefined,
    updateTime: undefined,
    labels: {},
    displayName: "",
    uid: "",
    state: 0,
    principalInfo: undefined,
    resourceInfo: undefined,
  };
}

export const AppConnector: MessageFns<AppConnector> = {
  encode(message: AppConnector, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.name !== "") {
      writer.uint32(10).string(message.name);
    }
    if (message.createTime !== undefined) {
      Timestamp.encode(toTimestamp(message.createTime), writer.uint32(18).fork()).join();
    }
    if (message.updateTime !== undefined) {
      Timestamp.encode(toTimestamp(message.updateTime), writer.uint32(26).fork()).join();
    }
    Object.entries(message.labels).forEach(([key, value]) => {
      AppConnector_LabelsEntry.encode({ key: key as any, value }, writer.uint32(34).fork()).join();
    });
    if (message.displayName !== "") {
      writer.uint32(42).string(message.displayName);
    }
    if (message.uid !== "") {
      writer.uint32(50).string(message.uid);
    }
    if (message.state !== 0) {
      writer.uint32(56).int32(message.state);
    }
    if (message.principalInfo !== undefined) {
      AppConnector_PrincipalInfo.encode(message.principalInfo, writer.uint32(66).fork()).join();
    }
    if (message.resourceInfo !== undefined) {
      ResourceInfo.encode(message.resourceInfo, writer.uint32(90).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): AppConnector {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    const end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseAppConnector();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.name = reader.string();
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.createTime = fromTimestamp(Timestamp.decode(reader, reader.uint32()));
          continue;
        }
        case 3: {
          if (tag !== 26) {
            break;
          }

          message.updateTime = fromTimestamp(Timestamp.decode(reader, reader.uint32()));
          continue;
        }
        case 4: {
          if (tag !== 34) {
            break;
          }

          const entry4 = AppConnector_LabelsEntry.decode(reader, reader.uint32());
          if (entry4.value !== undefined) {
            message.labels[entry4.key] = entry4.value;
          }
          continue;
        }
        case 5: {
          if (tag !== 42) {
            break;
          }

          message.displayName = reader.string();
          continue;
        }
        case 6: {
          if (tag !== 50) {
            break;
          }

          message.uid = reader.string();
          continue;
        }
        case 7: {
          if (tag !== 56) {
            break;
          }

          message.state = reader.int32() as any;
          continue;
        }
        case 8: {
          if (tag !== 66) {
            break;
          }

          message.principalInfo = AppConnector_PrincipalInfo.decode(reader, reader.uint32());
          continue;
        }
        case 11: {
          if (tag !== 90) {
            break;
          }

          message.resourceInfo = ResourceInfo.decode(reader, reader.uint32());
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): AppConnector {
    return {
      name: isSet(object.name) ? globalThis.String(object.name) : "",
      createTime: isSet(object.createTime) ? fromJsonTimestamp(object.createTime) : undefined,
      updateTime: isSet(object.updateTime) ? fromJsonTimestamp(object.updateTime) : undefined,
      labels: isObject(object.labels)
        ? Object.entries(object.labels).reduce<{ [key: string]: string }>((acc, [key, value]) => {
          acc[key] = String(value);
          return acc;
        }, {})
        : {},
      displayName: isSet(object.displayName) ? globalThis.String(object.displayName) : "",
      uid: isSet(object.uid) ? globalThis.String(object.uid) : "",
      state: isSet(object.state) ? appConnector_StateFromJSON(object.state) : 0,
      principalInfo: isSet(object.principalInfo)
        ? AppConnector_PrincipalInfo.fromJSON(object.principalInfo)
        : undefined,
      resourceInfo: isSet(object.resourceInfo) ? ResourceInfo.fromJSON(object.resourceInfo) : undefined,
    };
  },

  toJSON(message: AppConnector): unknown {
    const obj: any = {};
    if (message.name !== "") {
      obj.name = message.name;
    }
    if (message.createTime !== undefined) {
      obj.createTime = message.createTime.toISOString();
    }
    if (message.updateTime !== undefined) {
      obj.updateTime = message.updateTime.toISOString();
    }
    if (message.labels) {
      const entries = Object.entries(message.labels);
      if (entries.length > 0) {
        obj.labels = {};
        entries.forEach(([k, v]) => {
          obj.labels[k] = v;
        });
      }
    }
    if (message.displayName !== "") {
      obj.displayName = message.displayName;
    }
    if (message.uid !== "") {
      obj.uid = message.uid;
    }
    if (message.state !== 0) {
      obj.state = appConnector_StateToJSON(message.state);
    }
    if (message.principalInfo !== undefined) {
      obj.principalInfo = AppConnector_PrincipalInfo.toJSON(message.principalInfo);
    }
    if (message.resourceInfo !== undefined) {
      obj.resourceInfo = ResourceInfo.toJSON(message.resourceInfo);
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<AppConnector>, I>>(base?: I): AppConnector {
    return AppConnector.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<AppConnector>, I>>(object: I): AppConnector {
    const message = createBaseAppConnector();
    message.name = object.name ?? "";
    message.createTime = object.createTime ?? undefined;
    message.updateTime = object.updateTime ?? undefined;
    message.labels = Object.entries(object.labels ?? {}).reduce<{ [key: string]: string }>((acc, [key, value]) => {
      if (value !== undefined) {
        acc[key] = globalThis.String(value);
      }
      return acc;
    }, {});
    message.displayName = object.displayName ?? "";
    message.uid = object.uid ?? "";
    message.state = object.state ?? 0;
    message.principalInfo = (object.principalInfo !== undefined && object.principalInfo !== null)
      ? AppConnector_PrincipalInfo.fromPartial(object.principalInfo)
      : undefined;
    message.resourceInfo = (object.resourceInfo !== undefined && object.resourceInfo !== null)
      ? ResourceInfo.fromPartial(object.resourceInfo)
      : undefined;
    return message;
  },
};

function createBaseAppConnector_PrincipalInfo(): AppConnector_PrincipalInfo {
  return { serviceAccount: undefined };
}

export const AppConnector_PrincipalInfo: MessageFns<AppConnector_PrincipalInfo> = {
  encode(message: AppConnector_PrincipalInfo, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.serviceAccount !== undefined) {
      AppConnector_PrincipalInfo_ServiceAccount.encode(message.serviceAccount, writer.uint32(10).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): AppConnector_PrincipalInfo {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    const end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseAppConnector_PrincipalInfo();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.serviceAccount = AppConnector_PrincipalInfo_ServiceAccount.decode(reader, reader.uint32());
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): AppConnector_PrincipalInfo {
    return {
      serviceAccount: isSet(object.serviceAccount)
        ? AppConnector_PrincipalInfo_ServiceAccount.fromJSON(object.serviceAccount)
        : undefined,
    };
  },

  toJSON(message: AppConnector_PrincipalInfo): unknown {
    const obj: any = {};
    if (message.serviceAccount !== undefined) {
      obj.serviceAccount = AppConnector_PrincipalInfo_ServiceAccount.toJSON(message.serviceAccount);
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<AppConnector_PrincipalInfo>, I>>(base?: I): AppConnector_PrincipalInfo {
    return AppConnector_PrincipalInfo.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<AppConnector_PrincipalInfo>, I>>(object: I): AppConnector_PrincipalInfo {
    const message = createBaseAppConnector_PrincipalInfo();
    message.serviceAccount = (object.serviceAccount !== undefined && object.serviceAccount !== null)
      ? AppConnector_PrincipalInfo_ServiceAccount.fromPartial(object.serviceAccount)
      : undefined;
    return message;
  },
};

function createBaseAppConnector_PrincipalInfo_ServiceAccount(): AppConnector_PrincipalInfo_ServiceAccount {
  return { email: "" };
}

export const AppConnector_PrincipalInfo_ServiceAccount: MessageFns<AppConnector_PrincipalInfo_ServiceAccount> = {
  encode(message: AppConnector_PrincipalInfo_ServiceAccount, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.email !== "") {
      writer.uint32(10).string(message.email);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): AppConnector_PrincipalInfo_ServiceAccount {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    const end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseAppConnector_PrincipalInfo_ServiceAccount();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.email = reader.string();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): AppConnector_PrincipalInfo_ServiceAccount {
    return { email: isSet(object.email) ? globalThis.String(object.email) : "" };
  },

  toJSON(message: AppConnector_PrincipalInfo_ServiceAccount): unknown {
    const obj: any = {};
    if (message.email !== "") {
      obj.email = message.email;
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<AppConnector_PrincipalInfo_ServiceAccount>, I>>(
    base?: I,
  ): AppConnector_PrincipalInfo_ServiceAccount {
    return AppConnector_PrincipalInfo_ServiceAccount.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<AppConnector_PrincipalInfo_ServiceAccount>, I>>(
    object: I,
  ): AppConnector_PrincipalInfo_ServiceAccount {
    const message = createBaseAppConnector_PrincipalInfo_ServiceAccount();
    message.email = object.email ?? "";
    return message;
  },
};

function createBaseAppConnector_LabelsEntry(): AppConnector_LabelsEntry {
  return { key: "", value: "" };
}

export const AppConnector_LabelsEntry: MessageFns<AppConnector_LabelsEntry> = {
  encode(message: AppConnector_LabelsEntry, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.key !== "") {
      writer.uint32(10).string(message.key);
    }
    if (message.value !== "") {
      writer.uint32(18).string(message.value);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): AppConnector_LabelsEntry {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    const end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseAppConnector_LabelsEntry();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.key = reader.string();
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.value = reader.string();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): AppConnector_LabelsEntry {
    return {
      key: isSet(object.key) ? globalThis.String(object.key) : "",
      value: isSet(object.value) ? globalThis.String(object.value) : "",
    };
  },

  toJSON(message: AppConnector_LabelsEntry): unknown {
    const obj: any = {};
    if (message.key !== "") {
      obj.key = message.key;
    }
    if (message.value !== "") {
      obj.value = message.value;
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<AppConnector_LabelsEntry>, I>>(base?: I): AppConnector_LabelsEntry {
    return AppConnector_LabelsEntry.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<AppConnector_LabelsEntry>, I>>(object: I): AppConnector_LabelsEntry {
    const message = createBaseAppConnector_LabelsEntry();
    message.key = object.key ?? "";
    message.value = object.value ?? "";
    return message;
  },
};

function createBaseAppConnectorEventData(): AppConnectorEventData {
  return { payload: undefined };
}

export const AppConnectorEventData: MessageFns<AppConnectorEventData> = {
  encode(message: AppConnectorEventData, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.payload !== undefined) {
      AppConnector.encode(message.payload, writer.uint32(10).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): AppConnectorEventData {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    const end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseAppConnectorEventData();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.payload = AppConnector.decode(reader, reader.uint32());
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): AppConnectorEventData {
    return { payload: isSet(object.payload) ? AppConnector.fromJSON(object.payload) : undefined };
  },

  toJSON(message: AppConnectorEventData): unknown {
    const obj: any = {};
    if (message.payload !== undefined) {
      obj.payload = AppConnector.toJSON(message.payload);
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<AppConnectorEventData>, I>>(base?: I): AppConnectorEventData {
    return AppConnectorEventData.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<AppConnectorEventData>, I>>(object: I): AppConnectorEventData {
    const message = createBaseAppConnectorEventData();
    message.payload = (object.payload !== undefined && object.payload !== null)
      ? AppConnector.fromPartial(object.payload)
      : undefined;
    return message;
  },
};

type Builtin = Date | Function | Uint8Array | string | number | boolean | undefined;

export type DeepPartial<T> = T extends Builtin ? T
  : T extends Long ? string | number | Long : T extends globalThis.Array<infer U> ? globalThis.Array<DeepPartial<U>>
  : T extends ReadonlyArray<infer U> ? ReadonlyArray<DeepPartial<U>>
  : T extends {} ? { [K in keyof T]?: DeepPartial<T[K]> }
  : Partial<T>;

type KeysOfUnion<T> = T extends T ? keyof T : never;
export type Exact<P, I extends P> = P extends Builtin ? P
  : P & { [K in keyof P]: Exact<P[K], I[K]> } & { [K in Exclude<keyof I, KeysOfUnion<P>>]: never };

function toTimestamp(date: Date): Timestamp {
  const seconds = numberToLong(Math.trunc(date.getTime() / 1_000));
  const nanos = (date.getTime() % 1_000) * 1_000_000;
  return { seconds, nanos };
}

function fromTimestamp(t: Timestamp): Date {
  let millis = (t.seconds.toNumber() || 0) * 1_000;
  millis += (t.nanos || 0) / 1_000_000;
  return new globalThis.Date(millis);
}

function fromJsonTimestamp(o: any): Date {
  if (o instanceof globalThis.Date) {
    return o;
  } else if (typeof o === "string") {
    return new globalThis.Date(o);
  } else {
    return fromTimestamp(Timestamp.fromJSON(o));
  }
}

function numberToLong(number: number) {
  return Long.fromNumber(number);
}

function isObject(value: any): boolean {
  return typeof value === "object" && value !== null;
}

function isSet(value: any): boolean {
  return value !== null && value !== undefined;
}

export interface MessageFns<T> {
  encode(message: T, writer?: BinaryWriter): BinaryWriter;
  decode(input: BinaryReader | Uint8Array, length?: number): T;
  fromJSON(object: any): T;
  toJSON(message: T): unknown;
  create<I extends Exact<DeepPartial<T>, I>>(base?: I): T;
  fromPartial<I extends Exact<DeepPartial<T>, I>>(object: I): T;
}
