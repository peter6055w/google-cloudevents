// Code generated by protoc-gen-ts_proto. DO NOT EDIT.
// versions:
//   protoc-gen-ts_proto  v2.7.7
//   protoc               v6.32.0
// source: google/events/cloud/beyondcorp/appgateways/v1/data.proto

/* eslint-disable */
import { BinaryReader, BinaryWriter } from "@bufbuild/protobuf/wire";
import Long from "long";
import { Timestamp } from "../../../../../protobuf/timestamp";

export const protobufPackage = "google.events.cloud.beyondcorp.appgateways.v1";

/**
 * A BeyondCorp AppGateway resource represents a BeyondCorp protected AppGateway
 * to a remote application. It creates all the necessary GCP components needed
 * for creating a BeyondCorp protected AppGateway. Multiple connectors can be
 * authorised for a single AppGateway.
 */
export interface AppGateway {
  /**
   * Required. Unique resource name of the AppGateway.
   * The name is ignored when creating an AppGateway.
   */
  name: string;
  /** Output only. Timestamp when the resource was created. */
  createTime?:
    | Date
    | undefined;
  /** Output only. Timestamp when the resource was last modified. */
  updateTime?:
    | Date
    | undefined;
  /** Optional. Resource labels to represent user provided metadata. */
  labels: { [key: string]: string };
  /**
   * Optional. An arbitrary user-provided name for the AppGateway. Cannot exceed
   * 64 characters.
   */
  displayName: string;
  /**
   * Output only. A unique identifier for the instance generated by the
   * system.
   */
  uid: string;
  /** Required. The type of network connectivity used by the AppGateway. */
  type: AppGateway_Type;
  /** Output only. The current state of the AppGateway. */
  state: AppGateway_State;
  /** Output only. Server-defined URI for this resource. */
  uri: string;
  /** Output only. A list of connections allocated for the Gateway */
  allocatedConnections: AppGateway_AllocatedConnection[];
  /** Required. The type of hosting used by the AppGateway. */
  hostType: AppGateway_HostType;
}

/**
 * Enum containing list of all possible network connectivity options
 * supported by BeyondCorp AppGateway.
 */
export enum AppGateway_Type {
  /** TYPE_UNSPECIFIED - Default value. This value is unused. */
  TYPE_UNSPECIFIED = 0,
  /** TCP_PROXY - TCP Proxy based BeyondCorp Connection. API will default to this if unset. */
  TCP_PROXY = 1,
  UNRECOGNIZED = -1,
}

export function appGateway_TypeFromJSON(object: any): AppGateway_Type {
  switch (object) {
    case 0:
    case "TYPE_UNSPECIFIED":
      return AppGateway_Type.TYPE_UNSPECIFIED;
    case 1:
    case "TCP_PROXY":
      return AppGateway_Type.TCP_PROXY;
    case -1:
    case "UNRECOGNIZED":
    default:
      return AppGateway_Type.UNRECOGNIZED;
  }
}

export function appGateway_TypeToJSON(object: AppGateway_Type): string {
  switch (object) {
    case AppGateway_Type.TYPE_UNSPECIFIED:
      return "TYPE_UNSPECIFIED";
    case AppGateway_Type.TCP_PROXY:
      return "TCP_PROXY";
    case AppGateway_Type.UNRECOGNIZED:
    default:
      return "UNRECOGNIZED";
  }
}

/** Represents the different states of an AppGateway. */
export enum AppGateway_State {
  /** STATE_UNSPECIFIED - Default value. This value is unused. */
  STATE_UNSPECIFIED = 0,
  /** CREATING - AppGateway is being created. */
  CREATING = 1,
  /** CREATED - AppGateway has been created. */
  CREATED = 2,
  /** UPDATING - AppGateway's configuration is being updated. */
  UPDATING = 3,
  /** DELETING - AppGateway is being deleted. */
  DELETING = 4,
  /**
   * DOWN - AppGateway is down and may be restored in the future.
   * This happens when CCFE sends ProjectState = OFF.
   */
  DOWN = 5,
  UNRECOGNIZED = -1,
}

export function appGateway_StateFromJSON(object: any): AppGateway_State {
  switch (object) {
    case 0:
    case "STATE_UNSPECIFIED":
      return AppGateway_State.STATE_UNSPECIFIED;
    case 1:
    case "CREATING":
      return AppGateway_State.CREATING;
    case 2:
    case "CREATED":
      return AppGateway_State.CREATED;
    case 3:
    case "UPDATING":
      return AppGateway_State.UPDATING;
    case 4:
    case "DELETING":
      return AppGateway_State.DELETING;
    case 5:
    case "DOWN":
      return AppGateway_State.DOWN;
    case -1:
    case "UNRECOGNIZED":
    default:
      return AppGateway_State.UNRECOGNIZED;
  }
}

export function appGateway_StateToJSON(object: AppGateway_State): string {
  switch (object) {
    case AppGateway_State.STATE_UNSPECIFIED:
      return "STATE_UNSPECIFIED";
    case AppGateway_State.CREATING:
      return "CREATING";
    case AppGateway_State.CREATED:
      return "CREATED";
    case AppGateway_State.UPDATING:
      return "UPDATING";
    case AppGateway_State.DELETING:
      return "DELETING";
    case AppGateway_State.DOWN:
      return "DOWN";
    case AppGateway_State.UNRECOGNIZED:
    default:
      return "UNRECOGNIZED";
  }
}

/**
 * Enum containing list of all possible host types supported by BeyondCorp
 * Connection.
 */
export enum AppGateway_HostType {
  /** HOST_TYPE_UNSPECIFIED - Default value. This value is unused. */
  HOST_TYPE_UNSPECIFIED = 0,
  /** GCP_REGIONAL_MIG - AppGateway hosted in a GCP regional managed instance group. */
  GCP_REGIONAL_MIG = 1,
  UNRECOGNIZED = -1,
}

export function appGateway_HostTypeFromJSON(object: any): AppGateway_HostType {
  switch (object) {
    case 0:
    case "HOST_TYPE_UNSPECIFIED":
      return AppGateway_HostType.HOST_TYPE_UNSPECIFIED;
    case 1:
    case "GCP_REGIONAL_MIG":
      return AppGateway_HostType.GCP_REGIONAL_MIG;
    case -1:
    case "UNRECOGNIZED":
    default:
      return AppGateway_HostType.UNRECOGNIZED;
  }
}

export function appGateway_HostTypeToJSON(object: AppGateway_HostType): string {
  switch (object) {
    case AppGateway_HostType.HOST_TYPE_UNSPECIFIED:
      return "HOST_TYPE_UNSPECIFIED";
    case AppGateway_HostType.GCP_REGIONAL_MIG:
      return "GCP_REGIONAL_MIG";
    case AppGateway_HostType.UNRECOGNIZED:
    default:
      return "UNRECOGNIZED";
  }
}

/** Allocated connection of the AppGateway. */
export interface AppGateway_AllocatedConnection {
  /** Required. The PSC uri of an allocated connection */
  pscUri: string;
  /** Required. The ingress port of an allocated connection */
  ingressPort: number;
}

export interface AppGateway_LabelsEntry {
  key: string;
  value: string;
}

/** The data within all AppGateway events. */
export interface AppGatewayEventData {
  /** Optional. The AppGateway event payload. Unset for deletion events. */
  payload?: AppGateway | undefined;
}

function createBaseAppGateway(): AppGateway {
  return {
    name: "",
    createTime: undefined,
    updateTime: undefined,
    labels: {},
    displayName: "",
    uid: "",
    type: 0,
    state: 0,
    uri: "",
    allocatedConnections: [],
    hostType: 0,
  };
}

export const AppGateway: MessageFns<AppGateway> = {
  encode(message: AppGateway, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.name !== "") {
      writer.uint32(10).string(message.name);
    }
    if (message.createTime !== undefined) {
      Timestamp.encode(toTimestamp(message.createTime), writer.uint32(18).fork()).join();
    }
    if (message.updateTime !== undefined) {
      Timestamp.encode(toTimestamp(message.updateTime), writer.uint32(26).fork()).join();
    }
    Object.entries(message.labels).forEach(([key, value]) => {
      AppGateway_LabelsEntry.encode({ key: key as any, value }, writer.uint32(34).fork()).join();
    });
    if (message.displayName !== "") {
      writer.uint32(42).string(message.displayName);
    }
    if (message.uid !== "") {
      writer.uint32(50).string(message.uid);
    }
    if (message.type !== 0) {
      writer.uint32(56).int32(message.type);
    }
    if (message.state !== 0) {
      writer.uint32(64).int32(message.state);
    }
    if (message.uri !== "") {
      writer.uint32(74).string(message.uri);
    }
    for (const v of message.allocatedConnections) {
      AppGateway_AllocatedConnection.encode(v!, writer.uint32(82).fork()).join();
    }
    if (message.hostType !== 0) {
      writer.uint32(88).int32(message.hostType);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): AppGateway {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    const end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseAppGateway();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.name = reader.string();
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.createTime = fromTimestamp(Timestamp.decode(reader, reader.uint32()));
          continue;
        }
        case 3: {
          if (tag !== 26) {
            break;
          }

          message.updateTime = fromTimestamp(Timestamp.decode(reader, reader.uint32()));
          continue;
        }
        case 4: {
          if (tag !== 34) {
            break;
          }

          const entry4 = AppGateway_LabelsEntry.decode(reader, reader.uint32());
          if (entry4.value !== undefined) {
            message.labels[entry4.key] = entry4.value;
          }
          continue;
        }
        case 5: {
          if (tag !== 42) {
            break;
          }

          message.displayName = reader.string();
          continue;
        }
        case 6: {
          if (tag !== 50) {
            break;
          }

          message.uid = reader.string();
          continue;
        }
        case 7: {
          if (tag !== 56) {
            break;
          }

          message.type = reader.int32() as any;
          continue;
        }
        case 8: {
          if (tag !== 64) {
            break;
          }

          message.state = reader.int32() as any;
          continue;
        }
        case 9: {
          if (tag !== 74) {
            break;
          }

          message.uri = reader.string();
          continue;
        }
        case 10: {
          if (tag !== 82) {
            break;
          }

          message.allocatedConnections.push(AppGateway_AllocatedConnection.decode(reader, reader.uint32()));
          continue;
        }
        case 11: {
          if (tag !== 88) {
            break;
          }

          message.hostType = reader.int32() as any;
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): AppGateway {
    return {
      name: isSet(object.name) ? globalThis.String(object.name) : "",
      createTime: isSet(object.createTime) ? fromJsonTimestamp(object.createTime) : undefined,
      updateTime: isSet(object.updateTime) ? fromJsonTimestamp(object.updateTime) : undefined,
      labels: isObject(object.labels)
        ? Object.entries(object.labels).reduce<{ [key: string]: string }>((acc, [key, value]) => {
          acc[key] = String(value);
          return acc;
        }, {})
        : {},
      displayName: isSet(object.displayName) ? globalThis.String(object.displayName) : "",
      uid: isSet(object.uid) ? globalThis.String(object.uid) : "",
      type: isSet(object.type) ? appGateway_TypeFromJSON(object.type) : 0,
      state: isSet(object.state) ? appGateway_StateFromJSON(object.state) : 0,
      uri: isSet(object.uri) ? globalThis.String(object.uri) : "",
      allocatedConnections: globalThis.Array.isArray(object?.allocatedConnections)
        ? object.allocatedConnections.map((e: any) => AppGateway_AllocatedConnection.fromJSON(e))
        : [],
      hostType: isSet(object.hostType) ? appGateway_HostTypeFromJSON(object.hostType) : 0,
    };
  },

  toJSON(message: AppGateway): unknown {
    const obj: any = {};
    if (message.name !== "") {
      obj.name = message.name;
    }
    if (message.createTime !== undefined) {
      obj.createTime = message.createTime.toISOString();
    }
    if (message.updateTime !== undefined) {
      obj.updateTime = message.updateTime.toISOString();
    }
    if (message.labels) {
      const entries = Object.entries(message.labels);
      if (entries.length > 0) {
        obj.labels = {};
        entries.forEach(([k, v]) => {
          obj.labels[k] = v;
        });
      }
    }
    if (message.displayName !== "") {
      obj.displayName = message.displayName;
    }
    if (message.uid !== "") {
      obj.uid = message.uid;
    }
    if (message.type !== 0) {
      obj.type = appGateway_TypeToJSON(message.type);
    }
    if (message.state !== 0) {
      obj.state = appGateway_StateToJSON(message.state);
    }
    if (message.uri !== "") {
      obj.uri = message.uri;
    }
    if (message.allocatedConnections?.length) {
      obj.allocatedConnections = message.allocatedConnections.map((e) => AppGateway_AllocatedConnection.toJSON(e));
    }
    if (message.hostType !== 0) {
      obj.hostType = appGateway_HostTypeToJSON(message.hostType);
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<AppGateway>, I>>(base?: I): AppGateway {
    return AppGateway.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<AppGateway>, I>>(object: I): AppGateway {
    const message = createBaseAppGateway();
    message.name = object.name ?? "";
    message.createTime = object.createTime ?? undefined;
    message.updateTime = object.updateTime ?? undefined;
    message.labels = Object.entries(object.labels ?? {}).reduce<{ [key: string]: string }>((acc, [key, value]) => {
      if (value !== undefined) {
        acc[key] = globalThis.String(value);
      }
      return acc;
    }, {});
    message.displayName = object.displayName ?? "";
    message.uid = object.uid ?? "";
    message.type = object.type ?? 0;
    message.state = object.state ?? 0;
    message.uri = object.uri ?? "";
    message.allocatedConnections =
      object.allocatedConnections?.map((e) => AppGateway_AllocatedConnection.fromPartial(e)) || [];
    message.hostType = object.hostType ?? 0;
    return message;
  },
};

function createBaseAppGateway_AllocatedConnection(): AppGateway_AllocatedConnection {
  return { pscUri: "", ingressPort: 0 };
}

export const AppGateway_AllocatedConnection: MessageFns<AppGateway_AllocatedConnection> = {
  encode(message: AppGateway_AllocatedConnection, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.pscUri !== "") {
      writer.uint32(10).string(message.pscUri);
    }
    if (message.ingressPort !== 0) {
      writer.uint32(16).int32(message.ingressPort);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): AppGateway_AllocatedConnection {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    const end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseAppGateway_AllocatedConnection();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.pscUri = reader.string();
          continue;
        }
        case 2: {
          if (tag !== 16) {
            break;
          }

          message.ingressPort = reader.int32();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): AppGateway_AllocatedConnection {
    return {
      pscUri: isSet(object.pscUri) ? globalThis.String(object.pscUri) : "",
      ingressPort: isSet(object.ingressPort) ? globalThis.Number(object.ingressPort) : 0,
    };
  },

  toJSON(message: AppGateway_AllocatedConnection): unknown {
    const obj: any = {};
    if (message.pscUri !== "") {
      obj.pscUri = message.pscUri;
    }
    if (message.ingressPort !== 0) {
      obj.ingressPort = Math.round(message.ingressPort);
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<AppGateway_AllocatedConnection>, I>>(base?: I): AppGateway_AllocatedConnection {
    return AppGateway_AllocatedConnection.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<AppGateway_AllocatedConnection>, I>>(
    object: I,
  ): AppGateway_AllocatedConnection {
    const message = createBaseAppGateway_AllocatedConnection();
    message.pscUri = object.pscUri ?? "";
    message.ingressPort = object.ingressPort ?? 0;
    return message;
  },
};

function createBaseAppGateway_LabelsEntry(): AppGateway_LabelsEntry {
  return { key: "", value: "" };
}

export const AppGateway_LabelsEntry: MessageFns<AppGateway_LabelsEntry> = {
  encode(message: AppGateway_LabelsEntry, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.key !== "") {
      writer.uint32(10).string(message.key);
    }
    if (message.value !== "") {
      writer.uint32(18).string(message.value);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): AppGateway_LabelsEntry {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    const end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseAppGateway_LabelsEntry();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.key = reader.string();
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.value = reader.string();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): AppGateway_LabelsEntry {
    return {
      key: isSet(object.key) ? globalThis.String(object.key) : "",
      value: isSet(object.value) ? globalThis.String(object.value) : "",
    };
  },

  toJSON(message: AppGateway_LabelsEntry): unknown {
    const obj: any = {};
    if (message.key !== "") {
      obj.key = message.key;
    }
    if (message.value !== "") {
      obj.value = message.value;
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<AppGateway_LabelsEntry>, I>>(base?: I): AppGateway_LabelsEntry {
    return AppGateway_LabelsEntry.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<AppGateway_LabelsEntry>, I>>(object: I): AppGateway_LabelsEntry {
    const message = createBaseAppGateway_LabelsEntry();
    message.key = object.key ?? "";
    message.value = object.value ?? "";
    return message;
  },
};

function createBaseAppGatewayEventData(): AppGatewayEventData {
  return { payload: undefined };
}

export const AppGatewayEventData: MessageFns<AppGatewayEventData> = {
  encode(message: AppGatewayEventData, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.payload !== undefined) {
      AppGateway.encode(message.payload, writer.uint32(10).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): AppGatewayEventData {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    const end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseAppGatewayEventData();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.payload = AppGateway.decode(reader, reader.uint32());
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): AppGatewayEventData {
    return { payload: isSet(object.payload) ? AppGateway.fromJSON(object.payload) : undefined };
  },

  toJSON(message: AppGatewayEventData): unknown {
    const obj: any = {};
    if (message.payload !== undefined) {
      obj.payload = AppGateway.toJSON(message.payload);
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<AppGatewayEventData>, I>>(base?: I): AppGatewayEventData {
    return AppGatewayEventData.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<AppGatewayEventData>, I>>(object: I): AppGatewayEventData {
    const message = createBaseAppGatewayEventData();
    message.payload = (object.payload !== undefined && object.payload !== null)
      ? AppGateway.fromPartial(object.payload)
      : undefined;
    return message;
  },
};

type Builtin = Date | Function | Uint8Array | string | number | boolean | undefined;

export type DeepPartial<T> = T extends Builtin ? T
  : T extends Long ? string | number | Long : T extends globalThis.Array<infer U> ? globalThis.Array<DeepPartial<U>>
  : T extends ReadonlyArray<infer U> ? ReadonlyArray<DeepPartial<U>>
  : T extends {} ? { [K in keyof T]?: DeepPartial<T[K]> }
  : Partial<T>;

type KeysOfUnion<T> = T extends T ? keyof T : never;
export type Exact<P, I extends P> = P extends Builtin ? P
  : P & { [K in keyof P]: Exact<P[K], I[K]> } & { [K in Exclude<keyof I, KeysOfUnion<P>>]: never };

function toTimestamp(date: Date): Timestamp {
  const seconds = numberToLong(Math.trunc(date.getTime() / 1_000));
  const nanos = (date.getTime() % 1_000) * 1_000_000;
  return { seconds, nanos };
}

function fromTimestamp(t: Timestamp): Date {
  let millis = (t.seconds.toNumber() || 0) * 1_000;
  millis += (t.nanos || 0) / 1_000_000;
  return new globalThis.Date(millis);
}

function fromJsonTimestamp(o: any): Date {
  if (o instanceof globalThis.Date) {
    return o;
  } else if (typeof o === "string") {
    return new globalThis.Date(o);
  } else {
    return fromTimestamp(Timestamp.fromJSON(o));
  }
}

function numberToLong(number: number) {
  return Long.fromNumber(number);
}

function isObject(value: any): boolean {
  return typeof value === "object" && value !== null;
}

function isSet(value: any): boolean {
  return value !== null && value !== undefined;
}

export interface MessageFns<T> {
  encode(message: T, writer?: BinaryWriter): BinaryWriter;
  decode(input: BinaryReader | Uint8Array, length?: number): T;
  fromJSON(object: any): T;
  toJSON(message: T): unknown;
  create<I extends Exact<DeepPartial<T>, I>>(base?: I): T;
  fromPartial<I extends Exact<DeepPartial<T>, I>>(object: I): T;
}
