// Code generated by protoc-gen-ts_proto. DO NOT EDIT.
// versions:
//   protoc-gen-ts_proto  v2.7.7
//   protoc               v6.32.0
// source: google/events/cloud/beyondcorp/clientconnectorservices/v1/data.proto

/* eslint-disable */
import { BinaryReader, BinaryWriter } from "@bufbuild/protobuf/wire";
import Long from "long";
import { Timestamp } from "../../../../../protobuf/timestamp";

export const protobufPackage = "google.events.cloud.beyondcorp.clientconnectorservices.v1";

/** Message describing ClientConnectorService object. */
export interface ClientConnectorService {
  /** Required. Name of resource. The name is ignored during creation. */
  name: string;
  /** Output only. [Output only] Create time stamp. */
  createTime?:
    | Date
    | undefined;
  /** Output only. [Output only] Update time stamp. */
  updateTime?:
    | Date
    | undefined;
  /**
   * Optional. User-provided name.
   * The display name should follow certain format.
   * * Must be 6 to 30 characters in length.
   * * Can only contain lowercase letters, numbers, and hyphens.
   * * Must start with a letter.
   */
  displayName: string;
  /** Required. The details of the ingress settings. */
  ingress?:
    | ClientConnectorService_Ingress
    | undefined;
  /** Required. The details of the egress settings. */
  egress?:
    | ClientConnectorService_Egress
    | undefined;
  /** Output only. The operational state of the ClientConnectorService. */
  state: ClientConnectorService_State;
}

/** Represents the different states of a ClientConnectorService. */
export enum ClientConnectorService_State {
  /** STATE_UNSPECIFIED - Default value. This value is unused. */
  STATE_UNSPECIFIED = 0,
  /** CREATING - ClientConnectorService is being created. */
  CREATING = 1,
  /** UPDATING - ClientConnectorService is being updated. */
  UPDATING = 2,
  /** DELETING - ClientConnectorService is being deleted. */
  DELETING = 3,
  /** RUNNING - ClientConnectorService is running. */
  RUNNING = 4,
  /**
   * DOWN - ClientConnectorService is down and may be restored in the future.
   * This happens when CCFE sends ProjectState = OFF.
   */
  DOWN = 5,
  /**
   * ERROR - ClientConnectorService encountered an error and is in an indeterministic
   * state.
   */
  ERROR = 6,
  UNRECOGNIZED = -1,
}

export function clientConnectorService_StateFromJSON(object: any): ClientConnectorService_State {
  switch (object) {
    case 0:
    case "STATE_UNSPECIFIED":
      return ClientConnectorService_State.STATE_UNSPECIFIED;
    case 1:
    case "CREATING":
      return ClientConnectorService_State.CREATING;
    case 2:
    case "UPDATING":
      return ClientConnectorService_State.UPDATING;
    case 3:
    case "DELETING":
      return ClientConnectorService_State.DELETING;
    case 4:
    case "RUNNING":
      return ClientConnectorService_State.RUNNING;
    case 5:
    case "DOWN":
      return ClientConnectorService_State.DOWN;
    case 6:
    case "ERROR":
      return ClientConnectorService_State.ERROR;
    case -1:
    case "UNRECOGNIZED":
    default:
      return ClientConnectorService_State.UNRECOGNIZED;
  }
}

export function clientConnectorService_StateToJSON(object: ClientConnectorService_State): string {
  switch (object) {
    case ClientConnectorService_State.STATE_UNSPECIFIED:
      return "STATE_UNSPECIFIED";
    case ClientConnectorService_State.CREATING:
      return "CREATING";
    case ClientConnectorService_State.UPDATING:
      return "UPDATING";
    case ClientConnectorService_State.DELETING:
      return "DELETING";
    case ClientConnectorService_State.RUNNING:
      return "RUNNING";
    case ClientConnectorService_State.DOWN:
      return "DOWN";
    case ClientConnectorService_State.ERROR:
      return "ERROR";
    case ClientConnectorService_State.UNRECOGNIZED:
    default:
      return "UNRECOGNIZED";
  }
}

/**
 * Settings of how to connect to the ClientGateway.
 * One of the following options should be set.
 */
export interface ClientConnectorService_Ingress {
  /** The basic ingress config for ClientGateways. */
  config?: ClientConnectorService_Ingress_Config | undefined;
}

/** The basic ingress config for ClientGateways. */
export interface ClientConnectorService_Ingress_Config {
  /**
   * Required. Immutable. The transport protocol used between the client and
   * the server.
   */
  transportProtocol: ClientConnectorService_Ingress_Config_TransportProtocol;
  /** Required. The settings used to configure basic ClientGateways. */
  destinationRoutes: ClientConnectorService_Ingress_Config_DestinationRoute[];
}

/** The protocol used to connect to the server. */
export enum ClientConnectorService_Ingress_Config_TransportProtocol {
  /** TRANSPORT_PROTOCOL_UNSPECIFIED - Default value. This value is unused. */
  TRANSPORT_PROTOCOL_UNSPECIFIED = 0,
  /** TCP - TCP protocol. */
  TCP = 1,
  UNRECOGNIZED = -1,
}

export function clientConnectorService_Ingress_Config_TransportProtocolFromJSON(
  object: any,
): ClientConnectorService_Ingress_Config_TransportProtocol {
  switch (object) {
    case 0:
    case "TRANSPORT_PROTOCOL_UNSPECIFIED":
      return ClientConnectorService_Ingress_Config_TransportProtocol.TRANSPORT_PROTOCOL_UNSPECIFIED;
    case 1:
    case "TCP":
      return ClientConnectorService_Ingress_Config_TransportProtocol.TCP;
    case -1:
    case "UNRECOGNIZED":
    default:
      return ClientConnectorService_Ingress_Config_TransportProtocol.UNRECOGNIZED;
  }
}

export function clientConnectorService_Ingress_Config_TransportProtocolToJSON(
  object: ClientConnectorService_Ingress_Config_TransportProtocol,
): string {
  switch (object) {
    case ClientConnectorService_Ingress_Config_TransportProtocol.TRANSPORT_PROTOCOL_UNSPECIFIED:
      return "TRANSPORT_PROTOCOL_UNSPECIFIED";
    case ClientConnectorService_Ingress_Config_TransportProtocol.TCP:
      return "TCP";
    case ClientConnectorService_Ingress_Config_TransportProtocol.UNRECOGNIZED:
    default:
      return "UNRECOGNIZED";
  }
}

/**
 * The setting used to configure ClientGateways.
 * It is adding routes to the client's routing table
 * after the connection is established.
 */
export interface ClientConnectorService_Ingress_Config_DestinationRoute {
  /**
   * Required. The network address of the subnet
   * for which the packet is routed to the ClientGateway.
   */
  address: string;
  /**
   * Required. The network mask of the subnet
   * for which the packet is routed to the ClientGateway.
   */
  netmask: string;
}

/** The details of the egress info. One of the following options should be set. */
export interface ClientConnectorService_Egress {
  /** A VPC from the consumer project. */
  peeredVpc?: ClientConnectorService_Egress_PeeredVpc | undefined;
}

/** The peered VPC owned by the consumer project. */
export interface ClientConnectorService_Egress_PeeredVpc {
  /** Required. The name of the peered VPC owned by the consumer project. */
  networkVpc: string;
}

/** The data within all ClientConnectorService events. */
export interface ClientConnectorServiceEventData {
  /**
   * Optional. The ClientConnectorService event payload. Unset for deletion
   * events.
   */
  payload?: ClientConnectorService | undefined;
}

function createBaseClientConnectorService(): ClientConnectorService {
  return {
    name: "",
    createTime: undefined,
    updateTime: undefined,
    displayName: "",
    ingress: undefined,
    egress: undefined,
    state: 0,
  };
}

export const ClientConnectorService: MessageFns<ClientConnectorService> = {
  encode(message: ClientConnectorService, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.name !== "") {
      writer.uint32(10).string(message.name);
    }
    if (message.createTime !== undefined) {
      Timestamp.encode(toTimestamp(message.createTime), writer.uint32(18).fork()).join();
    }
    if (message.updateTime !== undefined) {
      Timestamp.encode(toTimestamp(message.updateTime), writer.uint32(26).fork()).join();
    }
    if (message.displayName !== "") {
      writer.uint32(34).string(message.displayName);
    }
    if (message.ingress !== undefined) {
      ClientConnectorService_Ingress.encode(message.ingress, writer.uint32(50).fork()).join();
    }
    if (message.egress !== undefined) {
      ClientConnectorService_Egress.encode(message.egress, writer.uint32(58).fork()).join();
    }
    if (message.state !== 0) {
      writer.uint32(64).int32(message.state);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): ClientConnectorService {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    const end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseClientConnectorService();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.name = reader.string();
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.createTime = fromTimestamp(Timestamp.decode(reader, reader.uint32()));
          continue;
        }
        case 3: {
          if (tag !== 26) {
            break;
          }

          message.updateTime = fromTimestamp(Timestamp.decode(reader, reader.uint32()));
          continue;
        }
        case 4: {
          if (tag !== 34) {
            break;
          }

          message.displayName = reader.string();
          continue;
        }
        case 6: {
          if (tag !== 50) {
            break;
          }

          message.ingress = ClientConnectorService_Ingress.decode(reader, reader.uint32());
          continue;
        }
        case 7: {
          if (tag !== 58) {
            break;
          }

          message.egress = ClientConnectorService_Egress.decode(reader, reader.uint32());
          continue;
        }
        case 8: {
          if (tag !== 64) {
            break;
          }

          message.state = reader.int32() as any;
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): ClientConnectorService {
    return {
      name: isSet(object.name) ? globalThis.String(object.name) : "",
      createTime: isSet(object.createTime) ? fromJsonTimestamp(object.createTime) : undefined,
      updateTime: isSet(object.updateTime) ? fromJsonTimestamp(object.updateTime) : undefined,
      displayName: isSet(object.displayName) ? globalThis.String(object.displayName) : "",
      ingress: isSet(object.ingress) ? ClientConnectorService_Ingress.fromJSON(object.ingress) : undefined,
      egress: isSet(object.egress) ? ClientConnectorService_Egress.fromJSON(object.egress) : undefined,
      state: isSet(object.state) ? clientConnectorService_StateFromJSON(object.state) : 0,
    };
  },

  toJSON(message: ClientConnectorService): unknown {
    const obj: any = {};
    if (message.name !== "") {
      obj.name = message.name;
    }
    if (message.createTime !== undefined) {
      obj.createTime = message.createTime.toISOString();
    }
    if (message.updateTime !== undefined) {
      obj.updateTime = message.updateTime.toISOString();
    }
    if (message.displayName !== "") {
      obj.displayName = message.displayName;
    }
    if (message.ingress !== undefined) {
      obj.ingress = ClientConnectorService_Ingress.toJSON(message.ingress);
    }
    if (message.egress !== undefined) {
      obj.egress = ClientConnectorService_Egress.toJSON(message.egress);
    }
    if (message.state !== 0) {
      obj.state = clientConnectorService_StateToJSON(message.state);
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<ClientConnectorService>, I>>(base?: I): ClientConnectorService {
    return ClientConnectorService.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<ClientConnectorService>, I>>(object: I): ClientConnectorService {
    const message = createBaseClientConnectorService();
    message.name = object.name ?? "";
    message.createTime = object.createTime ?? undefined;
    message.updateTime = object.updateTime ?? undefined;
    message.displayName = object.displayName ?? "";
    message.ingress = (object.ingress !== undefined && object.ingress !== null)
      ? ClientConnectorService_Ingress.fromPartial(object.ingress)
      : undefined;
    message.egress = (object.egress !== undefined && object.egress !== null)
      ? ClientConnectorService_Egress.fromPartial(object.egress)
      : undefined;
    message.state = object.state ?? 0;
    return message;
  },
};

function createBaseClientConnectorService_Ingress(): ClientConnectorService_Ingress {
  return { config: undefined };
}

export const ClientConnectorService_Ingress: MessageFns<ClientConnectorService_Ingress> = {
  encode(message: ClientConnectorService_Ingress, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.config !== undefined) {
      ClientConnectorService_Ingress_Config.encode(message.config, writer.uint32(10).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): ClientConnectorService_Ingress {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    const end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseClientConnectorService_Ingress();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.config = ClientConnectorService_Ingress_Config.decode(reader, reader.uint32());
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): ClientConnectorService_Ingress {
    return { config: isSet(object.config) ? ClientConnectorService_Ingress_Config.fromJSON(object.config) : undefined };
  },

  toJSON(message: ClientConnectorService_Ingress): unknown {
    const obj: any = {};
    if (message.config !== undefined) {
      obj.config = ClientConnectorService_Ingress_Config.toJSON(message.config);
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<ClientConnectorService_Ingress>, I>>(base?: I): ClientConnectorService_Ingress {
    return ClientConnectorService_Ingress.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<ClientConnectorService_Ingress>, I>>(
    object: I,
  ): ClientConnectorService_Ingress {
    const message = createBaseClientConnectorService_Ingress();
    message.config = (object.config !== undefined && object.config !== null)
      ? ClientConnectorService_Ingress_Config.fromPartial(object.config)
      : undefined;
    return message;
  },
};

function createBaseClientConnectorService_Ingress_Config(): ClientConnectorService_Ingress_Config {
  return { transportProtocol: 0, destinationRoutes: [] };
}

export const ClientConnectorService_Ingress_Config: MessageFns<ClientConnectorService_Ingress_Config> = {
  encode(message: ClientConnectorService_Ingress_Config, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.transportProtocol !== 0) {
      writer.uint32(8).int32(message.transportProtocol);
    }
    for (const v of message.destinationRoutes) {
      ClientConnectorService_Ingress_Config_DestinationRoute.encode(v!, writer.uint32(18).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): ClientConnectorService_Ingress_Config {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    const end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseClientConnectorService_Ingress_Config();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 8) {
            break;
          }

          message.transportProtocol = reader.int32() as any;
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.destinationRoutes.push(
            ClientConnectorService_Ingress_Config_DestinationRoute.decode(reader, reader.uint32()),
          );
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): ClientConnectorService_Ingress_Config {
    return {
      transportProtocol: isSet(object.transportProtocol)
        ? clientConnectorService_Ingress_Config_TransportProtocolFromJSON(object.transportProtocol)
        : 0,
      destinationRoutes: globalThis.Array.isArray(object?.destinationRoutes)
        ? object.destinationRoutes.map((e: any) => ClientConnectorService_Ingress_Config_DestinationRoute.fromJSON(e))
        : [],
    };
  },

  toJSON(message: ClientConnectorService_Ingress_Config): unknown {
    const obj: any = {};
    if (message.transportProtocol !== 0) {
      obj.transportProtocol = clientConnectorService_Ingress_Config_TransportProtocolToJSON(message.transportProtocol);
    }
    if (message.destinationRoutes?.length) {
      obj.destinationRoutes = message.destinationRoutes.map((e) =>
        ClientConnectorService_Ingress_Config_DestinationRoute.toJSON(e)
      );
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<ClientConnectorService_Ingress_Config>, I>>(
    base?: I,
  ): ClientConnectorService_Ingress_Config {
    return ClientConnectorService_Ingress_Config.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<ClientConnectorService_Ingress_Config>, I>>(
    object: I,
  ): ClientConnectorService_Ingress_Config {
    const message = createBaseClientConnectorService_Ingress_Config();
    message.transportProtocol = object.transportProtocol ?? 0;
    message.destinationRoutes =
      object.destinationRoutes?.map((e) => ClientConnectorService_Ingress_Config_DestinationRoute.fromPartial(e)) || [];
    return message;
  },
};

function createBaseClientConnectorService_Ingress_Config_DestinationRoute(): ClientConnectorService_Ingress_Config_DestinationRoute {
  return { address: "", netmask: "" };
}

export const ClientConnectorService_Ingress_Config_DestinationRoute: MessageFns<
  ClientConnectorService_Ingress_Config_DestinationRoute
> = {
  encode(
    message: ClientConnectorService_Ingress_Config_DestinationRoute,
    writer: BinaryWriter = new BinaryWriter(),
  ): BinaryWriter {
    if (message.address !== "") {
      writer.uint32(10).string(message.address);
    }
    if (message.netmask !== "") {
      writer.uint32(18).string(message.netmask);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): ClientConnectorService_Ingress_Config_DestinationRoute {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    const end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseClientConnectorService_Ingress_Config_DestinationRoute();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.address = reader.string();
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.netmask = reader.string();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): ClientConnectorService_Ingress_Config_DestinationRoute {
    return {
      address: isSet(object.address) ? globalThis.String(object.address) : "",
      netmask: isSet(object.netmask) ? globalThis.String(object.netmask) : "",
    };
  },

  toJSON(message: ClientConnectorService_Ingress_Config_DestinationRoute): unknown {
    const obj: any = {};
    if (message.address !== "") {
      obj.address = message.address;
    }
    if (message.netmask !== "") {
      obj.netmask = message.netmask;
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<ClientConnectorService_Ingress_Config_DestinationRoute>, I>>(
    base?: I,
  ): ClientConnectorService_Ingress_Config_DestinationRoute {
    return ClientConnectorService_Ingress_Config_DestinationRoute.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<ClientConnectorService_Ingress_Config_DestinationRoute>, I>>(
    object: I,
  ): ClientConnectorService_Ingress_Config_DestinationRoute {
    const message = createBaseClientConnectorService_Ingress_Config_DestinationRoute();
    message.address = object.address ?? "";
    message.netmask = object.netmask ?? "";
    return message;
  },
};

function createBaseClientConnectorService_Egress(): ClientConnectorService_Egress {
  return { peeredVpc: undefined };
}

export const ClientConnectorService_Egress: MessageFns<ClientConnectorService_Egress> = {
  encode(message: ClientConnectorService_Egress, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.peeredVpc !== undefined) {
      ClientConnectorService_Egress_PeeredVpc.encode(message.peeredVpc, writer.uint32(10).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): ClientConnectorService_Egress {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    const end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseClientConnectorService_Egress();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.peeredVpc = ClientConnectorService_Egress_PeeredVpc.decode(reader, reader.uint32());
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): ClientConnectorService_Egress {
    return {
      peeredVpc: isSet(object.peeredVpc)
        ? ClientConnectorService_Egress_PeeredVpc.fromJSON(object.peeredVpc)
        : undefined,
    };
  },

  toJSON(message: ClientConnectorService_Egress): unknown {
    const obj: any = {};
    if (message.peeredVpc !== undefined) {
      obj.peeredVpc = ClientConnectorService_Egress_PeeredVpc.toJSON(message.peeredVpc);
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<ClientConnectorService_Egress>, I>>(base?: I): ClientConnectorService_Egress {
    return ClientConnectorService_Egress.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<ClientConnectorService_Egress>, I>>(
    object: I,
  ): ClientConnectorService_Egress {
    const message = createBaseClientConnectorService_Egress();
    message.peeredVpc = (object.peeredVpc !== undefined && object.peeredVpc !== null)
      ? ClientConnectorService_Egress_PeeredVpc.fromPartial(object.peeredVpc)
      : undefined;
    return message;
  },
};

function createBaseClientConnectorService_Egress_PeeredVpc(): ClientConnectorService_Egress_PeeredVpc {
  return { networkVpc: "" };
}

export const ClientConnectorService_Egress_PeeredVpc: MessageFns<ClientConnectorService_Egress_PeeredVpc> = {
  encode(message: ClientConnectorService_Egress_PeeredVpc, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.networkVpc !== "") {
      writer.uint32(10).string(message.networkVpc);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): ClientConnectorService_Egress_PeeredVpc {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    const end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseClientConnectorService_Egress_PeeredVpc();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.networkVpc = reader.string();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): ClientConnectorService_Egress_PeeredVpc {
    return { networkVpc: isSet(object.networkVpc) ? globalThis.String(object.networkVpc) : "" };
  },

  toJSON(message: ClientConnectorService_Egress_PeeredVpc): unknown {
    const obj: any = {};
    if (message.networkVpc !== "") {
      obj.networkVpc = message.networkVpc;
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<ClientConnectorService_Egress_PeeredVpc>, I>>(
    base?: I,
  ): ClientConnectorService_Egress_PeeredVpc {
    return ClientConnectorService_Egress_PeeredVpc.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<ClientConnectorService_Egress_PeeredVpc>, I>>(
    object: I,
  ): ClientConnectorService_Egress_PeeredVpc {
    const message = createBaseClientConnectorService_Egress_PeeredVpc();
    message.networkVpc = object.networkVpc ?? "";
    return message;
  },
};

function createBaseClientConnectorServiceEventData(): ClientConnectorServiceEventData {
  return { payload: undefined };
}

export const ClientConnectorServiceEventData: MessageFns<ClientConnectorServiceEventData> = {
  encode(message: ClientConnectorServiceEventData, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.payload !== undefined) {
      ClientConnectorService.encode(message.payload, writer.uint32(10).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): ClientConnectorServiceEventData {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    const end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseClientConnectorServiceEventData();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.payload = ClientConnectorService.decode(reader, reader.uint32());
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): ClientConnectorServiceEventData {
    return { payload: isSet(object.payload) ? ClientConnectorService.fromJSON(object.payload) : undefined };
  },

  toJSON(message: ClientConnectorServiceEventData): unknown {
    const obj: any = {};
    if (message.payload !== undefined) {
      obj.payload = ClientConnectorService.toJSON(message.payload);
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<ClientConnectorServiceEventData>, I>>(base?: I): ClientConnectorServiceEventData {
    return ClientConnectorServiceEventData.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<ClientConnectorServiceEventData>, I>>(
    object: I,
  ): ClientConnectorServiceEventData {
    const message = createBaseClientConnectorServiceEventData();
    message.payload = (object.payload !== undefined && object.payload !== null)
      ? ClientConnectorService.fromPartial(object.payload)
      : undefined;
    return message;
  },
};

type Builtin = Date | Function | Uint8Array | string | number | boolean | undefined;

export type DeepPartial<T> = T extends Builtin ? T
  : T extends Long ? string | number | Long : T extends globalThis.Array<infer U> ? globalThis.Array<DeepPartial<U>>
  : T extends ReadonlyArray<infer U> ? ReadonlyArray<DeepPartial<U>>
  : T extends {} ? { [K in keyof T]?: DeepPartial<T[K]> }
  : Partial<T>;

type KeysOfUnion<T> = T extends T ? keyof T : never;
export type Exact<P, I extends P> = P extends Builtin ? P
  : P & { [K in keyof P]: Exact<P[K], I[K]> } & { [K in Exclude<keyof I, KeysOfUnion<P>>]: never };

function toTimestamp(date: Date): Timestamp {
  const seconds = numberToLong(Math.trunc(date.getTime() / 1_000));
  const nanos = (date.getTime() % 1_000) * 1_000_000;
  return { seconds, nanos };
}

function fromTimestamp(t: Timestamp): Date {
  let millis = (t.seconds.toNumber() || 0) * 1_000;
  millis += (t.nanos || 0) / 1_000_000;
  return new globalThis.Date(millis);
}

function fromJsonTimestamp(o: any): Date {
  if (o instanceof globalThis.Date) {
    return o;
  } else if (typeof o === "string") {
    return new globalThis.Date(o);
  } else {
    return fromTimestamp(Timestamp.fromJSON(o));
  }
}

function numberToLong(number: number) {
  return Long.fromNumber(number);
}

function isSet(value: any): boolean {
  return value !== null && value !== undefined;
}

export interface MessageFns<T> {
  encode(message: T, writer?: BinaryWriter): BinaryWriter;
  decode(input: BinaryReader | Uint8Array, length?: number): T;
  fromJSON(object: any): T;
  toJSON(message: T): unknown;
  create<I extends Exact<DeepPartial<T>, I>>(base?: I): T;
  fromPartial<I extends Exact<DeepPartial<T>, I>>(object: I): T;
}
