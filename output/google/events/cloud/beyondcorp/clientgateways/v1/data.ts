// Code generated by protoc-gen-ts_proto. DO NOT EDIT.
// versions:
//   protoc-gen-ts_proto  v2.7.7
//   protoc               v6.32.0
// source: google/events/cloud/beyondcorp/clientgateways/v1/data.proto

/* eslint-disable */
import { BinaryReader, BinaryWriter } from "@bufbuild/protobuf/wire";
import Long from "long";
import { Timestamp } from "../../../../../protobuf/timestamp";

export const protobufPackage = "google.events.cloud.beyondcorp.clientgateways.v1";

/** Message describing ClientGateway object. */
export interface ClientGateway {
  /** Required. name of resource. The name is ignored during creation. */
  name: string;
  /** Output only. [Output only] Create time stamp. */
  createTime?:
    | Date
    | undefined;
  /** Output only. [Output only] Update time stamp. */
  updateTime?:
    | Date
    | undefined;
  /** Output only. The operational state of the gateway. */
  state: ClientGateway_State;
  /** Output only. A unique identifier for the instance generated by the system. */
  id: string;
  /**
   * Output only. The client connector service name that the client gateway is
   * associated to. Client Connector Services, named as follows:
   *   `projects/{project_id}/locations/{location_id}/client_connector_services/{client_connector_service_id}`.
   */
  clientConnectorService: string;
}

/** Represents the different states of a gateway. */
export enum ClientGateway_State {
  /** STATE_UNSPECIFIED - Default value. This value is unused. */
  STATE_UNSPECIFIED = 0,
  /** CREATING - Gateway is being created. */
  CREATING = 1,
  /** UPDATING - Gateway is being updated. */
  UPDATING = 2,
  /** DELETING - Gateway is being deleted. */
  DELETING = 3,
  /** RUNNING - Gateway is running. */
  RUNNING = 4,
  /**
   * DOWN - Gateway is down and may be restored in the future.
   * This happens when CCFE sends ProjectState = OFF.
   */
  DOWN = 5,
  /** ERROR - ClientGateway encountered an error and is in indeterministic state. */
  ERROR = 6,
  UNRECOGNIZED = -1,
}

export function clientGateway_StateFromJSON(object: any): ClientGateway_State {
  switch (object) {
    case 0:
    case "STATE_UNSPECIFIED":
      return ClientGateway_State.STATE_UNSPECIFIED;
    case 1:
    case "CREATING":
      return ClientGateway_State.CREATING;
    case 2:
    case "UPDATING":
      return ClientGateway_State.UPDATING;
    case 3:
    case "DELETING":
      return ClientGateway_State.DELETING;
    case 4:
    case "RUNNING":
      return ClientGateway_State.RUNNING;
    case 5:
    case "DOWN":
      return ClientGateway_State.DOWN;
    case 6:
    case "ERROR":
      return ClientGateway_State.ERROR;
    case -1:
    case "UNRECOGNIZED":
    default:
      return ClientGateway_State.UNRECOGNIZED;
  }
}

export function clientGateway_StateToJSON(object: ClientGateway_State): string {
  switch (object) {
    case ClientGateway_State.STATE_UNSPECIFIED:
      return "STATE_UNSPECIFIED";
    case ClientGateway_State.CREATING:
      return "CREATING";
    case ClientGateway_State.UPDATING:
      return "UPDATING";
    case ClientGateway_State.DELETING:
      return "DELETING";
    case ClientGateway_State.RUNNING:
      return "RUNNING";
    case ClientGateway_State.DOWN:
      return "DOWN";
    case ClientGateway_State.ERROR:
      return "ERROR";
    case ClientGateway_State.UNRECOGNIZED:
    default:
      return "UNRECOGNIZED";
  }
}

/** The data within all ClientGateway events. */
export interface ClientGatewayEventData {
  /** Optional. The ClientGateway event payload. Unset for deletion events. */
  payload?: ClientGateway | undefined;
}

function createBaseClientGateway(): ClientGateway {
  return { name: "", createTime: undefined, updateTime: undefined, state: 0, id: "", clientConnectorService: "" };
}

export const ClientGateway: MessageFns<ClientGateway> = {
  encode(message: ClientGateway, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.name !== "") {
      writer.uint32(10).string(message.name);
    }
    if (message.createTime !== undefined) {
      Timestamp.encode(toTimestamp(message.createTime), writer.uint32(18).fork()).join();
    }
    if (message.updateTime !== undefined) {
      Timestamp.encode(toTimestamp(message.updateTime), writer.uint32(26).fork()).join();
    }
    if (message.state !== 0) {
      writer.uint32(32).int32(message.state);
    }
    if (message.id !== "") {
      writer.uint32(42).string(message.id);
    }
    if (message.clientConnectorService !== "") {
      writer.uint32(50).string(message.clientConnectorService);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): ClientGateway {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    const end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseClientGateway();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.name = reader.string();
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.createTime = fromTimestamp(Timestamp.decode(reader, reader.uint32()));
          continue;
        }
        case 3: {
          if (tag !== 26) {
            break;
          }

          message.updateTime = fromTimestamp(Timestamp.decode(reader, reader.uint32()));
          continue;
        }
        case 4: {
          if (tag !== 32) {
            break;
          }

          message.state = reader.int32() as any;
          continue;
        }
        case 5: {
          if (tag !== 42) {
            break;
          }

          message.id = reader.string();
          continue;
        }
        case 6: {
          if (tag !== 50) {
            break;
          }

          message.clientConnectorService = reader.string();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): ClientGateway {
    return {
      name: isSet(object.name) ? globalThis.String(object.name) : "",
      createTime: isSet(object.createTime) ? fromJsonTimestamp(object.createTime) : undefined,
      updateTime: isSet(object.updateTime) ? fromJsonTimestamp(object.updateTime) : undefined,
      state: isSet(object.state) ? clientGateway_StateFromJSON(object.state) : 0,
      id: isSet(object.id) ? globalThis.String(object.id) : "",
      clientConnectorService: isSet(object.clientConnectorService)
        ? globalThis.String(object.clientConnectorService)
        : "",
    };
  },

  toJSON(message: ClientGateway): unknown {
    const obj: any = {};
    if (message.name !== "") {
      obj.name = message.name;
    }
    if (message.createTime !== undefined) {
      obj.createTime = message.createTime.toISOString();
    }
    if (message.updateTime !== undefined) {
      obj.updateTime = message.updateTime.toISOString();
    }
    if (message.state !== 0) {
      obj.state = clientGateway_StateToJSON(message.state);
    }
    if (message.id !== "") {
      obj.id = message.id;
    }
    if (message.clientConnectorService !== "") {
      obj.clientConnectorService = message.clientConnectorService;
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<ClientGateway>, I>>(base?: I): ClientGateway {
    return ClientGateway.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<ClientGateway>, I>>(object: I): ClientGateway {
    const message = createBaseClientGateway();
    message.name = object.name ?? "";
    message.createTime = object.createTime ?? undefined;
    message.updateTime = object.updateTime ?? undefined;
    message.state = object.state ?? 0;
    message.id = object.id ?? "";
    message.clientConnectorService = object.clientConnectorService ?? "";
    return message;
  },
};

function createBaseClientGatewayEventData(): ClientGatewayEventData {
  return { payload: undefined };
}

export const ClientGatewayEventData: MessageFns<ClientGatewayEventData> = {
  encode(message: ClientGatewayEventData, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.payload !== undefined) {
      ClientGateway.encode(message.payload, writer.uint32(10).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): ClientGatewayEventData {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    const end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseClientGatewayEventData();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.payload = ClientGateway.decode(reader, reader.uint32());
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): ClientGatewayEventData {
    return { payload: isSet(object.payload) ? ClientGateway.fromJSON(object.payload) : undefined };
  },

  toJSON(message: ClientGatewayEventData): unknown {
    const obj: any = {};
    if (message.payload !== undefined) {
      obj.payload = ClientGateway.toJSON(message.payload);
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<ClientGatewayEventData>, I>>(base?: I): ClientGatewayEventData {
    return ClientGatewayEventData.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<ClientGatewayEventData>, I>>(object: I): ClientGatewayEventData {
    const message = createBaseClientGatewayEventData();
    message.payload = (object.payload !== undefined && object.payload !== null)
      ? ClientGateway.fromPartial(object.payload)
      : undefined;
    return message;
  },
};

type Builtin = Date | Function | Uint8Array | string | number | boolean | undefined;

export type DeepPartial<T> = T extends Builtin ? T
  : T extends Long ? string | number | Long : T extends globalThis.Array<infer U> ? globalThis.Array<DeepPartial<U>>
  : T extends ReadonlyArray<infer U> ? ReadonlyArray<DeepPartial<U>>
  : T extends {} ? { [K in keyof T]?: DeepPartial<T[K]> }
  : Partial<T>;

type KeysOfUnion<T> = T extends T ? keyof T : never;
export type Exact<P, I extends P> = P extends Builtin ? P
  : P & { [K in keyof P]: Exact<P[K], I[K]> } & { [K in Exclude<keyof I, KeysOfUnion<P>>]: never };

function toTimestamp(date: Date): Timestamp {
  const seconds = numberToLong(Math.trunc(date.getTime() / 1_000));
  const nanos = (date.getTime() % 1_000) * 1_000_000;
  return { seconds, nanos };
}

function fromTimestamp(t: Timestamp): Date {
  let millis = (t.seconds.toNumber() || 0) * 1_000;
  millis += (t.nanos || 0) / 1_000_000;
  return new globalThis.Date(millis);
}

function fromJsonTimestamp(o: any): Date {
  if (o instanceof globalThis.Date) {
    return o;
  } else if (typeof o === "string") {
    return new globalThis.Date(o);
  } else {
    return fromTimestamp(Timestamp.fromJSON(o));
  }
}

function numberToLong(number: number) {
  return Long.fromNumber(number);
}

function isSet(value: any): boolean {
  return value !== null && value !== undefined;
}

export interface MessageFns<T> {
  encode(message: T, writer?: BinaryWriter): BinaryWriter;
  decode(input: BinaryReader | Uint8Array, length?: number): T;
  fromJSON(object: any): T;
  toJSON(message: T): unknown;
  create<I extends Exact<DeepPartial<T>, I>>(base?: I): T;
  fromPartial<I extends Exact<DeepPartial<T>, I>>(object: I): T;
}
