// Code generated by protoc-gen-ts_proto. DO NOT EDIT.
// versions:
//   protoc-gen-ts_proto  v2.7.7
//   protoc               v6.32.0
// source: google/events/cloud/certificatemanager/v1/events.proto

/* eslint-disable */
import { BinaryReader, BinaryWriter } from "@bufbuild/protobuf/wire";
import Long from "long";
import {
  CertificateEventData,
  CertificateIssuanceConfigEventData,
  CertificateMapEntryEventData,
  CertificateMapEventData,
  DnsAuthorizationEventData,
} from "./data";

export const protobufPackage = "google.events.cloud.certificatemanager.v1";

/** The CloudEvent raised when a Certificate is created. */
export interface CertificateCreatedEvent {
  /** The data associated with the event. */
  data?: CertificateEventData | undefined;
}

/** The CloudEvent raised when a Certificate is updated. */
export interface CertificateUpdatedEvent {
  /** The data associated with the event. */
  data?: CertificateEventData | undefined;
}

/** The CloudEvent raised when a Certificate is deleted. */
export interface CertificateDeletedEvent {
  /** The data associated with the event. */
  data?: CertificateEventData | undefined;
}

/** The CloudEvent raised when a CertificateMap is created. */
export interface CertificateMapCreatedEvent {
  /** The data associated with the event. */
  data?: CertificateMapEventData | undefined;
}

/** The CloudEvent raised when a CertificateMap is updated. */
export interface CertificateMapUpdatedEvent {
  /** The data associated with the event. */
  data?: CertificateMapEventData | undefined;
}

/** The CloudEvent raised when a CertificateMap is deleted. */
export interface CertificateMapDeletedEvent {
  /** The data associated with the event. */
  data?: CertificateMapEventData | undefined;
}

/** The CloudEvent raised when a CertificateMapEntry is created. */
export interface CertificateMapEntryCreatedEvent {
  /** The data associated with the event. */
  data?: CertificateMapEntryEventData | undefined;
}

/** The CloudEvent raised when a CertificateMapEntry is updated. */
export interface CertificateMapEntryUpdatedEvent {
  /** The data associated with the event. */
  data?: CertificateMapEntryEventData | undefined;
}

/** The CloudEvent raised when a CertificateMapEntry is deleted. */
export interface CertificateMapEntryDeletedEvent {
  /** The data associated with the event. */
  data?: CertificateMapEntryEventData | undefined;
}

/** The CloudEvent raised when a DnsAuthorization is created. */
export interface DnsAuthorizationCreatedEvent {
  /** The data associated with the event. */
  data?: DnsAuthorizationEventData | undefined;
}

/** The CloudEvent raised when a DnsAuthorization is updated. */
export interface DnsAuthorizationUpdatedEvent {
  /** The data associated with the event. */
  data?: DnsAuthorizationEventData | undefined;
}

/** The CloudEvent raised when a DnsAuthorization is deleted. */
export interface DnsAuthorizationDeletedEvent {
  /** The data associated with the event. */
  data?: DnsAuthorizationEventData | undefined;
}

/** The CloudEvent raised when a CertificateIssuanceConfig is created. */
export interface CertificateIssuanceConfigCreatedEvent {
  /** The data associated with the event. */
  data?: CertificateIssuanceConfigEventData | undefined;
}

/** The CloudEvent raised when a CertificateIssuanceConfig is deleted. */
export interface CertificateIssuanceConfigDeletedEvent {
  /** The data associated with the event. */
  data?: CertificateIssuanceConfigEventData | undefined;
}

function createBaseCertificateCreatedEvent(): CertificateCreatedEvent {
  return { data: undefined };
}

export const CertificateCreatedEvent: MessageFns<CertificateCreatedEvent> = {
  encode(message: CertificateCreatedEvent, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.data !== undefined) {
      CertificateEventData.encode(message.data, writer.uint32(10).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): CertificateCreatedEvent {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    const end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseCertificateCreatedEvent();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.data = CertificateEventData.decode(reader, reader.uint32());
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): CertificateCreatedEvent {
    return { data: isSet(object.data) ? CertificateEventData.fromJSON(object.data) : undefined };
  },

  toJSON(message: CertificateCreatedEvent): unknown {
    const obj: any = {};
    if (message.data !== undefined) {
      obj.data = CertificateEventData.toJSON(message.data);
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<CertificateCreatedEvent>, I>>(base?: I): CertificateCreatedEvent {
    return CertificateCreatedEvent.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<CertificateCreatedEvent>, I>>(object: I): CertificateCreatedEvent {
    const message = createBaseCertificateCreatedEvent();
    message.data = (object.data !== undefined && object.data !== null)
      ? CertificateEventData.fromPartial(object.data)
      : undefined;
    return message;
  },
};

function createBaseCertificateUpdatedEvent(): CertificateUpdatedEvent {
  return { data: undefined };
}

export const CertificateUpdatedEvent: MessageFns<CertificateUpdatedEvent> = {
  encode(message: CertificateUpdatedEvent, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.data !== undefined) {
      CertificateEventData.encode(message.data, writer.uint32(10).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): CertificateUpdatedEvent {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    const end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseCertificateUpdatedEvent();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.data = CertificateEventData.decode(reader, reader.uint32());
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): CertificateUpdatedEvent {
    return { data: isSet(object.data) ? CertificateEventData.fromJSON(object.data) : undefined };
  },

  toJSON(message: CertificateUpdatedEvent): unknown {
    const obj: any = {};
    if (message.data !== undefined) {
      obj.data = CertificateEventData.toJSON(message.data);
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<CertificateUpdatedEvent>, I>>(base?: I): CertificateUpdatedEvent {
    return CertificateUpdatedEvent.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<CertificateUpdatedEvent>, I>>(object: I): CertificateUpdatedEvent {
    const message = createBaseCertificateUpdatedEvent();
    message.data = (object.data !== undefined && object.data !== null)
      ? CertificateEventData.fromPartial(object.data)
      : undefined;
    return message;
  },
};

function createBaseCertificateDeletedEvent(): CertificateDeletedEvent {
  return { data: undefined };
}

export const CertificateDeletedEvent: MessageFns<CertificateDeletedEvent> = {
  encode(message: CertificateDeletedEvent, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.data !== undefined) {
      CertificateEventData.encode(message.data, writer.uint32(10).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): CertificateDeletedEvent {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    const end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseCertificateDeletedEvent();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.data = CertificateEventData.decode(reader, reader.uint32());
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): CertificateDeletedEvent {
    return { data: isSet(object.data) ? CertificateEventData.fromJSON(object.data) : undefined };
  },

  toJSON(message: CertificateDeletedEvent): unknown {
    const obj: any = {};
    if (message.data !== undefined) {
      obj.data = CertificateEventData.toJSON(message.data);
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<CertificateDeletedEvent>, I>>(base?: I): CertificateDeletedEvent {
    return CertificateDeletedEvent.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<CertificateDeletedEvent>, I>>(object: I): CertificateDeletedEvent {
    const message = createBaseCertificateDeletedEvent();
    message.data = (object.data !== undefined && object.data !== null)
      ? CertificateEventData.fromPartial(object.data)
      : undefined;
    return message;
  },
};

function createBaseCertificateMapCreatedEvent(): CertificateMapCreatedEvent {
  return { data: undefined };
}

export const CertificateMapCreatedEvent: MessageFns<CertificateMapCreatedEvent> = {
  encode(message: CertificateMapCreatedEvent, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.data !== undefined) {
      CertificateMapEventData.encode(message.data, writer.uint32(10).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): CertificateMapCreatedEvent {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    const end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseCertificateMapCreatedEvent();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.data = CertificateMapEventData.decode(reader, reader.uint32());
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): CertificateMapCreatedEvent {
    return { data: isSet(object.data) ? CertificateMapEventData.fromJSON(object.data) : undefined };
  },

  toJSON(message: CertificateMapCreatedEvent): unknown {
    const obj: any = {};
    if (message.data !== undefined) {
      obj.data = CertificateMapEventData.toJSON(message.data);
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<CertificateMapCreatedEvent>, I>>(base?: I): CertificateMapCreatedEvent {
    return CertificateMapCreatedEvent.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<CertificateMapCreatedEvent>, I>>(object: I): CertificateMapCreatedEvent {
    const message = createBaseCertificateMapCreatedEvent();
    message.data = (object.data !== undefined && object.data !== null)
      ? CertificateMapEventData.fromPartial(object.data)
      : undefined;
    return message;
  },
};

function createBaseCertificateMapUpdatedEvent(): CertificateMapUpdatedEvent {
  return { data: undefined };
}

export const CertificateMapUpdatedEvent: MessageFns<CertificateMapUpdatedEvent> = {
  encode(message: CertificateMapUpdatedEvent, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.data !== undefined) {
      CertificateMapEventData.encode(message.data, writer.uint32(10).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): CertificateMapUpdatedEvent {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    const end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseCertificateMapUpdatedEvent();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.data = CertificateMapEventData.decode(reader, reader.uint32());
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): CertificateMapUpdatedEvent {
    return { data: isSet(object.data) ? CertificateMapEventData.fromJSON(object.data) : undefined };
  },

  toJSON(message: CertificateMapUpdatedEvent): unknown {
    const obj: any = {};
    if (message.data !== undefined) {
      obj.data = CertificateMapEventData.toJSON(message.data);
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<CertificateMapUpdatedEvent>, I>>(base?: I): CertificateMapUpdatedEvent {
    return CertificateMapUpdatedEvent.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<CertificateMapUpdatedEvent>, I>>(object: I): CertificateMapUpdatedEvent {
    const message = createBaseCertificateMapUpdatedEvent();
    message.data = (object.data !== undefined && object.data !== null)
      ? CertificateMapEventData.fromPartial(object.data)
      : undefined;
    return message;
  },
};

function createBaseCertificateMapDeletedEvent(): CertificateMapDeletedEvent {
  return { data: undefined };
}

export const CertificateMapDeletedEvent: MessageFns<CertificateMapDeletedEvent> = {
  encode(message: CertificateMapDeletedEvent, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.data !== undefined) {
      CertificateMapEventData.encode(message.data, writer.uint32(10).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): CertificateMapDeletedEvent {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    const end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseCertificateMapDeletedEvent();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.data = CertificateMapEventData.decode(reader, reader.uint32());
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): CertificateMapDeletedEvent {
    return { data: isSet(object.data) ? CertificateMapEventData.fromJSON(object.data) : undefined };
  },

  toJSON(message: CertificateMapDeletedEvent): unknown {
    const obj: any = {};
    if (message.data !== undefined) {
      obj.data = CertificateMapEventData.toJSON(message.data);
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<CertificateMapDeletedEvent>, I>>(base?: I): CertificateMapDeletedEvent {
    return CertificateMapDeletedEvent.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<CertificateMapDeletedEvent>, I>>(object: I): CertificateMapDeletedEvent {
    const message = createBaseCertificateMapDeletedEvent();
    message.data = (object.data !== undefined && object.data !== null)
      ? CertificateMapEventData.fromPartial(object.data)
      : undefined;
    return message;
  },
};

function createBaseCertificateMapEntryCreatedEvent(): CertificateMapEntryCreatedEvent {
  return { data: undefined };
}

export const CertificateMapEntryCreatedEvent: MessageFns<CertificateMapEntryCreatedEvent> = {
  encode(message: CertificateMapEntryCreatedEvent, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.data !== undefined) {
      CertificateMapEntryEventData.encode(message.data, writer.uint32(10).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): CertificateMapEntryCreatedEvent {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    const end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseCertificateMapEntryCreatedEvent();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.data = CertificateMapEntryEventData.decode(reader, reader.uint32());
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): CertificateMapEntryCreatedEvent {
    return { data: isSet(object.data) ? CertificateMapEntryEventData.fromJSON(object.data) : undefined };
  },

  toJSON(message: CertificateMapEntryCreatedEvent): unknown {
    const obj: any = {};
    if (message.data !== undefined) {
      obj.data = CertificateMapEntryEventData.toJSON(message.data);
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<CertificateMapEntryCreatedEvent>, I>>(base?: I): CertificateMapEntryCreatedEvent {
    return CertificateMapEntryCreatedEvent.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<CertificateMapEntryCreatedEvent>, I>>(
    object: I,
  ): CertificateMapEntryCreatedEvent {
    const message = createBaseCertificateMapEntryCreatedEvent();
    message.data = (object.data !== undefined && object.data !== null)
      ? CertificateMapEntryEventData.fromPartial(object.data)
      : undefined;
    return message;
  },
};

function createBaseCertificateMapEntryUpdatedEvent(): CertificateMapEntryUpdatedEvent {
  return { data: undefined };
}

export const CertificateMapEntryUpdatedEvent: MessageFns<CertificateMapEntryUpdatedEvent> = {
  encode(message: CertificateMapEntryUpdatedEvent, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.data !== undefined) {
      CertificateMapEntryEventData.encode(message.data, writer.uint32(10).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): CertificateMapEntryUpdatedEvent {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    const end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseCertificateMapEntryUpdatedEvent();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.data = CertificateMapEntryEventData.decode(reader, reader.uint32());
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): CertificateMapEntryUpdatedEvent {
    return { data: isSet(object.data) ? CertificateMapEntryEventData.fromJSON(object.data) : undefined };
  },

  toJSON(message: CertificateMapEntryUpdatedEvent): unknown {
    const obj: any = {};
    if (message.data !== undefined) {
      obj.data = CertificateMapEntryEventData.toJSON(message.data);
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<CertificateMapEntryUpdatedEvent>, I>>(base?: I): CertificateMapEntryUpdatedEvent {
    return CertificateMapEntryUpdatedEvent.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<CertificateMapEntryUpdatedEvent>, I>>(
    object: I,
  ): CertificateMapEntryUpdatedEvent {
    const message = createBaseCertificateMapEntryUpdatedEvent();
    message.data = (object.data !== undefined && object.data !== null)
      ? CertificateMapEntryEventData.fromPartial(object.data)
      : undefined;
    return message;
  },
};

function createBaseCertificateMapEntryDeletedEvent(): CertificateMapEntryDeletedEvent {
  return { data: undefined };
}

export const CertificateMapEntryDeletedEvent: MessageFns<CertificateMapEntryDeletedEvent> = {
  encode(message: CertificateMapEntryDeletedEvent, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.data !== undefined) {
      CertificateMapEntryEventData.encode(message.data, writer.uint32(10).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): CertificateMapEntryDeletedEvent {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    const end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseCertificateMapEntryDeletedEvent();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.data = CertificateMapEntryEventData.decode(reader, reader.uint32());
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): CertificateMapEntryDeletedEvent {
    return { data: isSet(object.data) ? CertificateMapEntryEventData.fromJSON(object.data) : undefined };
  },

  toJSON(message: CertificateMapEntryDeletedEvent): unknown {
    const obj: any = {};
    if (message.data !== undefined) {
      obj.data = CertificateMapEntryEventData.toJSON(message.data);
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<CertificateMapEntryDeletedEvent>, I>>(base?: I): CertificateMapEntryDeletedEvent {
    return CertificateMapEntryDeletedEvent.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<CertificateMapEntryDeletedEvent>, I>>(
    object: I,
  ): CertificateMapEntryDeletedEvent {
    const message = createBaseCertificateMapEntryDeletedEvent();
    message.data = (object.data !== undefined && object.data !== null)
      ? CertificateMapEntryEventData.fromPartial(object.data)
      : undefined;
    return message;
  },
};

function createBaseDnsAuthorizationCreatedEvent(): DnsAuthorizationCreatedEvent {
  return { data: undefined };
}

export const DnsAuthorizationCreatedEvent: MessageFns<DnsAuthorizationCreatedEvent> = {
  encode(message: DnsAuthorizationCreatedEvent, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.data !== undefined) {
      DnsAuthorizationEventData.encode(message.data, writer.uint32(10).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): DnsAuthorizationCreatedEvent {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    const end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseDnsAuthorizationCreatedEvent();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.data = DnsAuthorizationEventData.decode(reader, reader.uint32());
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): DnsAuthorizationCreatedEvent {
    return { data: isSet(object.data) ? DnsAuthorizationEventData.fromJSON(object.data) : undefined };
  },

  toJSON(message: DnsAuthorizationCreatedEvent): unknown {
    const obj: any = {};
    if (message.data !== undefined) {
      obj.data = DnsAuthorizationEventData.toJSON(message.data);
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<DnsAuthorizationCreatedEvent>, I>>(base?: I): DnsAuthorizationCreatedEvent {
    return DnsAuthorizationCreatedEvent.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<DnsAuthorizationCreatedEvent>, I>>(object: I): DnsAuthorizationCreatedEvent {
    const message = createBaseDnsAuthorizationCreatedEvent();
    message.data = (object.data !== undefined && object.data !== null)
      ? DnsAuthorizationEventData.fromPartial(object.data)
      : undefined;
    return message;
  },
};

function createBaseDnsAuthorizationUpdatedEvent(): DnsAuthorizationUpdatedEvent {
  return { data: undefined };
}

export const DnsAuthorizationUpdatedEvent: MessageFns<DnsAuthorizationUpdatedEvent> = {
  encode(message: DnsAuthorizationUpdatedEvent, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.data !== undefined) {
      DnsAuthorizationEventData.encode(message.data, writer.uint32(10).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): DnsAuthorizationUpdatedEvent {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    const end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseDnsAuthorizationUpdatedEvent();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.data = DnsAuthorizationEventData.decode(reader, reader.uint32());
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): DnsAuthorizationUpdatedEvent {
    return { data: isSet(object.data) ? DnsAuthorizationEventData.fromJSON(object.data) : undefined };
  },

  toJSON(message: DnsAuthorizationUpdatedEvent): unknown {
    const obj: any = {};
    if (message.data !== undefined) {
      obj.data = DnsAuthorizationEventData.toJSON(message.data);
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<DnsAuthorizationUpdatedEvent>, I>>(base?: I): DnsAuthorizationUpdatedEvent {
    return DnsAuthorizationUpdatedEvent.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<DnsAuthorizationUpdatedEvent>, I>>(object: I): DnsAuthorizationUpdatedEvent {
    const message = createBaseDnsAuthorizationUpdatedEvent();
    message.data = (object.data !== undefined && object.data !== null)
      ? DnsAuthorizationEventData.fromPartial(object.data)
      : undefined;
    return message;
  },
};

function createBaseDnsAuthorizationDeletedEvent(): DnsAuthorizationDeletedEvent {
  return { data: undefined };
}

export const DnsAuthorizationDeletedEvent: MessageFns<DnsAuthorizationDeletedEvent> = {
  encode(message: DnsAuthorizationDeletedEvent, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.data !== undefined) {
      DnsAuthorizationEventData.encode(message.data, writer.uint32(10).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): DnsAuthorizationDeletedEvent {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    const end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseDnsAuthorizationDeletedEvent();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.data = DnsAuthorizationEventData.decode(reader, reader.uint32());
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): DnsAuthorizationDeletedEvent {
    return { data: isSet(object.data) ? DnsAuthorizationEventData.fromJSON(object.data) : undefined };
  },

  toJSON(message: DnsAuthorizationDeletedEvent): unknown {
    const obj: any = {};
    if (message.data !== undefined) {
      obj.data = DnsAuthorizationEventData.toJSON(message.data);
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<DnsAuthorizationDeletedEvent>, I>>(base?: I): DnsAuthorizationDeletedEvent {
    return DnsAuthorizationDeletedEvent.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<DnsAuthorizationDeletedEvent>, I>>(object: I): DnsAuthorizationDeletedEvent {
    const message = createBaseDnsAuthorizationDeletedEvent();
    message.data = (object.data !== undefined && object.data !== null)
      ? DnsAuthorizationEventData.fromPartial(object.data)
      : undefined;
    return message;
  },
};

function createBaseCertificateIssuanceConfigCreatedEvent(): CertificateIssuanceConfigCreatedEvent {
  return { data: undefined };
}

export const CertificateIssuanceConfigCreatedEvent: MessageFns<CertificateIssuanceConfigCreatedEvent> = {
  encode(message: CertificateIssuanceConfigCreatedEvent, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.data !== undefined) {
      CertificateIssuanceConfigEventData.encode(message.data, writer.uint32(10).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): CertificateIssuanceConfigCreatedEvent {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    const end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseCertificateIssuanceConfigCreatedEvent();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.data = CertificateIssuanceConfigEventData.decode(reader, reader.uint32());
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): CertificateIssuanceConfigCreatedEvent {
    return { data: isSet(object.data) ? CertificateIssuanceConfigEventData.fromJSON(object.data) : undefined };
  },

  toJSON(message: CertificateIssuanceConfigCreatedEvent): unknown {
    const obj: any = {};
    if (message.data !== undefined) {
      obj.data = CertificateIssuanceConfigEventData.toJSON(message.data);
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<CertificateIssuanceConfigCreatedEvent>, I>>(
    base?: I,
  ): CertificateIssuanceConfigCreatedEvent {
    return CertificateIssuanceConfigCreatedEvent.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<CertificateIssuanceConfigCreatedEvent>, I>>(
    object: I,
  ): CertificateIssuanceConfigCreatedEvent {
    const message = createBaseCertificateIssuanceConfigCreatedEvent();
    message.data = (object.data !== undefined && object.data !== null)
      ? CertificateIssuanceConfigEventData.fromPartial(object.data)
      : undefined;
    return message;
  },
};

function createBaseCertificateIssuanceConfigDeletedEvent(): CertificateIssuanceConfigDeletedEvent {
  return { data: undefined };
}

export const CertificateIssuanceConfigDeletedEvent: MessageFns<CertificateIssuanceConfigDeletedEvent> = {
  encode(message: CertificateIssuanceConfigDeletedEvent, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.data !== undefined) {
      CertificateIssuanceConfigEventData.encode(message.data, writer.uint32(10).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): CertificateIssuanceConfigDeletedEvent {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    const end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseCertificateIssuanceConfigDeletedEvent();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.data = CertificateIssuanceConfigEventData.decode(reader, reader.uint32());
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): CertificateIssuanceConfigDeletedEvent {
    return { data: isSet(object.data) ? CertificateIssuanceConfigEventData.fromJSON(object.data) : undefined };
  },

  toJSON(message: CertificateIssuanceConfigDeletedEvent): unknown {
    const obj: any = {};
    if (message.data !== undefined) {
      obj.data = CertificateIssuanceConfigEventData.toJSON(message.data);
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<CertificateIssuanceConfigDeletedEvent>, I>>(
    base?: I,
  ): CertificateIssuanceConfigDeletedEvent {
    return CertificateIssuanceConfigDeletedEvent.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<CertificateIssuanceConfigDeletedEvent>, I>>(
    object: I,
  ): CertificateIssuanceConfigDeletedEvent {
    const message = createBaseCertificateIssuanceConfigDeletedEvent();
    message.data = (object.data !== undefined && object.data !== null)
      ? CertificateIssuanceConfigEventData.fromPartial(object.data)
      : undefined;
    return message;
  },
};

type Builtin = Date | Function | Uint8Array | string | number | boolean | undefined;

export type DeepPartial<T> = T extends Builtin ? T
  : T extends Long ? string | number | Long : T extends globalThis.Array<infer U> ? globalThis.Array<DeepPartial<U>>
  : T extends ReadonlyArray<infer U> ? ReadonlyArray<DeepPartial<U>>
  : T extends {} ? { [K in keyof T]?: DeepPartial<T[K]> }
  : Partial<T>;

type KeysOfUnion<T> = T extends T ? keyof T : never;
export type Exact<P, I extends P> = P extends Builtin ? P
  : P & { [K in keyof P]: Exact<P[K], I[K]> } & { [K in Exclude<keyof I, KeysOfUnion<P>>]: never };

function isSet(value: any): boolean {
  return value !== null && value !== undefined;
}

export interface MessageFns<T> {
  encode(message: T, writer?: BinaryWriter): BinaryWriter;
  decode(input: BinaryReader | Uint8Array, length?: number): T;
  fromJSON(object: any): T;
  toJSON(message: T): unknown;
  create<I extends Exact<DeepPartial<T>, I>>(base?: I): T;
  fromPartial<I extends Exact<DeepPartial<T>, I>>(object: I): T;
}
