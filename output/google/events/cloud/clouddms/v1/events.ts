// Code generated by protoc-gen-ts_proto. DO NOT EDIT.
// versions:
//   protoc-gen-ts_proto  v2.7.7
//   protoc               v6.32.0
// source: google/events/cloud/clouddms/v1/events.proto

/* eslint-disable */
import { BinaryReader, BinaryWriter } from "@bufbuild/protobuf/wire";
import Long from "long";
import { ConnectionProfileEventData, MigrationJobEventData } from "./data";

export const protobufPackage = "google.events.cloud.clouddms.v1";

/** The CloudEvent raised when a MigrationJob is created. */
export interface MigrationJobCreatedEvent {
  /** The data associated with the event. */
  data?: MigrationJobEventData | undefined;
}

/** The CloudEvent raised when a MigrationJob is updated. */
export interface MigrationJobUpdatedEvent {
  /** The data associated with the event. */
  data?: MigrationJobEventData | undefined;
}

/** The CloudEvent raised when a MigrationJob is deleted. */
export interface MigrationJobDeletedEvent {
  /** The data associated with the event. */
  data?: MigrationJobEventData | undefined;
}

/** The CloudEvent raised when a ConnectionProfile is created. */
export interface ConnectionProfileCreatedEvent {
  /** The data associated with the event. */
  data?: ConnectionProfileEventData | undefined;
}

/** The CloudEvent raised when a ConnectionProfile is updated. */
export interface ConnectionProfileUpdatedEvent {
  /** The data associated with the event. */
  data?: ConnectionProfileEventData | undefined;
}

/** The CloudEvent raised when a ConnectionProfile is deleted. */
export interface ConnectionProfileDeletedEvent {
  /** The data associated with the event. */
  data?: ConnectionProfileEventData | undefined;
}

function createBaseMigrationJobCreatedEvent(): MigrationJobCreatedEvent {
  return { data: undefined };
}

export const MigrationJobCreatedEvent: MessageFns<MigrationJobCreatedEvent> = {
  encode(message: MigrationJobCreatedEvent, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.data !== undefined) {
      MigrationJobEventData.encode(message.data, writer.uint32(10).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): MigrationJobCreatedEvent {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    const end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseMigrationJobCreatedEvent();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.data = MigrationJobEventData.decode(reader, reader.uint32());
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): MigrationJobCreatedEvent {
    return { data: isSet(object.data) ? MigrationJobEventData.fromJSON(object.data) : undefined };
  },

  toJSON(message: MigrationJobCreatedEvent): unknown {
    const obj: any = {};
    if (message.data !== undefined) {
      obj.data = MigrationJobEventData.toJSON(message.data);
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<MigrationJobCreatedEvent>, I>>(base?: I): MigrationJobCreatedEvent {
    return MigrationJobCreatedEvent.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<MigrationJobCreatedEvent>, I>>(object: I): MigrationJobCreatedEvent {
    const message = createBaseMigrationJobCreatedEvent();
    message.data = (object.data !== undefined && object.data !== null)
      ? MigrationJobEventData.fromPartial(object.data)
      : undefined;
    return message;
  },
};

function createBaseMigrationJobUpdatedEvent(): MigrationJobUpdatedEvent {
  return { data: undefined };
}

export const MigrationJobUpdatedEvent: MessageFns<MigrationJobUpdatedEvent> = {
  encode(message: MigrationJobUpdatedEvent, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.data !== undefined) {
      MigrationJobEventData.encode(message.data, writer.uint32(10).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): MigrationJobUpdatedEvent {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    const end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseMigrationJobUpdatedEvent();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.data = MigrationJobEventData.decode(reader, reader.uint32());
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): MigrationJobUpdatedEvent {
    return { data: isSet(object.data) ? MigrationJobEventData.fromJSON(object.data) : undefined };
  },

  toJSON(message: MigrationJobUpdatedEvent): unknown {
    const obj: any = {};
    if (message.data !== undefined) {
      obj.data = MigrationJobEventData.toJSON(message.data);
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<MigrationJobUpdatedEvent>, I>>(base?: I): MigrationJobUpdatedEvent {
    return MigrationJobUpdatedEvent.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<MigrationJobUpdatedEvent>, I>>(object: I): MigrationJobUpdatedEvent {
    const message = createBaseMigrationJobUpdatedEvent();
    message.data = (object.data !== undefined && object.data !== null)
      ? MigrationJobEventData.fromPartial(object.data)
      : undefined;
    return message;
  },
};

function createBaseMigrationJobDeletedEvent(): MigrationJobDeletedEvent {
  return { data: undefined };
}

export const MigrationJobDeletedEvent: MessageFns<MigrationJobDeletedEvent> = {
  encode(message: MigrationJobDeletedEvent, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.data !== undefined) {
      MigrationJobEventData.encode(message.data, writer.uint32(10).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): MigrationJobDeletedEvent {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    const end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseMigrationJobDeletedEvent();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.data = MigrationJobEventData.decode(reader, reader.uint32());
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): MigrationJobDeletedEvent {
    return { data: isSet(object.data) ? MigrationJobEventData.fromJSON(object.data) : undefined };
  },

  toJSON(message: MigrationJobDeletedEvent): unknown {
    const obj: any = {};
    if (message.data !== undefined) {
      obj.data = MigrationJobEventData.toJSON(message.data);
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<MigrationJobDeletedEvent>, I>>(base?: I): MigrationJobDeletedEvent {
    return MigrationJobDeletedEvent.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<MigrationJobDeletedEvent>, I>>(object: I): MigrationJobDeletedEvent {
    const message = createBaseMigrationJobDeletedEvent();
    message.data = (object.data !== undefined && object.data !== null)
      ? MigrationJobEventData.fromPartial(object.data)
      : undefined;
    return message;
  },
};

function createBaseConnectionProfileCreatedEvent(): ConnectionProfileCreatedEvent {
  return { data: undefined };
}

export const ConnectionProfileCreatedEvent: MessageFns<ConnectionProfileCreatedEvent> = {
  encode(message: ConnectionProfileCreatedEvent, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.data !== undefined) {
      ConnectionProfileEventData.encode(message.data, writer.uint32(10).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): ConnectionProfileCreatedEvent {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    const end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseConnectionProfileCreatedEvent();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.data = ConnectionProfileEventData.decode(reader, reader.uint32());
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): ConnectionProfileCreatedEvent {
    return { data: isSet(object.data) ? ConnectionProfileEventData.fromJSON(object.data) : undefined };
  },

  toJSON(message: ConnectionProfileCreatedEvent): unknown {
    const obj: any = {};
    if (message.data !== undefined) {
      obj.data = ConnectionProfileEventData.toJSON(message.data);
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<ConnectionProfileCreatedEvent>, I>>(base?: I): ConnectionProfileCreatedEvent {
    return ConnectionProfileCreatedEvent.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<ConnectionProfileCreatedEvent>, I>>(
    object: I,
  ): ConnectionProfileCreatedEvent {
    const message = createBaseConnectionProfileCreatedEvent();
    message.data = (object.data !== undefined && object.data !== null)
      ? ConnectionProfileEventData.fromPartial(object.data)
      : undefined;
    return message;
  },
};

function createBaseConnectionProfileUpdatedEvent(): ConnectionProfileUpdatedEvent {
  return { data: undefined };
}

export const ConnectionProfileUpdatedEvent: MessageFns<ConnectionProfileUpdatedEvent> = {
  encode(message: ConnectionProfileUpdatedEvent, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.data !== undefined) {
      ConnectionProfileEventData.encode(message.data, writer.uint32(10).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): ConnectionProfileUpdatedEvent {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    const end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseConnectionProfileUpdatedEvent();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.data = ConnectionProfileEventData.decode(reader, reader.uint32());
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): ConnectionProfileUpdatedEvent {
    return { data: isSet(object.data) ? ConnectionProfileEventData.fromJSON(object.data) : undefined };
  },

  toJSON(message: ConnectionProfileUpdatedEvent): unknown {
    const obj: any = {};
    if (message.data !== undefined) {
      obj.data = ConnectionProfileEventData.toJSON(message.data);
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<ConnectionProfileUpdatedEvent>, I>>(base?: I): ConnectionProfileUpdatedEvent {
    return ConnectionProfileUpdatedEvent.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<ConnectionProfileUpdatedEvent>, I>>(
    object: I,
  ): ConnectionProfileUpdatedEvent {
    const message = createBaseConnectionProfileUpdatedEvent();
    message.data = (object.data !== undefined && object.data !== null)
      ? ConnectionProfileEventData.fromPartial(object.data)
      : undefined;
    return message;
  },
};

function createBaseConnectionProfileDeletedEvent(): ConnectionProfileDeletedEvent {
  return { data: undefined };
}

export const ConnectionProfileDeletedEvent: MessageFns<ConnectionProfileDeletedEvent> = {
  encode(message: ConnectionProfileDeletedEvent, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.data !== undefined) {
      ConnectionProfileEventData.encode(message.data, writer.uint32(10).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): ConnectionProfileDeletedEvent {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    const end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseConnectionProfileDeletedEvent();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.data = ConnectionProfileEventData.decode(reader, reader.uint32());
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): ConnectionProfileDeletedEvent {
    return { data: isSet(object.data) ? ConnectionProfileEventData.fromJSON(object.data) : undefined };
  },

  toJSON(message: ConnectionProfileDeletedEvent): unknown {
    const obj: any = {};
    if (message.data !== undefined) {
      obj.data = ConnectionProfileEventData.toJSON(message.data);
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<ConnectionProfileDeletedEvent>, I>>(base?: I): ConnectionProfileDeletedEvent {
    return ConnectionProfileDeletedEvent.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<ConnectionProfileDeletedEvent>, I>>(
    object: I,
  ): ConnectionProfileDeletedEvent {
    const message = createBaseConnectionProfileDeletedEvent();
    message.data = (object.data !== undefined && object.data !== null)
      ? ConnectionProfileEventData.fromPartial(object.data)
      : undefined;
    return message;
  },
};

type Builtin = Date | Function | Uint8Array | string | number | boolean | undefined;

export type DeepPartial<T> = T extends Builtin ? T
  : T extends Long ? string | number | Long : T extends globalThis.Array<infer U> ? globalThis.Array<DeepPartial<U>>
  : T extends ReadonlyArray<infer U> ? ReadonlyArray<DeepPartial<U>>
  : T extends {} ? { [K in keyof T]?: DeepPartial<T[K]> }
  : Partial<T>;

type KeysOfUnion<T> = T extends T ? keyof T : never;
export type Exact<P, I extends P> = P extends Builtin ? P
  : P & { [K in keyof P]: Exact<P[K], I[K]> } & { [K in Exclude<keyof I, KeysOfUnion<P>>]: never };

function isSet(value: any): boolean {
  return value !== null && value !== undefined;
}

export interface MessageFns<T> {
  encode(message: T, writer?: BinaryWriter): BinaryWriter;
  decode(input: BinaryReader | Uint8Array, length?: number): T;
  fromJSON(object: any): T;
  toJSON(message: T): unknown;
  create<I extends Exact<DeepPartial<T>, I>>(base?: I): T;
  fromPartial<I extends Exact<DeepPartial<T>, I>>(object: I): T;
}
