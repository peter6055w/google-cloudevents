// Code generated by protoc-gen-ts_proto. DO NOT EDIT.
// versions:
//   protoc-gen-ts_proto  v2.7.7
//   protoc               v6.32.0
// source: google/events/cloud/datafusion/v1/data.proto

/* eslint-disable */
import { BinaryReader, BinaryWriter } from "@bufbuild/protobuf/wire";
import Long from "long";
import { Timestamp } from "../../../../protobuf/timestamp";

export const protobufPackage = "google.events.cloud.datafusion.v1";

/**
 * Network configuration for a Data Fusion instance. These configurations
 * are used for peering with the customer network. Configurations are optional
 * when a public Data Fusion instance is to be created. However, providing
 * these configurations allows several benefits, such as reduced network latency
 * while accessing the customer resources from managed Data Fusion instance
 * nodes, as well as access to the customer on-prem resources.
 */
export interface NetworkConfig {
  /**
   * Name of the network in the customer project with which the Tenant Project
   * will be peered for executing pipelines. In case of shared VPC where the
   * network resides in another host project the network should specified in
   * the form of projects/{host-project-id}/global/networks/{network}
   */
  network: string;
  /**
   * The IP range in CIDR notation to use for the managed Data Fusion instance
   * nodes. This range must not overlap with any other ranges used in the
   * customer network.
   */
  ipAllocation: string;
}

/**
 * The Data Fusion version. This proto message stores information about certain
 * Data Fusion version, which is used for Data Fusion version upgrade.
 */
export interface Version {
  /** The version number of the Data Fusion instance, such as '6.0.1.0'. */
  versionNumber: string;
  /** Whether this is currently the default version for Cloud Data Fusion */
  defaultVersion: boolean;
  /** Represents a list of available feature names for a given version. */
  availableFeatures: string[];
  /** Type represents the release availability of the version */
  type: Version_Type;
}

/** Each type represents the release availability of a CDF version */
export enum Version_Type {
  /** TYPE_UNSPECIFIED - Version does not have availability yet */
  TYPE_UNSPECIFIED = 0,
  /** TYPE_PREVIEW - Version is under development and not considered stable */
  TYPE_PREVIEW = 1,
  /** TYPE_GENERAL_AVAILABILITY - Version is available for public use */
  TYPE_GENERAL_AVAILABILITY = 2,
  UNRECOGNIZED = -1,
}

export function version_TypeFromJSON(object: any): Version_Type {
  switch (object) {
    case 0:
    case "TYPE_UNSPECIFIED":
      return Version_Type.TYPE_UNSPECIFIED;
    case 1:
    case "TYPE_PREVIEW":
      return Version_Type.TYPE_PREVIEW;
    case 2:
    case "TYPE_GENERAL_AVAILABILITY":
      return Version_Type.TYPE_GENERAL_AVAILABILITY;
    case -1:
    case "UNRECOGNIZED":
    default:
      return Version_Type.UNRECOGNIZED;
  }
}

export function version_TypeToJSON(object: Version_Type): string {
  switch (object) {
    case Version_Type.TYPE_UNSPECIFIED:
      return "TYPE_UNSPECIFIED";
    case Version_Type.TYPE_PREVIEW:
      return "TYPE_PREVIEW";
    case Version_Type.TYPE_GENERAL_AVAILABILITY:
      return "TYPE_GENERAL_AVAILABILITY";
    case Version_Type.UNRECOGNIZED:
    default:
      return "UNRECOGNIZED";
  }
}

/** Identifies Data Fusion accelerators for an instance. */
export interface Accelerator {
  /** The type of an accelator for a CDF instance. */
  acceleratorType: Accelerator_AcceleratorType;
  /** The state of the accelerator. */
  state: Accelerator_State;
}

/**
 * Each type represents an Accelerator (Add-On) supported by Cloud Data Fusion
 * service.
 */
export enum Accelerator_AcceleratorType {
  /** ACCELERATOR_TYPE_UNSPECIFIED - Default value, if unspecified. */
  ACCELERATOR_TYPE_UNSPECIFIED = 0,
  /** CDC - Change Data Capture accelerator for CDF. */
  CDC = 1,
  /**
   * HEALTHCARE - Cloud Healthcare accelerator for CDF. This accelerator is to enable Cloud
   * Healthcare specific CDF plugins developed by Healthcare team.
   */
  HEALTHCARE = 2,
  /**
   * CCAI_INSIGHTS - Contact Center AI Insights
   * This accelerator is used to enable import and export pipelines
   * custom built to streamline CCAI Insights processing.
   */
  CCAI_INSIGHTS = 3,
  UNRECOGNIZED = -1,
}

export function accelerator_AcceleratorTypeFromJSON(object: any): Accelerator_AcceleratorType {
  switch (object) {
    case 0:
    case "ACCELERATOR_TYPE_UNSPECIFIED":
      return Accelerator_AcceleratorType.ACCELERATOR_TYPE_UNSPECIFIED;
    case 1:
    case "CDC":
      return Accelerator_AcceleratorType.CDC;
    case 2:
    case "HEALTHCARE":
      return Accelerator_AcceleratorType.HEALTHCARE;
    case 3:
    case "CCAI_INSIGHTS":
      return Accelerator_AcceleratorType.CCAI_INSIGHTS;
    case -1:
    case "UNRECOGNIZED":
    default:
      return Accelerator_AcceleratorType.UNRECOGNIZED;
  }
}

export function accelerator_AcceleratorTypeToJSON(object: Accelerator_AcceleratorType): string {
  switch (object) {
    case Accelerator_AcceleratorType.ACCELERATOR_TYPE_UNSPECIFIED:
      return "ACCELERATOR_TYPE_UNSPECIFIED";
    case Accelerator_AcceleratorType.CDC:
      return "CDC";
    case Accelerator_AcceleratorType.HEALTHCARE:
      return "HEALTHCARE";
    case Accelerator_AcceleratorType.CCAI_INSIGHTS:
      return "CCAI_INSIGHTS";
    case Accelerator_AcceleratorType.UNRECOGNIZED:
    default:
      return "UNRECOGNIZED";
  }
}

/** Different values possible for the state of an accelerator. */
export enum Accelerator_State {
  /** STATE_UNSPECIFIED - Default value, do not use. */
  STATE_UNSPECIFIED = 0,
  /** ENABLED - Indicates that the accelerator is enabled and available to use. */
  ENABLED = 1,
  /** DISABLED - Indicates that the accelerator is disabled and not available to use. */
  DISABLED = 2,
  /**
   * UNKNOWN - Indicates that accelerator state is currently unknown.
   * Requests for enable, disable could be retried while in this state.
   */
  UNKNOWN = 3,
  UNRECOGNIZED = -1,
}

export function accelerator_StateFromJSON(object: any): Accelerator_State {
  switch (object) {
    case 0:
    case "STATE_UNSPECIFIED":
      return Accelerator_State.STATE_UNSPECIFIED;
    case 1:
    case "ENABLED":
      return Accelerator_State.ENABLED;
    case 2:
    case "DISABLED":
      return Accelerator_State.DISABLED;
    case 3:
    case "UNKNOWN":
      return Accelerator_State.UNKNOWN;
    case -1:
    case "UNRECOGNIZED":
    default:
      return Accelerator_State.UNRECOGNIZED;
  }
}

export function accelerator_StateToJSON(object: Accelerator_State): string {
  switch (object) {
    case Accelerator_State.STATE_UNSPECIFIED:
      return "STATE_UNSPECIFIED";
    case Accelerator_State.ENABLED:
      return "ENABLED";
    case Accelerator_State.DISABLED:
      return "DISABLED";
    case Accelerator_State.UNKNOWN:
      return "UNKNOWN";
    case Accelerator_State.UNRECOGNIZED:
    default:
      return "UNRECOGNIZED";
  }
}

/**
 * The crypto key configuration. This field is used by the Customer-managed
 * encryption keys (CMEK) feature.
 */
export interface CryptoKeyConfig {
  /**
   * The name of the key which is used to encrypt/decrypt customer data. For key
   * in Cloud KMS, the key should be in the format of
   * `projects/* /locations/* /keyRings/* /cryptoKeys/*`.
   */
  keyReference: string;
}

/** Represents a Data Fusion instance. */
export interface Instance {
  /**
   * Output only. The name of this instance is in the form of
   * projects/{project}/locations/{location}/instances/{instance}.
   */
  name: string;
  /** A description of this instance. */
  description: string;
  /** Required. Instance type. */
  type: Instance_Type;
  /** Option to enable Stackdriver Logging. */
  enableStackdriverLogging: boolean;
  /** Option to enable Stackdriver Monitoring. */
  enableStackdriverMonitoring: boolean;
  /**
   * Specifies whether the Data Fusion instance should be private. If set to
   * true, all Data Fusion nodes will have private IP addresses and will not be
   * able to access the public internet.
   */
  privateInstance: boolean;
  /**
   * Network configuration options. These are required when a private Data
   * Fusion instance is to be created.
   */
  networkConfig?:
    | NetworkConfig
    | undefined;
  /**
   * The resource labels for instance to use to annotate any related underlying
   * resources such as Compute Engine VMs. The character '=' is not allowed to
   * be used within the labels.
   */
  labels: { [key: string]: string };
  /**
   * Map of additional options used to configure the behavior of
   * Data Fusion instance.
   */
  options: { [key: string]: string };
  /** Output only. The time the instance was created. */
  createTime?:
    | Date
    | undefined;
  /** Output only. The time the instance was last updated. */
  updateTime?:
    | Date
    | undefined;
  /** Output only. The current state of this Data Fusion instance. */
  state: Instance_State;
  /**
   * Output only. Additional information about the current state of this Data
   * Fusion instance if available.
   */
  stateMessage: string;
  /** Output only. Endpoint on which the Data Fusion UI is accessible. */
  serviceEndpoint: string;
  /**
   * Name of the zone in which the Data Fusion instance will be created. Only
   * DEVELOPER instances use this field.
   */
  zone: string;
  /** Current version of the Data Fusion. Only specifiable in Update. */
  version: string;
  /**
   * Output only. Deprecated. Use tenant_project_id instead to extract the
   * tenant project ID.
   */
  serviceAccount: string;
  /** Display name for an instance. */
  displayName: string;
  /**
   * Available versions that the instance can be upgraded to using
   * UpdateInstanceRequest.
   */
  availableVersion: Version[];
  /** Output only. Endpoint on which the REST APIs is accessible. */
  apiEndpoint: string;
  /**
   * Output only. Cloud Storage bucket generated by Data Fusion in the customer
   * project.
   */
  gcsBucket: string;
  /** List of accelerators enabled for this CDF instance. */
  accelerators: Accelerator[];
  /** Output only. P4 service account for the customer project. */
  p4ServiceAccount: string;
  /** Output only. The name of the tenant project. */
  tenantProjectId: string;
  /**
   * User-managed service account to set on Dataproc when Cloud Data Fusion
   * creates Dataproc to run data processing pipelines.
   *
   * This allows users to have fine-grained access control on Dataproc's
   * accesses to cloud resources.
   */
  dataprocServiceAccount: string;
  /** Option to enable granular role-based access control. */
  enableRbac: boolean;
  /**
   * The crypto key configuration. This field is used by the Customer-Managed
   * Encryption Keys (CMEK) feature.
   */
  cryptoKeyConfig?:
    | CryptoKeyConfig
    | undefined;
  /**
   * Output only. If the instance state is DISABLED, the reason for disabling
   * the instance.
   */
  disabledReason: Instance_DisabledReason[];
  /** Option to enable and pass metadata for event publishing. */
  eventPublishConfig?:
    | EventPublishConfig
    | undefined;
  /** Option to enable granular zone separation. */
  enableZoneSeparation: boolean;
}

/**
 * Represents the type of Data Fusion instance. Each type is configured with
 * the default settings for processing and memory.
 */
export enum Instance_Type {
  /** TYPE_UNSPECIFIED - No type specified. The instance creation will fail. */
  TYPE_UNSPECIFIED = 0,
  /**
   * BASIC - Basic Data Fusion instance. In Basic type, the user will be able to
   * create data pipelines using point and click UI. However, there are
   * certain limitations, such as fewer number of concurrent pipelines, no
   * support for streaming pipelines, etc.
   */
  BASIC = 1,
  /**
   * ENTERPRISE - Enterprise Data Fusion instance. In Enterprise type, the user will have
   * all features available, such as support for streaming pipelines, higher
   * number of concurrent pipelines, etc.
   */
  ENTERPRISE = 2,
  /**
   * DEVELOPER - Developer Data Fusion instance. In Developer type, the user will have all
   * features available but with restrictive capabilities. This is to help
   * enterprises design and develop their data ingestion and integration
   * pipelines at low cost.
   */
  DEVELOPER = 3,
  UNRECOGNIZED = -1,
}

export function instance_TypeFromJSON(object: any): Instance_Type {
  switch (object) {
    case 0:
    case "TYPE_UNSPECIFIED":
      return Instance_Type.TYPE_UNSPECIFIED;
    case 1:
    case "BASIC":
      return Instance_Type.BASIC;
    case 2:
    case "ENTERPRISE":
      return Instance_Type.ENTERPRISE;
    case 3:
    case "DEVELOPER":
      return Instance_Type.DEVELOPER;
    case -1:
    case "UNRECOGNIZED":
    default:
      return Instance_Type.UNRECOGNIZED;
  }
}

export function instance_TypeToJSON(object: Instance_Type): string {
  switch (object) {
    case Instance_Type.TYPE_UNSPECIFIED:
      return "TYPE_UNSPECIFIED";
    case Instance_Type.BASIC:
      return "BASIC";
    case Instance_Type.ENTERPRISE:
      return "ENTERPRISE";
    case Instance_Type.DEVELOPER:
      return "DEVELOPER";
    case Instance_Type.UNRECOGNIZED:
    default:
      return "UNRECOGNIZED";
  }
}

/** Represents the state of a Data Fusion instance */
export enum Instance_State {
  /** STATE_UNSPECIFIED - Instance does not have a state yet */
  STATE_UNSPECIFIED = 0,
  /** CREATING - Instance is being created */
  CREATING = 1,
  /**
   * ACTIVE - Instance is active and ready for requests. This corresponds to 'RUNNING'
   * in datafusion.v1beta1.
   */
  ACTIVE = 2,
  /** FAILED - Instance creation failed */
  FAILED = 3,
  /** DELETING - Instance is being deleted */
  DELETING = 4,
  /** UPGRADING - Instance is being upgraded */
  UPGRADING = 5,
  /** RESTARTING - Instance is being restarted */
  RESTARTING = 6,
  /** UPDATING - Instance is being updated on customer request */
  UPDATING = 7,
  /** AUTO_UPDATING - Instance is being auto-updated */
  AUTO_UPDATING = 8,
  /** AUTO_UPGRADING - Instance is being auto-upgraded */
  AUTO_UPGRADING = 9,
  /** DISABLED - Instance is disabled */
  DISABLED = 10,
  UNRECOGNIZED = -1,
}

export function instance_StateFromJSON(object: any): Instance_State {
  switch (object) {
    case 0:
    case "STATE_UNSPECIFIED":
      return Instance_State.STATE_UNSPECIFIED;
    case 1:
    case "CREATING":
      return Instance_State.CREATING;
    case 2:
    case "ACTIVE":
      return Instance_State.ACTIVE;
    case 3:
    case "FAILED":
      return Instance_State.FAILED;
    case 4:
    case "DELETING":
      return Instance_State.DELETING;
    case 5:
    case "UPGRADING":
      return Instance_State.UPGRADING;
    case 6:
    case "RESTARTING":
      return Instance_State.RESTARTING;
    case 7:
    case "UPDATING":
      return Instance_State.UPDATING;
    case 8:
    case "AUTO_UPDATING":
      return Instance_State.AUTO_UPDATING;
    case 9:
    case "AUTO_UPGRADING":
      return Instance_State.AUTO_UPGRADING;
    case 10:
    case "DISABLED":
      return Instance_State.DISABLED;
    case -1:
    case "UNRECOGNIZED":
    default:
      return Instance_State.UNRECOGNIZED;
  }
}

export function instance_StateToJSON(object: Instance_State): string {
  switch (object) {
    case Instance_State.STATE_UNSPECIFIED:
      return "STATE_UNSPECIFIED";
    case Instance_State.CREATING:
      return "CREATING";
    case Instance_State.ACTIVE:
      return "ACTIVE";
    case Instance_State.FAILED:
      return "FAILED";
    case Instance_State.DELETING:
      return "DELETING";
    case Instance_State.UPGRADING:
      return "UPGRADING";
    case Instance_State.RESTARTING:
      return "RESTARTING";
    case Instance_State.UPDATING:
      return "UPDATING";
    case Instance_State.AUTO_UPDATING:
      return "AUTO_UPDATING";
    case Instance_State.AUTO_UPGRADING:
      return "AUTO_UPGRADING";
    case Instance_State.DISABLED:
      return "DISABLED";
    case Instance_State.UNRECOGNIZED:
    default:
      return "UNRECOGNIZED";
  }
}

/** The reason for disabling the instance if the state is DISABLED. */
export enum Instance_DisabledReason {
  /** DISABLED_REASON_UNSPECIFIED - This is an unknown reason for disabling. */
  DISABLED_REASON_UNSPECIFIED = 0,
  /** KMS_KEY_ISSUE - The KMS key used by the instance is either revoked or denied access to */
  KMS_KEY_ISSUE = 1,
  UNRECOGNIZED = -1,
}

export function instance_DisabledReasonFromJSON(object: any): Instance_DisabledReason {
  switch (object) {
    case 0:
    case "DISABLED_REASON_UNSPECIFIED":
      return Instance_DisabledReason.DISABLED_REASON_UNSPECIFIED;
    case 1:
    case "KMS_KEY_ISSUE":
      return Instance_DisabledReason.KMS_KEY_ISSUE;
    case -1:
    case "UNRECOGNIZED":
    default:
      return Instance_DisabledReason.UNRECOGNIZED;
  }
}

export function instance_DisabledReasonToJSON(object: Instance_DisabledReason): string {
  switch (object) {
    case Instance_DisabledReason.DISABLED_REASON_UNSPECIFIED:
      return "DISABLED_REASON_UNSPECIFIED";
    case Instance_DisabledReason.KMS_KEY_ISSUE:
      return "KMS_KEY_ISSUE";
    case Instance_DisabledReason.UNRECOGNIZED:
    default:
      return "UNRECOGNIZED";
  }
}

export interface Instance_LabelsEntry {
  key: string;
  value: string;
}

export interface Instance_OptionsEntry {
  key: string;
  value: string;
}

/** Confirguration of PubSubEventWriter. */
export interface EventPublishConfig {
  /** Required. Option to enable Event Publishing. */
  enabled: boolean;
  /**
   * Required. The resource name of the Pub/Sub topic.
   * Format: projects/{project_id}/topics/{topic_id}
   */
  topic: string;
}

/**
 * DNS peering configuration. These configurations are used to create
 * DNS peering with the customer Cloud DNS.
 */
export interface DnsPeering {
  /**
   * Required. The resource name of the dns peering zone.
   * Format:
   * projects/{project}/locations/{location}/instances/{instance}/dnsPeerings/{dns_peering}
   */
  name: string;
  /** Required. The dns name suffix of the zone. */
  domain: string;
  /** Optional. Optional description of the dns zone. */
  description: string;
  /** Optional. Optional target project to which dns peering should happen. */
  targetProject: string;
  /** Optional. Optional target network to which dns peering should happen. */
  targetNetwork: string;
}

/** The data within all Instance events. */
export interface InstanceEventData {
  /** Optional. The Instance event payload. Unset for deletion events. */
  payload?: Instance | undefined;
}

/** The data within all DnsPeering events. */
export interface DnsPeeringEventData {
  /** Optional. The DnsPeering event payload. Unset for deletion events. */
  payload?: DnsPeering | undefined;
}

function createBaseNetworkConfig(): NetworkConfig {
  return { network: "", ipAllocation: "" };
}

export const NetworkConfig: MessageFns<NetworkConfig> = {
  encode(message: NetworkConfig, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.network !== "") {
      writer.uint32(10).string(message.network);
    }
    if (message.ipAllocation !== "") {
      writer.uint32(18).string(message.ipAllocation);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): NetworkConfig {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    const end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseNetworkConfig();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.network = reader.string();
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.ipAllocation = reader.string();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): NetworkConfig {
    return {
      network: isSet(object.network) ? globalThis.String(object.network) : "",
      ipAllocation: isSet(object.ipAllocation) ? globalThis.String(object.ipAllocation) : "",
    };
  },

  toJSON(message: NetworkConfig): unknown {
    const obj: any = {};
    if (message.network !== "") {
      obj.network = message.network;
    }
    if (message.ipAllocation !== "") {
      obj.ipAllocation = message.ipAllocation;
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<NetworkConfig>, I>>(base?: I): NetworkConfig {
    return NetworkConfig.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<NetworkConfig>, I>>(object: I): NetworkConfig {
    const message = createBaseNetworkConfig();
    message.network = object.network ?? "";
    message.ipAllocation = object.ipAllocation ?? "";
    return message;
  },
};

function createBaseVersion(): Version {
  return { versionNumber: "", defaultVersion: false, availableFeatures: [], type: 0 };
}

export const Version: MessageFns<Version> = {
  encode(message: Version, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.versionNumber !== "") {
      writer.uint32(10).string(message.versionNumber);
    }
    if (message.defaultVersion !== false) {
      writer.uint32(16).bool(message.defaultVersion);
    }
    for (const v of message.availableFeatures) {
      writer.uint32(26).string(v!);
    }
    if (message.type !== 0) {
      writer.uint32(32).int32(message.type);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): Version {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    const end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseVersion();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.versionNumber = reader.string();
          continue;
        }
        case 2: {
          if (tag !== 16) {
            break;
          }

          message.defaultVersion = reader.bool();
          continue;
        }
        case 3: {
          if (tag !== 26) {
            break;
          }

          message.availableFeatures.push(reader.string());
          continue;
        }
        case 4: {
          if (tag !== 32) {
            break;
          }

          message.type = reader.int32() as any;
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): Version {
    return {
      versionNumber: isSet(object.versionNumber) ? globalThis.String(object.versionNumber) : "",
      defaultVersion: isSet(object.defaultVersion) ? globalThis.Boolean(object.defaultVersion) : false,
      availableFeatures: globalThis.Array.isArray(object?.availableFeatures)
        ? object.availableFeatures.map((e: any) => globalThis.String(e))
        : [],
      type: isSet(object.type) ? version_TypeFromJSON(object.type) : 0,
    };
  },

  toJSON(message: Version): unknown {
    const obj: any = {};
    if (message.versionNumber !== "") {
      obj.versionNumber = message.versionNumber;
    }
    if (message.defaultVersion !== false) {
      obj.defaultVersion = message.defaultVersion;
    }
    if (message.availableFeatures?.length) {
      obj.availableFeatures = message.availableFeatures;
    }
    if (message.type !== 0) {
      obj.type = version_TypeToJSON(message.type);
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<Version>, I>>(base?: I): Version {
    return Version.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<Version>, I>>(object: I): Version {
    const message = createBaseVersion();
    message.versionNumber = object.versionNumber ?? "";
    message.defaultVersion = object.defaultVersion ?? false;
    message.availableFeatures = object.availableFeatures?.map((e) => e) || [];
    message.type = object.type ?? 0;
    return message;
  },
};

function createBaseAccelerator(): Accelerator {
  return { acceleratorType: 0, state: 0 };
}

export const Accelerator: MessageFns<Accelerator> = {
  encode(message: Accelerator, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.acceleratorType !== 0) {
      writer.uint32(8).int32(message.acceleratorType);
    }
    if (message.state !== 0) {
      writer.uint32(16).int32(message.state);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): Accelerator {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    const end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseAccelerator();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 8) {
            break;
          }

          message.acceleratorType = reader.int32() as any;
          continue;
        }
        case 2: {
          if (tag !== 16) {
            break;
          }

          message.state = reader.int32() as any;
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): Accelerator {
    return {
      acceleratorType: isSet(object.acceleratorType) ? accelerator_AcceleratorTypeFromJSON(object.acceleratorType) : 0,
      state: isSet(object.state) ? accelerator_StateFromJSON(object.state) : 0,
    };
  },

  toJSON(message: Accelerator): unknown {
    const obj: any = {};
    if (message.acceleratorType !== 0) {
      obj.acceleratorType = accelerator_AcceleratorTypeToJSON(message.acceleratorType);
    }
    if (message.state !== 0) {
      obj.state = accelerator_StateToJSON(message.state);
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<Accelerator>, I>>(base?: I): Accelerator {
    return Accelerator.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<Accelerator>, I>>(object: I): Accelerator {
    const message = createBaseAccelerator();
    message.acceleratorType = object.acceleratorType ?? 0;
    message.state = object.state ?? 0;
    return message;
  },
};

function createBaseCryptoKeyConfig(): CryptoKeyConfig {
  return { keyReference: "" };
}

export const CryptoKeyConfig: MessageFns<CryptoKeyConfig> = {
  encode(message: CryptoKeyConfig, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.keyReference !== "") {
      writer.uint32(10).string(message.keyReference);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): CryptoKeyConfig {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    const end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseCryptoKeyConfig();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.keyReference = reader.string();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): CryptoKeyConfig {
    return { keyReference: isSet(object.keyReference) ? globalThis.String(object.keyReference) : "" };
  },

  toJSON(message: CryptoKeyConfig): unknown {
    const obj: any = {};
    if (message.keyReference !== "") {
      obj.keyReference = message.keyReference;
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<CryptoKeyConfig>, I>>(base?: I): CryptoKeyConfig {
    return CryptoKeyConfig.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<CryptoKeyConfig>, I>>(object: I): CryptoKeyConfig {
    const message = createBaseCryptoKeyConfig();
    message.keyReference = object.keyReference ?? "";
    return message;
  },
};

function createBaseInstance(): Instance {
  return {
    name: "",
    description: "",
    type: 0,
    enableStackdriverLogging: false,
    enableStackdriverMonitoring: false,
    privateInstance: false,
    networkConfig: undefined,
    labels: {},
    options: {},
    createTime: undefined,
    updateTime: undefined,
    state: 0,
    stateMessage: "",
    serviceEndpoint: "",
    zone: "",
    version: "",
    serviceAccount: "",
    displayName: "",
    availableVersion: [],
    apiEndpoint: "",
    gcsBucket: "",
    accelerators: [],
    p4ServiceAccount: "",
    tenantProjectId: "",
    dataprocServiceAccount: "",
    enableRbac: false,
    cryptoKeyConfig: undefined,
    disabledReason: [],
    eventPublishConfig: undefined,
    enableZoneSeparation: false,
  };
}

export const Instance: MessageFns<Instance> = {
  encode(message: Instance, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.name !== "") {
      writer.uint32(10).string(message.name);
    }
    if (message.description !== "") {
      writer.uint32(18).string(message.description);
    }
    if (message.type !== 0) {
      writer.uint32(24).int32(message.type);
    }
    if (message.enableStackdriverLogging !== false) {
      writer.uint32(32).bool(message.enableStackdriverLogging);
    }
    if (message.enableStackdriverMonitoring !== false) {
      writer.uint32(40).bool(message.enableStackdriverMonitoring);
    }
    if (message.privateInstance !== false) {
      writer.uint32(48).bool(message.privateInstance);
    }
    if (message.networkConfig !== undefined) {
      NetworkConfig.encode(message.networkConfig, writer.uint32(58).fork()).join();
    }
    Object.entries(message.labels).forEach(([key, value]) => {
      Instance_LabelsEntry.encode({ key: key as any, value }, writer.uint32(66).fork()).join();
    });
    Object.entries(message.options).forEach(([key, value]) => {
      Instance_OptionsEntry.encode({ key: key as any, value }, writer.uint32(74).fork()).join();
    });
    if (message.createTime !== undefined) {
      Timestamp.encode(toTimestamp(message.createTime), writer.uint32(82).fork()).join();
    }
    if (message.updateTime !== undefined) {
      Timestamp.encode(toTimestamp(message.updateTime), writer.uint32(90).fork()).join();
    }
    if (message.state !== 0) {
      writer.uint32(96).int32(message.state);
    }
    if (message.stateMessage !== "") {
      writer.uint32(106).string(message.stateMessage);
    }
    if (message.serviceEndpoint !== "") {
      writer.uint32(114).string(message.serviceEndpoint);
    }
    if (message.zone !== "") {
      writer.uint32(122).string(message.zone);
    }
    if (message.version !== "") {
      writer.uint32(130).string(message.version);
    }
    if (message.serviceAccount !== "") {
      writer.uint32(138).string(message.serviceAccount);
    }
    if (message.displayName !== "") {
      writer.uint32(146).string(message.displayName);
    }
    for (const v of message.availableVersion) {
      Version.encode(v!, writer.uint32(154).fork()).join();
    }
    if (message.apiEndpoint !== "") {
      writer.uint32(162).string(message.apiEndpoint);
    }
    if (message.gcsBucket !== "") {
      writer.uint32(170).string(message.gcsBucket);
    }
    for (const v of message.accelerators) {
      Accelerator.encode(v!, writer.uint32(178).fork()).join();
    }
    if (message.p4ServiceAccount !== "") {
      writer.uint32(186).string(message.p4ServiceAccount);
    }
    if (message.tenantProjectId !== "") {
      writer.uint32(194).string(message.tenantProjectId);
    }
    if (message.dataprocServiceAccount !== "") {
      writer.uint32(202).string(message.dataprocServiceAccount);
    }
    if (message.enableRbac !== false) {
      writer.uint32(216).bool(message.enableRbac);
    }
    if (message.cryptoKeyConfig !== undefined) {
      CryptoKeyConfig.encode(message.cryptoKeyConfig, writer.uint32(226).fork()).join();
    }
    writer.uint32(234).fork();
    for (const v of message.disabledReason) {
      writer.int32(v);
    }
    writer.join();
    if (message.eventPublishConfig !== undefined) {
      EventPublishConfig.encode(message.eventPublishConfig, writer.uint32(242).fork()).join();
    }
    if (message.enableZoneSeparation !== false) {
      writer.uint32(248).bool(message.enableZoneSeparation);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): Instance {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    const end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseInstance();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.name = reader.string();
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.description = reader.string();
          continue;
        }
        case 3: {
          if (tag !== 24) {
            break;
          }

          message.type = reader.int32() as any;
          continue;
        }
        case 4: {
          if (tag !== 32) {
            break;
          }

          message.enableStackdriverLogging = reader.bool();
          continue;
        }
        case 5: {
          if (tag !== 40) {
            break;
          }

          message.enableStackdriverMonitoring = reader.bool();
          continue;
        }
        case 6: {
          if (tag !== 48) {
            break;
          }

          message.privateInstance = reader.bool();
          continue;
        }
        case 7: {
          if (tag !== 58) {
            break;
          }

          message.networkConfig = NetworkConfig.decode(reader, reader.uint32());
          continue;
        }
        case 8: {
          if (tag !== 66) {
            break;
          }

          const entry8 = Instance_LabelsEntry.decode(reader, reader.uint32());
          if (entry8.value !== undefined) {
            message.labels[entry8.key] = entry8.value;
          }
          continue;
        }
        case 9: {
          if (tag !== 74) {
            break;
          }

          const entry9 = Instance_OptionsEntry.decode(reader, reader.uint32());
          if (entry9.value !== undefined) {
            message.options[entry9.key] = entry9.value;
          }
          continue;
        }
        case 10: {
          if (tag !== 82) {
            break;
          }

          message.createTime = fromTimestamp(Timestamp.decode(reader, reader.uint32()));
          continue;
        }
        case 11: {
          if (tag !== 90) {
            break;
          }

          message.updateTime = fromTimestamp(Timestamp.decode(reader, reader.uint32()));
          continue;
        }
        case 12: {
          if (tag !== 96) {
            break;
          }

          message.state = reader.int32() as any;
          continue;
        }
        case 13: {
          if (tag !== 106) {
            break;
          }

          message.stateMessage = reader.string();
          continue;
        }
        case 14: {
          if (tag !== 114) {
            break;
          }

          message.serviceEndpoint = reader.string();
          continue;
        }
        case 15: {
          if (tag !== 122) {
            break;
          }

          message.zone = reader.string();
          continue;
        }
        case 16: {
          if (tag !== 130) {
            break;
          }

          message.version = reader.string();
          continue;
        }
        case 17: {
          if (tag !== 138) {
            break;
          }

          message.serviceAccount = reader.string();
          continue;
        }
        case 18: {
          if (tag !== 146) {
            break;
          }

          message.displayName = reader.string();
          continue;
        }
        case 19: {
          if (tag !== 154) {
            break;
          }

          message.availableVersion.push(Version.decode(reader, reader.uint32()));
          continue;
        }
        case 20: {
          if (tag !== 162) {
            break;
          }

          message.apiEndpoint = reader.string();
          continue;
        }
        case 21: {
          if (tag !== 170) {
            break;
          }

          message.gcsBucket = reader.string();
          continue;
        }
        case 22: {
          if (tag !== 178) {
            break;
          }

          message.accelerators.push(Accelerator.decode(reader, reader.uint32()));
          continue;
        }
        case 23: {
          if (tag !== 186) {
            break;
          }

          message.p4ServiceAccount = reader.string();
          continue;
        }
        case 24: {
          if (tag !== 194) {
            break;
          }

          message.tenantProjectId = reader.string();
          continue;
        }
        case 25: {
          if (tag !== 202) {
            break;
          }

          message.dataprocServiceAccount = reader.string();
          continue;
        }
        case 27: {
          if (tag !== 216) {
            break;
          }

          message.enableRbac = reader.bool();
          continue;
        }
        case 28: {
          if (tag !== 226) {
            break;
          }

          message.cryptoKeyConfig = CryptoKeyConfig.decode(reader, reader.uint32());
          continue;
        }
        case 29: {
          if (tag === 232) {
            message.disabledReason.push(reader.int32() as any);

            continue;
          }

          if (tag === 234) {
            const end2 = reader.uint32() + reader.pos;
            while (reader.pos < end2) {
              message.disabledReason.push(reader.int32() as any);
            }

            continue;
          }

          break;
        }
        case 30: {
          if (tag !== 242) {
            break;
          }

          message.eventPublishConfig = EventPublishConfig.decode(reader, reader.uint32());
          continue;
        }
        case 31: {
          if (tag !== 248) {
            break;
          }

          message.enableZoneSeparation = reader.bool();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): Instance {
    return {
      name: isSet(object.name) ? globalThis.String(object.name) : "",
      description: isSet(object.description) ? globalThis.String(object.description) : "",
      type: isSet(object.type) ? instance_TypeFromJSON(object.type) : 0,
      enableStackdriverLogging: isSet(object.enableStackdriverLogging)
        ? globalThis.Boolean(object.enableStackdriverLogging)
        : false,
      enableStackdriverMonitoring: isSet(object.enableStackdriverMonitoring)
        ? globalThis.Boolean(object.enableStackdriverMonitoring)
        : false,
      privateInstance: isSet(object.privateInstance) ? globalThis.Boolean(object.privateInstance) : false,
      networkConfig: isSet(object.networkConfig) ? NetworkConfig.fromJSON(object.networkConfig) : undefined,
      labels: isObject(object.labels)
        ? Object.entries(object.labels).reduce<{ [key: string]: string }>((acc, [key, value]) => {
          acc[key] = String(value);
          return acc;
        }, {})
        : {},
      options: isObject(object.options)
        ? Object.entries(object.options).reduce<{ [key: string]: string }>((acc, [key, value]) => {
          acc[key] = String(value);
          return acc;
        }, {})
        : {},
      createTime: isSet(object.createTime) ? fromJsonTimestamp(object.createTime) : undefined,
      updateTime: isSet(object.updateTime) ? fromJsonTimestamp(object.updateTime) : undefined,
      state: isSet(object.state) ? instance_StateFromJSON(object.state) : 0,
      stateMessage: isSet(object.stateMessage) ? globalThis.String(object.stateMessage) : "",
      serviceEndpoint: isSet(object.serviceEndpoint) ? globalThis.String(object.serviceEndpoint) : "",
      zone: isSet(object.zone) ? globalThis.String(object.zone) : "",
      version: isSet(object.version) ? globalThis.String(object.version) : "",
      serviceAccount: isSet(object.serviceAccount) ? globalThis.String(object.serviceAccount) : "",
      displayName: isSet(object.displayName) ? globalThis.String(object.displayName) : "",
      availableVersion: globalThis.Array.isArray(object?.availableVersion)
        ? object.availableVersion.map((e: any) => Version.fromJSON(e))
        : [],
      apiEndpoint: isSet(object.apiEndpoint) ? globalThis.String(object.apiEndpoint) : "",
      gcsBucket: isSet(object.gcsBucket) ? globalThis.String(object.gcsBucket) : "",
      accelerators: globalThis.Array.isArray(object?.accelerators)
        ? object.accelerators.map((e: any) => Accelerator.fromJSON(e))
        : [],
      p4ServiceAccount: isSet(object.p4ServiceAccount) ? globalThis.String(object.p4ServiceAccount) : "",
      tenantProjectId: isSet(object.tenantProjectId) ? globalThis.String(object.tenantProjectId) : "",
      dataprocServiceAccount: isSet(object.dataprocServiceAccount)
        ? globalThis.String(object.dataprocServiceAccount)
        : "",
      enableRbac: isSet(object.enableRbac) ? globalThis.Boolean(object.enableRbac) : false,
      cryptoKeyConfig: isSet(object.cryptoKeyConfig) ? CryptoKeyConfig.fromJSON(object.cryptoKeyConfig) : undefined,
      disabledReason: globalThis.Array.isArray(object?.disabledReason)
        ? object.disabledReason.map((e: any) => instance_DisabledReasonFromJSON(e))
        : [],
      eventPublishConfig: isSet(object.eventPublishConfig)
        ? EventPublishConfig.fromJSON(object.eventPublishConfig)
        : undefined,
      enableZoneSeparation: isSet(object.enableZoneSeparation)
        ? globalThis.Boolean(object.enableZoneSeparation)
        : false,
    };
  },

  toJSON(message: Instance): unknown {
    const obj: any = {};
    if (message.name !== "") {
      obj.name = message.name;
    }
    if (message.description !== "") {
      obj.description = message.description;
    }
    if (message.type !== 0) {
      obj.type = instance_TypeToJSON(message.type);
    }
    if (message.enableStackdriverLogging !== false) {
      obj.enableStackdriverLogging = message.enableStackdriverLogging;
    }
    if (message.enableStackdriverMonitoring !== false) {
      obj.enableStackdriverMonitoring = message.enableStackdriverMonitoring;
    }
    if (message.privateInstance !== false) {
      obj.privateInstance = message.privateInstance;
    }
    if (message.networkConfig !== undefined) {
      obj.networkConfig = NetworkConfig.toJSON(message.networkConfig);
    }
    if (message.labels) {
      const entries = Object.entries(message.labels);
      if (entries.length > 0) {
        obj.labels = {};
        entries.forEach(([k, v]) => {
          obj.labels[k] = v;
        });
      }
    }
    if (message.options) {
      const entries = Object.entries(message.options);
      if (entries.length > 0) {
        obj.options = {};
        entries.forEach(([k, v]) => {
          obj.options[k] = v;
        });
      }
    }
    if (message.createTime !== undefined) {
      obj.createTime = message.createTime.toISOString();
    }
    if (message.updateTime !== undefined) {
      obj.updateTime = message.updateTime.toISOString();
    }
    if (message.state !== 0) {
      obj.state = instance_StateToJSON(message.state);
    }
    if (message.stateMessage !== "") {
      obj.stateMessage = message.stateMessage;
    }
    if (message.serviceEndpoint !== "") {
      obj.serviceEndpoint = message.serviceEndpoint;
    }
    if (message.zone !== "") {
      obj.zone = message.zone;
    }
    if (message.version !== "") {
      obj.version = message.version;
    }
    if (message.serviceAccount !== "") {
      obj.serviceAccount = message.serviceAccount;
    }
    if (message.displayName !== "") {
      obj.displayName = message.displayName;
    }
    if (message.availableVersion?.length) {
      obj.availableVersion = message.availableVersion.map((e) => Version.toJSON(e));
    }
    if (message.apiEndpoint !== "") {
      obj.apiEndpoint = message.apiEndpoint;
    }
    if (message.gcsBucket !== "") {
      obj.gcsBucket = message.gcsBucket;
    }
    if (message.accelerators?.length) {
      obj.accelerators = message.accelerators.map((e) => Accelerator.toJSON(e));
    }
    if (message.p4ServiceAccount !== "") {
      obj.p4ServiceAccount = message.p4ServiceAccount;
    }
    if (message.tenantProjectId !== "") {
      obj.tenantProjectId = message.tenantProjectId;
    }
    if (message.dataprocServiceAccount !== "") {
      obj.dataprocServiceAccount = message.dataprocServiceAccount;
    }
    if (message.enableRbac !== false) {
      obj.enableRbac = message.enableRbac;
    }
    if (message.cryptoKeyConfig !== undefined) {
      obj.cryptoKeyConfig = CryptoKeyConfig.toJSON(message.cryptoKeyConfig);
    }
    if (message.disabledReason?.length) {
      obj.disabledReason = message.disabledReason.map((e) => instance_DisabledReasonToJSON(e));
    }
    if (message.eventPublishConfig !== undefined) {
      obj.eventPublishConfig = EventPublishConfig.toJSON(message.eventPublishConfig);
    }
    if (message.enableZoneSeparation !== false) {
      obj.enableZoneSeparation = message.enableZoneSeparation;
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<Instance>, I>>(base?: I): Instance {
    return Instance.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<Instance>, I>>(object: I): Instance {
    const message = createBaseInstance();
    message.name = object.name ?? "";
    message.description = object.description ?? "";
    message.type = object.type ?? 0;
    message.enableStackdriverLogging = object.enableStackdriverLogging ?? false;
    message.enableStackdriverMonitoring = object.enableStackdriverMonitoring ?? false;
    message.privateInstance = object.privateInstance ?? false;
    message.networkConfig = (object.networkConfig !== undefined && object.networkConfig !== null)
      ? NetworkConfig.fromPartial(object.networkConfig)
      : undefined;
    message.labels = Object.entries(object.labels ?? {}).reduce<{ [key: string]: string }>((acc, [key, value]) => {
      if (value !== undefined) {
        acc[key] = globalThis.String(value);
      }
      return acc;
    }, {});
    message.options = Object.entries(object.options ?? {}).reduce<{ [key: string]: string }>((acc, [key, value]) => {
      if (value !== undefined) {
        acc[key] = globalThis.String(value);
      }
      return acc;
    }, {});
    message.createTime = object.createTime ?? undefined;
    message.updateTime = object.updateTime ?? undefined;
    message.state = object.state ?? 0;
    message.stateMessage = object.stateMessage ?? "";
    message.serviceEndpoint = object.serviceEndpoint ?? "";
    message.zone = object.zone ?? "";
    message.version = object.version ?? "";
    message.serviceAccount = object.serviceAccount ?? "";
    message.displayName = object.displayName ?? "";
    message.availableVersion = object.availableVersion?.map((e) => Version.fromPartial(e)) || [];
    message.apiEndpoint = object.apiEndpoint ?? "";
    message.gcsBucket = object.gcsBucket ?? "";
    message.accelerators = object.accelerators?.map((e) => Accelerator.fromPartial(e)) || [];
    message.p4ServiceAccount = object.p4ServiceAccount ?? "";
    message.tenantProjectId = object.tenantProjectId ?? "";
    message.dataprocServiceAccount = object.dataprocServiceAccount ?? "";
    message.enableRbac = object.enableRbac ?? false;
    message.cryptoKeyConfig = (object.cryptoKeyConfig !== undefined && object.cryptoKeyConfig !== null)
      ? CryptoKeyConfig.fromPartial(object.cryptoKeyConfig)
      : undefined;
    message.disabledReason = object.disabledReason?.map((e) => e) || [];
    message.eventPublishConfig = (object.eventPublishConfig !== undefined && object.eventPublishConfig !== null)
      ? EventPublishConfig.fromPartial(object.eventPublishConfig)
      : undefined;
    message.enableZoneSeparation = object.enableZoneSeparation ?? false;
    return message;
  },
};

function createBaseInstance_LabelsEntry(): Instance_LabelsEntry {
  return { key: "", value: "" };
}

export const Instance_LabelsEntry: MessageFns<Instance_LabelsEntry> = {
  encode(message: Instance_LabelsEntry, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.key !== "") {
      writer.uint32(10).string(message.key);
    }
    if (message.value !== "") {
      writer.uint32(18).string(message.value);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): Instance_LabelsEntry {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    const end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseInstance_LabelsEntry();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.key = reader.string();
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.value = reader.string();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): Instance_LabelsEntry {
    return {
      key: isSet(object.key) ? globalThis.String(object.key) : "",
      value: isSet(object.value) ? globalThis.String(object.value) : "",
    };
  },

  toJSON(message: Instance_LabelsEntry): unknown {
    const obj: any = {};
    if (message.key !== "") {
      obj.key = message.key;
    }
    if (message.value !== "") {
      obj.value = message.value;
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<Instance_LabelsEntry>, I>>(base?: I): Instance_LabelsEntry {
    return Instance_LabelsEntry.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<Instance_LabelsEntry>, I>>(object: I): Instance_LabelsEntry {
    const message = createBaseInstance_LabelsEntry();
    message.key = object.key ?? "";
    message.value = object.value ?? "";
    return message;
  },
};

function createBaseInstance_OptionsEntry(): Instance_OptionsEntry {
  return { key: "", value: "" };
}

export const Instance_OptionsEntry: MessageFns<Instance_OptionsEntry> = {
  encode(message: Instance_OptionsEntry, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.key !== "") {
      writer.uint32(10).string(message.key);
    }
    if (message.value !== "") {
      writer.uint32(18).string(message.value);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): Instance_OptionsEntry {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    const end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseInstance_OptionsEntry();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.key = reader.string();
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.value = reader.string();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): Instance_OptionsEntry {
    return {
      key: isSet(object.key) ? globalThis.String(object.key) : "",
      value: isSet(object.value) ? globalThis.String(object.value) : "",
    };
  },

  toJSON(message: Instance_OptionsEntry): unknown {
    const obj: any = {};
    if (message.key !== "") {
      obj.key = message.key;
    }
    if (message.value !== "") {
      obj.value = message.value;
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<Instance_OptionsEntry>, I>>(base?: I): Instance_OptionsEntry {
    return Instance_OptionsEntry.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<Instance_OptionsEntry>, I>>(object: I): Instance_OptionsEntry {
    const message = createBaseInstance_OptionsEntry();
    message.key = object.key ?? "";
    message.value = object.value ?? "";
    return message;
  },
};

function createBaseEventPublishConfig(): EventPublishConfig {
  return { enabled: false, topic: "" };
}

export const EventPublishConfig: MessageFns<EventPublishConfig> = {
  encode(message: EventPublishConfig, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.enabled !== false) {
      writer.uint32(8).bool(message.enabled);
    }
    if (message.topic !== "") {
      writer.uint32(18).string(message.topic);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): EventPublishConfig {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    const end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseEventPublishConfig();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 8) {
            break;
          }

          message.enabled = reader.bool();
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.topic = reader.string();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): EventPublishConfig {
    return {
      enabled: isSet(object.enabled) ? globalThis.Boolean(object.enabled) : false,
      topic: isSet(object.topic) ? globalThis.String(object.topic) : "",
    };
  },

  toJSON(message: EventPublishConfig): unknown {
    const obj: any = {};
    if (message.enabled !== false) {
      obj.enabled = message.enabled;
    }
    if (message.topic !== "") {
      obj.topic = message.topic;
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<EventPublishConfig>, I>>(base?: I): EventPublishConfig {
    return EventPublishConfig.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<EventPublishConfig>, I>>(object: I): EventPublishConfig {
    const message = createBaseEventPublishConfig();
    message.enabled = object.enabled ?? false;
    message.topic = object.topic ?? "";
    return message;
  },
};

function createBaseDnsPeering(): DnsPeering {
  return { name: "", domain: "", description: "", targetProject: "", targetNetwork: "" };
}

export const DnsPeering: MessageFns<DnsPeering> = {
  encode(message: DnsPeering, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.name !== "") {
      writer.uint32(10).string(message.name);
    }
    if (message.domain !== "") {
      writer.uint32(18).string(message.domain);
    }
    if (message.description !== "") {
      writer.uint32(26).string(message.description);
    }
    if (message.targetProject !== "") {
      writer.uint32(34).string(message.targetProject);
    }
    if (message.targetNetwork !== "") {
      writer.uint32(42).string(message.targetNetwork);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): DnsPeering {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    const end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseDnsPeering();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.name = reader.string();
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.domain = reader.string();
          continue;
        }
        case 3: {
          if (tag !== 26) {
            break;
          }

          message.description = reader.string();
          continue;
        }
        case 4: {
          if (tag !== 34) {
            break;
          }

          message.targetProject = reader.string();
          continue;
        }
        case 5: {
          if (tag !== 42) {
            break;
          }

          message.targetNetwork = reader.string();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): DnsPeering {
    return {
      name: isSet(object.name) ? globalThis.String(object.name) : "",
      domain: isSet(object.domain) ? globalThis.String(object.domain) : "",
      description: isSet(object.description) ? globalThis.String(object.description) : "",
      targetProject: isSet(object.targetProject) ? globalThis.String(object.targetProject) : "",
      targetNetwork: isSet(object.targetNetwork) ? globalThis.String(object.targetNetwork) : "",
    };
  },

  toJSON(message: DnsPeering): unknown {
    const obj: any = {};
    if (message.name !== "") {
      obj.name = message.name;
    }
    if (message.domain !== "") {
      obj.domain = message.domain;
    }
    if (message.description !== "") {
      obj.description = message.description;
    }
    if (message.targetProject !== "") {
      obj.targetProject = message.targetProject;
    }
    if (message.targetNetwork !== "") {
      obj.targetNetwork = message.targetNetwork;
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<DnsPeering>, I>>(base?: I): DnsPeering {
    return DnsPeering.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<DnsPeering>, I>>(object: I): DnsPeering {
    const message = createBaseDnsPeering();
    message.name = object.name ?? "";
    message.domain = object.domain ?? "";
    message.description = object.description ?? "";
    message.targetProject = object.targetProject ?? "";
    message.targetNetwork = object.targetNetwork ?? "";
    return message;
  },
};

function createBaseInstanceEventData(): InstanceEventData {
  return { payload: undefined };
}

export const InstanceEventData: MessageFns<InstanceEventData> = {
  encode(message: InstanceEventData, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.payload !== undefined) {
      Instance.encode(message.payload, writer.uint32(10).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): InstanceEventData {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    const end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseInstanceEventData();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.payload = Instance.decode(reader, reader.uint32());
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): InstanceEventData {
    return { payload: isSet(object.payload) ? Instance.fromJSON(object.payload) : undefined };
  },

  toJSON(message: InstanceEventData): unknown {
    const obj: any = {};
    if (message.payload !== undefined) {
      obj.payload = Instance.toJSON(message.payload);
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<InstanceEventData>, I>>(base?: I): InstanceEventData {
    return InstanceEventData.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<InstanceEventData>, I>>(object: I): InstanceEventData {
    const message = createBaseInstanceEventData();
    message.payload = (object.payload !== undefined && object.payload !== null)
      ? Instance.fromPartial(object.payload)
      : undefined;
    return message;
  },
};

function createBaseDnsPeeringEventData(): DnsPeeringEventData {
  return { payload: undefined };
}

export const DnsPeeringEventData: MessageFns<DnsPeeringEventData> = {
  encode(message: DnsPeeringEventData, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.payload !== undefined) {
      DnsPeering.encode(message.payload, writer.uint32(10).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): DnsPeeringEventData {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    const end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseDnsPeeringEventData();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.payload = DnsPeering.decode(reader, reader.uint32());
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): DnsPeeringEventData {
    return { payload: isSet(object.payload) ? DnsPeering.fromJSON(object.payload) : undefined };
  },

  toJSON(message: DnsPeeringEventData): unknown {
    const obj: any = {};
    if (message.payload !== undefined) {
      obj.payload = DnsPeering.toJSON(message.payload);
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<DnsPeeringEventData>, I>>(base?: I): DnsPeeringEventData {
    return DnsPeeringEventData.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<DnsPeeringEventData>, I>>(object: I): DnsPeeringEventData {
    const message = createBaseDnsPeeringEventData();
    message.payload = (object.payload !== undefined && object.payload !== null)
      ? DnsPeering.fromPartial(object.payload)
      : undefined;
    return message;
  },
};

type Builtin = Date | Function | Uint8Array | string | number | boolean | undefined;

export type DeepPartial<T> = T extends Builtin ? T
  : T extends Long ? string | number | Long : T extends globalThis.Array<infer U> ? globalThis.Array<DeepPartial<U>>
  : T extends ReadonlyArray<infer U> ? ReadonlyArray<DeepPartial<U>>
  : T extends {} ? { [K in keyof T]?: DeepPartial<T[K]> }
  : Partial<T>;

type KeysOfUnion<T> = T extends T ? keyof T : never;
export type Exact<P, I extends P> = P extends Builtin ? P
  : P & { [K in keyof P]: Exact<P[K], I[K]> } & { [K in Exclude<keyof I, KeysOfUnion<P>>]: never };

function toTimestamp(date: Date): Timestamp {
  const seconds = numberToLong(Math.trunc(date.getTime() / 1_000));
  const nanos = (date.getTime() % 1_000) * 1_000_000;
  return { seconds, nanos };
}

function fromTimestamp(t: Timestamp): Date {
  let millis = (t.seconds.toNumber() || 0) * 1_000;
  millis += (t.nanos || 0) / 1_000_000;
  return new globalThis.Date(millis);
}

function fromJsonTimestamp(o: any): Date {
  if (o instanceof globalThis.Date) {
    return o;
  } else if (typeof o === "string") {
    return new globalThis.Date(o);
  } else {
    return fromTimestamp(Timestamp.fromJSON(o));
  }
}

function numberToLong(number: number) {
  return Long.fromNumber(number);
}

function isObject(value: any): boolean {
  return typeof value === "object" && value !== null;
}

function isSet(value: any): boolean {
  return value !== null && value !== undefined;
}

export interface MessageFns<T> {
  encode(message: T, writer?: BinaryWriter): BinaryWriter;
  decode(input: BinaryReader | Uint8Array, length?: number): T;
  fromJSON(object: any): T;
  toJSON(message: T): unknown;
  create<I extends Exact<DeepPartial<T>, I>>(base?: I): T;
  fromPartial<I extends Exact<DeepPartial<T>, I>>(object: I): T;
}
