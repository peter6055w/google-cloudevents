// Code generated by protoc-gen-ts_proto. DO NOT EDIT.
// versions:
//   protoc-gen-ts_proto  v2.7.7
//   protoc               v6.32.0
// source: google/events/cloud/dataplex/v1/events.proto

/* eslint-disable */
import { BinaryReader, BinaryWriter } from "@bufbuild/protobuf/wire";
import Long from "long";
import {
  AssetEventData,
  DataAttributeBindingEventData,
  DataAttributeEventData,
  DataScanEventData,
  DataTaxonomyEventData,
  EnvironmentEventData,
  LakeEventData,
  TaskEventData,
  ZoneEventData,
} from "./data";

export const protobufPackage = "google.events.cloud.dataplex.v1";

/** The CloudEvent raised when a DataTaxonomy is created. */
export interface DataTaxonomyCreatedEvent {
  /** The data associated with the event. */
  data?: DataTaxonomyEventData | undefined;
}

/** The CloudEvent raised when a DataTaxonomy is updated. */
export interface DataTaxonomyUpdatedEvent {
  /** The data associated with the event. */
  data?: DataTaxonomyEventData | undefined;
}

/** The CloudEvent raised when a DataTaxonomy is deleted. */
export interface DataTaxonomyDeletedEvent {
  /** The data associated with the event. */
  data?: DataTaxonomyEventData | undefined;
}

/** The CloudEvent raised when a DataAttributeBinding is created. */
export interface DataAttributeBindingCreatedEvent {
  /** The data associated with the event. */
  data?: DataAttributeBindingEventData | undefined;
}

/** The CloudEvent raised when a DataAttributeBinding is updated. */
export interface DataAttributeBindingUpdatedEvent {
  /** The data associated with the event. */
  data?: DataAttributeBindingEventData | undefined;
}

/** The CloudEvent raised when a DataAttributeBinding is deleted. */
export interface DataAttributeBindingDeletedEvent {
  /** The data associated with the event. */
  data?: DataAttributeBindingEventData | undefined;
}

/** The CloudEvent raised when a DataAttribute is created. */
export interface DataAttributeCreatedEvent {
  /** The data associated with the event. */
  data?: DataAttributeEventData | undefined;
}

/** The CloudEvent raised when a DataAttribute is updated. */
export interface DataAttributeUpdatedEvent {
  /** The data associated with the event. */
  data?: DataAttributeEventData | undefined;
}

/** The CloudEvent raised when a DataAttribute is deleted. */
export interface DataAttributeDeletedEvent {
  /** The data associated with the event. */
  data?: DataAttributeEventData | undefined;
}

/** The CloudEvent raised when a DataScan is created. */
export interface DataScanCreatedEvent {
  /** The data associated with the event. */
  data?: DataScanEventData | undefined;
}

/** The CloudEvent raised when a DataScan is updated. */
export interface DataScanUpdatedEvent {
  /** The data associated with the event. */
  data?: DataScanEventData | undefined;
}

/** The CloudEvent raised when a DataScan is deleted. */
export interface DataScanDeletedEvent {
  /** The data associated with the event. */
  data?: DataScanEventData | undefined;
}

/** The CloudEvent raised when a Lake is created. */
export interface LakeCreatedEvent {
  /** The data associated with the event. */
  data?: LakeEventData | undefined;
}

/** The CloudEvent raised when a Lake is updated. */
export interface LakeUpdatedEvent {
  /** The data associated with the event. */
  data?: LakeEventData | undefined;
}

/** The CloudEvent raised when a Lake is deleted. */
export interface LakeDeletedEvent {
  /** The data associated with the event. */
  data?: LakeEventData | undefined;
}

/** The CloudEvent raised when a Zone is created. */
export interface ZoneCreatedEvent {
  /** The data associated with the event. */
  data?: ZoneEventData | undefined;
}

/** The CloudEvent raised when a Zone is updated. */
export interface ZoneUpdatedEvent {
  /** The data associated with the event. */
  data?: ZoneEventData | undefined;
}

/** The CloudEvent raised when a Zone is deleted. */
export interface ZoneDeletedEvent {
  /** The data associated with the event. */
  data?: ZoneEventData | undefined;
}

/** The CloudEvent raised when an Asset is created. */
export interface AssetCreatedEvent {
  /** The data associated with the event. */
  data?: AssetEventData | undefined;
}

/** The CloudEvent raised when an Asset is updated. */
export interface AssetUpdatedEvent {
  /** The data associated with the event. */
  data?: AssetEventData | undefined;
}

/** The CloudEvent raised when an Asset is deleted. */
export interface AssetDeletedEvent {
  /** The data associated with the event. */
  data?: AssetEventData | undefined;
}

/** The CloudEvent raised when a Task is created. */
export interface TaskCreatedEvent {
  /** The data associated with the event. */
  data?: TaskEventData | undefined;
}

/** The CloudEvent raised when a Task is updated. */
export interface TaskUpdatedEvent {
  /** The data associated with the event. */
  data?: TaskEventData | undefined;
}

/** The CloudEvent raised when a Task is deleted. */
export interface TaskDeletedEvent {
  /** The data associated with the event. */
  data?: TaskEventData | undefined;
}

/** The CloudEvent raised when an Environment is created. */
export interface EnvironmentCreatedEvent {
  /** The data associated with the event. */
  data?: EnvironmentEventData | undefined;
}

/** The CloudEvent raised when an Environment is updated. */
export interface EnvironmentUpdatedEvent {
  /** The data associated with the event. */
  data?: EnvironmentEventData | undefined;
}

/** The CloudEvent raised when an Environment is deleted. */
export interface EnvironmentDeletedEvent {
  /** The data associated with the event. */
  data?: EnvironmentEventData | undefined;
}

function createBaseDataTaxonomyCreatedEvent(): DataTaxonomyCreatedEvent {
  return { data: undefined };
}

export const DataTaxonomyCreatedEvent: MessageFns<DataTaxonomyCreatedEvent> = {
  encode(message: DataTaxonomyCreatedEvent, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.data !== undefined) {
      DataTaxonomyEventData.encode(message.data, writer.uint32(10).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): DataTaxonomyCreatedEvent {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    const end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseDataTaxonomyCreatedEvent();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.data = DataTaxonomyEventData.decode(reader, reader.uint32());
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): DataTaxonomyCreatedEvent {
    return { data: isSet(object.data) ? DataTaxonomyEventData.fromJSON(object.data) : undefined };
  },

  toJSON(message: DataTaxonomyCreatedEvent): unknown {
    const obj: any = {};
    if (message.data !== undefined) {
      obj.data = DataTaxonomyEventData.toJSON(message.data);
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<DataTaxonomyCreatedEvent>, I>>(base?: I): DataTaxonomyCreatedEvent {
    return DataTaxonomyCreatedEvent.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<DataTaxonomyCreatedEvent>, I>>(object: I): DataTaxonomyCreatedEvent {
    const message = createBaseDataTaxonomyCreatedEvent();
    message.data = (object.data !== undefined && object.data !== null)
      ? DataTaxonomyEventData.fromPartial(object.data)
      : undefined;
    return message;
  },
};

function createBaseDataTaxonomyUpdatedEvent(): DataTaxonomyUpdatedEvent {
  return { data: undefined };
}

export const DataTaxonomyUpdatedEvent: MessageFns<DataTaxonomyUpdatedEvent> = {
  encode(message: DataTaxonomyUpdatedEvent, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.data !== undefined) {
      DataTaxonomyEventData.encode(message.data, writer.uint32(10).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): DataTaxonomyUpdatedEvent {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    const end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseDataTaxonomyUpdatedEvent();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.data = DataTaxonomyEventData.decode(reader, reader.uint32());
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): DataTaxonomyUpdatedEvent {
    return { data: isSet(object.data) ? DataTaxonomyEventData.fromJSON(object.data) : undefined };
  },

  toJSON(message: DataTaxonomyUpdatedEvent): unknown {
    const obj: any = {};
    if (message.data !== undefined) {
      obj.data = DataTaxonomyEventData.toJSON(message.data);
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<DataTaxonomyUpdatedEvent>, I>>(base?: I): DataTaxonomyUpdatedEvent {
    return DataTaxonomyUpdatedEvent.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<DataTaxonomyUpdatedEvent>, I>>(object: I): DataTaxonomyUpdatedEvent {
    const message = createBaseDataTaxonomyUpdatedEvent();
    message.data = (object.data !== undefined && object.data !== null)
      ? DataTaxonomyEventData.fromPartial(object.data)
      : undefined;
    return message;
  },
};

function createBaseDataTaxonomyDeletedEvent(): DataTaxonomyDeletedEvent {
  return { data: undefined };
}

export const DataTaxonomyDeletedEvent: MessageFns<DataTaxonomyDeletedEvent> = {
  encode(message: DataTaxonomyDeletedEvent, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.data !== undefined) {
      DataTaxonomyEventData.encode(message.data, writer.uint32(10).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): DataTaxonomyDeletedEvent {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    const end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseDataTaxonomyDeletedEvent();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.data = DataTaxonomyEventData.decode(reader, reader.uint32());
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): DataTaxonomyDeletedEvent {
    return { data: isSet(object.data) ? DataTaxonomyEventData.fromJSON(object.data) : undefined };
  },

  toJSON(message: DataTaxonomyDeletedEvent): unknown {
    const obj: any = {};
    if (message.data !== undefined) {
      obj.data = DataTaxonomyEventData.toJSON(message.data);
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<DataTaxonomyDeletedEvent>, I>>(base?: I): DataTaxonomyDeletedEvent {
    return DataTaxonomyDeletedEvent.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<DataTaxonomyDeletedEvent>, I>>(object: I): DataTaxonomyDeletedEvent {
    const message = createBaseDataTaxonomyDeletedEvent();
    message.data = (object.data !== undefined && object.data !== null)
      ? DataTaxonomyEventData.fromPartial(object.data)
      : undefined;
    return message;
  },
};

function createBaseDataAttributeBindingCreatedEvent(): DataAttributeBindingCreatedEvent {
  return { data: undefined };
}

export const DataAttributeBindingCreatedEvent: MessageFns<DataAttributeBindingCreatedEvent> = {
  encode(message: DataAttributeBindingCreatedEvent, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.data !== undefined) {
      DataAttributeBindingEventData.encode(message.data, writer.uint32(10).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): DataAttributeBindingCreatedEvent {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    const end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseDataAttributeBindingCreatedEvent();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.data = DataAttributeBindingEventData.decode(reader, reader.uint32());
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): DataAttributeBindingCreatedEvent {
    return { data: isSet(object.data) ? DataAttributeBindingEventData.fromJSON(object.data) : undefined };
  },

  toJSON(message: DataAttributeBindingCreatedEvent): unknown {
    const obj: any = {};
    if (message.data !== undefined) {
      obj.data = DataAttributeBindingEventData.toJSON(message.data);
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<DataAttributeBindingCreatedEvent>, I>>(
    base?: I,
  ): DataAttributeBindingCreatedEvent {
    return DataAttributeBindingCreatedEvent.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<DataAttributeBindingCreatedEvent>, I>>(
    object: I,
  ): DataAttributeBindingCreatedEvent {
    const message = createBaseDataAttributeBindingCreatedEvent();
    message.data = (object.data !== undefined && object.data !== null)
      ? DataAttributeBindingEventData.fromPartial(object.data)
      : undefined;
    return message;
  },
};

function createBaseDataAttributeBindingUpdatedEvent(): DataAttributeBindingUpdatedEvent {
  return { data: undefined };
}

export const DataAttributeBindingUpdatedEvent: MessageFns<DataAttributeBindingUpdatedEvent> = {
  encode(message: DataAttributeBindingUpdatedEvent, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.data !== undefined) {
      DataAttributeBindingEventData.encode(message.data, writer.uint32(10).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): DataAttributeBindingUpdatedEvent {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    const end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseDataAttributeBindingUpdatedEvent();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.data = DataAttributeBindingEventData.decode(reader, reader.uint32());
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): DataAttributeBindingUpdatedEvent {
    return { data: isSet(object.data) ? DataAttributeBindingEventData.fromJSON(object.data) : undefined };
  },

  toJSON(message: DataAttributeBindingUpdatedEvent): unknown {
    const obj: any = {};
    if (message.data !== undefined) {
      obj.data = DataAttributeBindingEventData.toJSON(message.data);
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<DataAttributeBindingUpdatedEvent>, I>>(
    base?: I,
  ): DataAttributeBindingUpdatedEvent {
    return DataAttributeBindingUpdatedEvent.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<DataAttributeBindingUpdatedEvent>, I>>(
    object: I,
  ): DataAttributeBindingUpdatedEvent {
    const message = createBaseDataAttributeBindingUpdatedEvent();
    message.data = (object.data !== undefined && object.data !== null)
      ? DataAttributeBindingEventData.fromPartial(object.data)
      : undefined;
    return message;
  },
};

function createBaseDataAttributeBindingDeletedEvent(): DataAttributeBindingDeletedEvent {
  return { data: undefined };
}

export const DataAttributeBindingDeletedEvent: MessageFns<DataAttributeBindingDeletedEvent> = {
  encode(message: DataAttributeBindingDeletedEvent, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.data !== undefined) {
      DataAttributeBindingEventData.encode(message.data, writer.uint32(10).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): DataAttributeBindingDeletedEvent {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    const end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseDataAttributeBindingDeletedEvent();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.data = DataAttributeBindingEventData.decode(reader, reader.uint32());
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): DataAttributeBindingDeletedEvent {
    return { data: isSet(object.data) ? DataAttributeBindingEventData.fromJSON(object.data) : undefined };
  },

  toJSON(message: DataAttributeBindingDeletedEvent): unknown {
    const obj: any = {};
    if (message.data !== undefined) {
      obj.data = DataAttributeBindingEventData.toJSON(message.data);
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<DataAttributeBindingDeletedEvent>, I>>(
    base?: I,
  ): DataAttributeBindingDeletedEvent {
    return DataAttributeBindingDeletedEvent.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<DataAttributeBindingDeletedEvent>, I>>(
    object: I,
  ): DataAttributeBindingDeletedEvent {
    const message = createBaseDataAttributeBindingDeletedEvent();
    message.data = (object.data !== undefined && object.data !== null)
      ? DataAttributeBindingEventData.fromPartial(object.data)
      : undefined;
    return message;
  },
};

function createBaseDataAttributeCreatedEvent(): DataAttributeCreatedEvent {
  return { data: undefined };
}

export const DataAttributeCreatedEvent: MessageFns<DataAttributeCreatedEvent> = {
  encode(message: DataAttributeCreatedEvent, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.data !== undefined) {
      DataAttributeEventData.encode(message.data, writer.uint32(10).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): DataAttributeCreatedEvent {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    const end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseDataAttributeCreatedEvent();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.data = DataAttributeEventData.decode(reader, reader.uint32());
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): DataAttributeCreatedEvent {
    return { data: isSet(object.data) ? DataAttributeEventData.fromJSON(object.data) : undefined };
  },

  toJSON(message: DataAttributeCreatedEvent): unknown {
    const obj: any = {};
    if (message.data !== undefined) {
      obj.data = DataAttributeEventData.toJSON(message.data);
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<DataAttributeCreatedEvent>, I>>(base?: I): DataAttributeCreatedEvent {
    return DataAttributeCreatedEvent.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<DataAttributeCreatedEvent>, I>>(object: I): DataAttributeCreatedEvent {
    const message = createBaseDataAttributeCreatedEvent();
    message.data = (object.data !== undefined && object.data !== null)
      ? DataAttributeEventData.fromPartial(object.data)
      : undefined;
    return message;
  },
};

function createBaseDataAttributeUpdatedEvent(): DataAttributeUpdatedEvent {
  return { data: undefined };
}

export const DataAttributeUpdatedEvent: MessageFns<DataAttributeUpdatedEvent> = {
  encode(message: DataAttributeUpdatedEvent, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.data !== undefined) {
      DataAttributeEventData.encode(message.data, writer.uint32(10).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): DataAttributeUpdatedEvent {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    const end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseDataAttributeUpdatedEvent();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.data = DataAttributeEventData.decode(reader, reader.uint32());
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): DataAttributeUpdatedEvent {
    return { data: isSet(object.data) ? DataAttributeEventData.fromJSON(object.data) : undefined };
  },

  toJSON(message: DataAttributeUpdatedEvent): unknown {
    const obj: any = {};
    if (message.data !== undefined) {
      obj.data = DataAttributeEventData.toJSON(message.data);
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<DataAttributeUpdatedEvent>, I>>(base?: I): DataAttributeUpdatedEvent {
    return DataAttributeUpdatedEvent.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<DataAttributeUpdatedEvent>, I>>(object: I): DataAttributeUpdatedEvent {
    const message = createBaseDataAttributeUpdatedEvent();
    message.data = (object.data !== undefined && object.data !== null)
      ? DataAttributeEventData.fromPartial(object.data)
      : undefined;
    return message;
  },
};

function createBaseDataAttributeDeletedEvent(): DataAttributeDeletedEvent {
  return { data: undefined };
}

export const DataAttributeDeletedEvent: MessageFns<DataAttributeDeletedEvent> = {
  encode(message: DataAttributeDeletedEvent, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.data !== undefined) {
      DataAttributeEventData.encode(message.data, writer.uint32(10).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): DataAttributeDeletedEvent {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    const end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseDataAttributeDeletedEvent();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.data = DataAttributeEventData.decode(reader, reader.uint32());
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): DataAttributeDeletedEvent {
    return { data: isSet(object.data) ? DataAttributeEventData.fromJSON(object.data) : undefined };
  },

  toJSON(message: DataAttributeDeletedEvent): unknown {
    const obj: any = {};
    if (message.data !== undefined) {
      obj.data = DataAttributeEventData.toJSON(message.data);
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<DataAttributeDeletedEvent>, I>>(base?: I): DataAttributeDeletedEvent {
    return DataAttributeDeletedEvent.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<DataAttributeDeletedEvent>, I>>(object: I): DataAttributeDeletedEvent {
    const message = createBaseDataAttributeDeletedEvent();
    message.data = (object.data !== undefined && object.data !== null)
      ? DataAttributeEventData.fromPartial(object.data)
      : undefined;
    return message;
  },
};

function createBaseDataScanCreatedEvent(): DataScanCreatedEvent {
  return { data: undefined };
}

export const DataScanCreatedEvent: MessageFns<DataScanCreatedEvent> = {
  encode(message: DataScanCreatedEvent, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.data !== undefined) {
      DataScanEventData.encode(message.data, writer.uint32(10).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): DataScanCreatedEvent {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    const end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseDataScanCreatedEvent();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.data = DataScanEventData.decode(reader, reader.uint32());
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): DataScanCreatedEvent {
    return { data: isSet(object.data) ? DataScanEventData.fromJSON(object.data) : undefined };
  },

  toJSON(message: DataScanCreatedEvent): unknown {
    const obj: any = {};
    if (message.data !== undefined) {
      obj.data = DataScanEventData.toJSON(message.data);
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<DataScanCreatedEvent>, I>>(base?: I): DataScanCreatedEvent {
    return DataScanCreatedEvent.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<DataScanCreatedEvent>, I>>(object: I): DataScanCreatedEvent {
    const message = createBaseDataScanCreatedEvent();
    message.data = (object.data !== undefined && object.data !== null)
      ? DataScanEventData.fromPartial(object.data)
      : undefined;
    return message;
  },
};

function createBaseDataScanUpdatedEvent(): DataScanUpdatedEvent {
  return { data: undefined };
}

export const DataScanUpdatedEvent: MessageFns<DataScanUpdatedEvent> = {
  encode(message: DataScanUpdatedEvent, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.data !== undefined) {
      DataScanEventData.encode(message.data, writer.uint32(10).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): DataScanUpdatedEvent {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    const end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseDataScanUpdatedEvent();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.data = DataScanEventData.decode(reader, reader.uint32());
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): DataScanUpdatedEvent {
    return { data: isSet(object.data) ? DataScanEventData.fromJSON(object.data) : undefined };
  },

  toJSON(message: DataScanUpdatedEvent): unknown {
    const obj: any = {};
    if (message.data !== undefined) {
      obj.data = DataScanEventData.toJSON(message.data);
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<DataScanUpdatedEvent>, I>>(base?: I): DataScanUpdatedEvent {
    return DataScanUpdatedEvent.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<DataScanUpdatedEvent>, I>>(object: I): DataScanUpdatedEvent {
    const message = createBaseDataScanUpdatedEvent();
    message.data = (object.data !== undefined && object.data !== null)
      ? DataScanEventData.fromPartial(object.data)
      : undefined;
    return message;
  },
};

function createBaseDataScanDeletedEvent(): DataScanDeletedEvent {
  return { data: undefined };
}

export const DataScanDeletedEvent: MessageFns<DataScanDeletedEvent> = {
  encode(message: DataScanDeletedEvent, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.data !== undefined) {
      DataScanEventData.encode(message.data, writer.uint32(10).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): DataScanDeletedEvent {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    const end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseDataScanDeletedEvent();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.data = DataScanEventData.decode(reader, reader.uint32());
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): DataScanDeletedEvent {
    return { data: isSet(object.data) ? DataScanEventData.fromJSON(object.data) : undefined };
  },

  toJSON(message: DataScanDeletedEvent): unknown {
    const obj: any = {};
    if (message.data !== undefined) {
      obj.data = DataScanEventData.toJSON(message.data);
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<DataScanDeletedEvent>, I>>(base?: I): DataScanDeletedEvent {
    return DataScanDeletedEvent.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<DataScanDeletedEvent>, I>>(object: I): DataScanDeletedEvent {
    const message = createBaseDataScanDeletedEvent();
    message.data = (object.data !== undefined && object.data !== null)
      ? DataScanEventData.fromPartial(object.data)
      : undefined;
    return message;
  },
};

function createBaseLakeCreatedEvent(): LakeCreatedEvent {
  return { data: undefined };
}

export const LakeCreatedEvent: MessageFns<LakeCreatedEvent> = {
  encode(message: LakeCreatedEvent, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.data !== undefined) {
      LakeEventData.encode(message.data, writer.uint32(10).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): LakeCreatedEvent {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    const end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseLakeCreatedEvent();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.data = LakeEventData.decode(reader, reader.uint32());
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): LakeCreatedEvent {
    return { data: isSet(object.data) ? LakeEventData.fromJSON(object.data) : undefined };
  },

  toJSON(message: LakeCreatedEvent): unknown {
    const obj: any = {};
    if (message.data !== undefined) {
      obj.data = LakeEventData.toJSON(message.data);
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<LakeCreatedEvent>, I>>(base?: I): LakeCreatedEvent {
    return LakeCreatedEvent.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<LakeCreatedEvent>, I>>(object: I): LakeCreatedEvent {
    const message = createBaseLakeCreatedEvent();
    message.data = (object.data !== undefined && object.data !== null)
      ? LakeEventData.fromPartial(object.data)
      : undefined;
    return message;
  },
};

function createBaseLakeUpdatedEvent(): LakeUpdatedEvent {
  return { data: undefined };
}

export const LakeUpdatedEvent: MessageFns<LakeUpdatedEvent> = {
  encode(message: LakeUpdatedEvent, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.data !== undefined) {
      LakeEventData.encode(message.data, writer.uint32(10).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): LakeUpdatedEvent {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    const end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseLakeUpdatedEvent();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.data = LakeEventData.decode(reader, reader.uint32());
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): LakeUpdatedEvent {
    return { data: isSet(object.data) ? LakeEventData.fromJSON(object.data) : undefined };
  },

  toJSON(message: LakeUpdatedEvent): unknown {
    const obj: any = {};
    if (message.data !== undefined) {
      obj.data = LakeEventData.toJSON(message.data);
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<LakeUpdatedEvent>, I>>(base?: I): LakeUpdatedEvent {
    return LakeUpdatedEvent.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<LakeUpdatedEvent>, I>>(object: I): LakeUpdatedEvent {
    const message = createBaseLakeUpdatedEvent();
    message.data = (object.data !== undefined && object.data !== null)
      ? LakeEventData.fromPartial(object.data)
      : undefined;
    return message;
  },
};

function createBaseLakeDeletedEvent(): LakeDeletedEvent {
  return { data: undefined };
}

export const LakeDeletedEvent: MessageFns<LakeDeletedEvent> = {
  encode(message: LakeDeletedEvent, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.data !== undefined) {
      LakeEventData.encode(message.data, writer.uint32(10).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): LakeDeletedEvent {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    const end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseLakeDeletedEvent();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.data = LakeEventData.decode(reader, reader.uint32());
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): LakeDeletedEvent {
    return { data: isSet(object.data) ? LakeEventData.fromJSON(object.data) : undefined };
  },

  toJSON(message: LakeDeletedEvent): unknown {
    const obj: any = {};
    if (message.data !== undefined) {
      obj.data = LakeEventData.toJSON(message.data);
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<LakeDeletedEvent>, I>>(base?: I): LakeDeletedEvent {
    return LakeDeletedEvent.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<LakeDeletedEvent>, I>>(object: I): LakeDeletedEvent {
    const message = createBaseLakeDeletedEvent();
    message.data = (object.data !== undefined && object.data !== null)
      ? LakeEventData.fromPartial(object.data)
      : undefined;
    return message;
  },
};

function createBaseZoneCreatedEvent(): ZoneCreatedEvent {
  return { data: undefined };
}

export const ZoneCreatedEvent: MessageFns<ZoneCreatedEvent> = {
  encode(message: ZoneCreatedEvent, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.data !== undefined) {
      ZoneEventData.encode(message.data, writer.uint32(10).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): ZoneCreatedEvent {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    const end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseZoneCreatedEvent();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.data = ZoneEventData.decode(reader, reader.uint32());
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): ZoneCreatedEvent {
    return { data: isSet(object.data) ? ZoneEventData.fromJSON(object.data) : undefined };
  },

  toJSON(message: ZoneCreatedEvent): unknown {
    const obj: any = {};
    if (message.data !== undefined) {
      obj.data = ZoneEventData.toJSON(message.data);
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<ZoneCreatedEvent>, I>>(base?: I): ZoneCreatedEvent {
    return ZoneCreatedEvent.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<ZoneCreatedEvent>, I>>(object: I): ZoneCreatedEvent {
    const message = createBaseZoneCreatedEvent();
    message.data = (object.data !== undefined && object.data !== null)
      ? ZoneEventData.fromPartial(object.data)
      : undefined;
    return message;
  },
};

function createBaseZoneUpdatedEvent(): ZoneUpdatedEvent {
  return { data: undefined };
}

export const ZoneUpdatedEvent: MessageFns<ZoneUpdatedEvent> = {
  encode(message: ZoneUpdatedEvent, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.data !== undefined) {
      ZoneEventData.encode(message.data, writer.uint32(10).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): ZoneUpdatedEvent {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    const end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseZoneUpdatedEvent();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.data = ZoneEventData.decode(reader, reader.uint32());
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): ZoneUpdatedEvent {
    return { data: isSet(object.data) ? ZoneEventData.fromJSON(object.data) : undefined };
  },

  toJSON(message: ZoneUpdatedEvent): unknown {
    const obj: any = {};
    if (message.data !== undefined) {
      obj.data = ZoneEventData.toJSON(message.data);
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<ZoneUpdatedEvent>, I>>(base?: I): ZoneUpdatedEvent {
    return ZoneUpdatedEvent.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<ZoneUpdatedEvent>, I>>(object: I): ZoneUpdatedEvent {
    const message = createBaseZoneUpdatedEvent();
    message.data = (object.data !== undefined && object.data !== null)
      ? ZoneEventData.fromPartial(object.data)
      : undefined;
    return message;
  },
};

function createBaseZoneDeletedEvent(): ZoneDeletedEvent {
  return { data: undefined };
}

export const ZoneDeletedEvent: MessageFns<ZoneDeletedEvent> = {
  encode(message: ZoneDeletedEvent, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.data !== undefined) {
      ZoneEventData.encode(message.data, writer.uint32(10).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): ZoneDeletedEvent {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    const end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseZoneDeletedEvent();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.data = ZoneEventData.decode(reader, reader.uint32());
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): ZoneDeletedEvent {
    return { data: isSet(object.data) ? ZoneEventData.fromJSON(object.data) : undefined };
  },

  toJSON(message: ZoneDeletedEvent): unknown {
    const obj: any = {};
    if (message.data !== undefined) {
      obj.data = ZoneEventData.toJSON(message.data);
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<ZoneDeletedEvent>, I>>(base?: I): ZoneDeletedEvent {
    return ZoneDeletedEvent.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<ZoneDeletedEvent>, I>>(object: I): ZoneDeletedEvent {
    const message = createBaseZoneDeletedEvent();
    message.data = (object.data !== undefined && object.data !== null)
      ? ZoneEventData.fromPartial(object.data)
      : undefined;
    return message;
  },
};

function createBaseAssetCreatedEvent(): AssetCreatedEvent {
  return { data: undefined };
}

export const AssetCreatedEvent: MessageFns<AssetCreatedEvent> = {
  encode(message: AssetCreatedEvent, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.data !== undefined) {
      AssetEventData.encode(message.data, writer.uint32(10).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): AssetCreatedEvent {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    const end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseAssetCreatedEvent();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.data = AssetEventData.decode(reader, reader.uint32());
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): AssetCreatedEvent {
    return { data: isSet(object.data) ? AssetEventData.fromJSON(object.data) : undefined };
  },

  toJSON(message: AssetCreatedEvent): unknown {
    const obj: any = {};
    if (message.data !== undefined) {
      obj.data = AssetEventData.toJSON(message.data);
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<AssetCreatedEvent>, I>>(base?: I): AssetCreatedEvent {
    return AssetCreatedEvent.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<AssetCreatedEvent>, I>>(object: I): AssetCreatedEvent {
    const message = createBaseAssetCreatedEvent();
    message.data = (object.data !== undefined && object.data !== null)
      ? AssetEventData.fromPartial(object.data)
      : undefined;
    return message;
  },
};

function createBaseAssetUpdatedEvent(): AssetUpdatedEvent {
  return { data: undefined };
}

export const AssetUpdatedEvent: MessageFns<AssetUpdatedEvent> = {
  encode(message: AssetUpdatedEvent, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.data !== undefined) {
      AssetEventData.encode(message.data, writer.uint32(10).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): AssetUpdatedEvent {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    const end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseAssetUpdatedEvent();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.data = AssetEventData.decode(reader, reader.uint32());
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): AssetUpdatedEvent {
    return { data: isSet(object.data) ? AssetEventData.fromJSON(object.data) : undefined };
  },

  toJSON(message: AssetUpdatedEvent): unknown {
    const obj: any = {};
    if (message.data !== undefined) {
      obj.data = AssetEventData.toJSON(message.data);
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<AssetUpdatedEvent>, I>>(base?: I): AssetUpdatedEvent {
    return AssetUpdatedEvent.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<AssetUpdatedEvent>, I>>(object: I): AssetUpdatedEvent {
    const message = createBaseAssetUpdatedEvent();
    message.data = (object.data !== undefined && object.data !== null)
      ? AssetEventData.fromPartial(object.data)
      : undefined;
    return message;
  },
};

function createBaseAssetDeletedEvent(): AssetDeletedEvent {
  return { data: undefined };
}

export const AssetDeletedEvent: MessageFns<AssetDeletedEvent> = {
  encode(message: AssetDeletedEvent, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.data !== undefined) {
      AssetEventData.encode(message.data, writer.uint32(10).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): AssetDeletedEvent {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    const end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseAssetDeletedEvent();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.data = AssetEventData.decode(reader, reader.uint32());
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): AssetDeletedEvent {
    return { data: isSet(object.data) ? AssetEventData.fromJSON(object.data) : undefined };
  },

  toJSON(message: AssetDeletedEvent): unknown {
    const obj: any = {};
    if (message.data !== undefined) {
      obj.data = AssetEventData.toJSON(message.data);
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<AssetDeletedEvent>, I>>(base?: I): AssetDeletedEvent {
    return AssetDeletedEvent.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<AssetDeletedEvent>, I>>(object: I): AssetDeletedEvent {
    const message = createBaseAssetDeletedEvent();
    message.data = (object.data !== undefined && object.data !== null)
      ? AssetEventData.fromPartial(object.data)
      : undefined;
    return message;
  },
};

function createBaseTaskCreatedEvent(): TaskCreatedEvent {
  return { data: undefined };
}

export const TaskCreatedEvent: MessageFns<TaskCreatedEvent> = {
  encode(message: TaskCreatedEvent, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.data !== undefined) {
      TaskEventData.encode(message.data, writer.uint32(10).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): TaskCreatedEvent {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    const end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseTaskCreatedEvent();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.data = TaskEventData.decode(reader, reader.uint32());
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): TaskCreatedEvent {
    return { data: isSet(object.data) ? TaskEventData.fromJSON(object.data) : undefined };
  },

  toJSON(message: TaskCreatedEvent): unknown {
    const obj: any = {};
    if (message.data !== undefined) {
      obj.data = TaskEventData.toJSON(message.data);
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<TaskCreatedEvent>, I>>(base?: I): TaskCreatedEvent {
    return TaskCreatedEvent.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<TaskCreatedEvent>, I>>(object: I): TaskCreatedEvent {
    const message = createBaseTaskCreatedEvent();
    message.data = (object.data !== undefined && object.data !== null)
      ? TaskEventData.fromPartial(object.data)
      : undefined;
    return message;
  },
};

function createBaseTaskUpdatedEvent(): TaskUpdatedEvent {
  return { data: undefined };
}

export const TaskUpdatedEvent: MessageFns<TaskUpdatedEvent> = {
  encode(message: TaskUpdatedEvent, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.data !== undefined) {
      TaskEventData.encode(message.data, writer.uint32(10).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): TaskUpdatedEvent {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    const end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseTaskUpdatedEvent();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.data = TaskEventData.decode(reader, reader.uint32());
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): TaskUpdatedEvent {
    return { data: isSet(object.data) ? TaskEventData.fromJSON(object.data) : undefined };
  },

  toJSON(message: TaskUpdatedEvent): unknown {
    const obj: any = {};
    if (message.data !== undefined) {
      obj.data = TaskEventData.toJSON(message.data);
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<TaskUpdatedEvent>, I>>(base?: I): TaskUpdatedEvent {
    return TaskUpdatedEvent.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<TaskUpdatedEvent>, I>>(object: I): TaskUpdatedEvent {
    const message = createBaseTaskUpdatedEvent();
    message.data = (object.data !== undefined && object.data !== null)
      ? TaskEventData.fromPartial(object.data)
      : undefined;
    return message;
  },
};

function createBaseTaskDeletedEvent(): TaskDeletedEvent {
  return { data: undefined };
}

export const TaskDeletedEvent: MessageFns<TaskDeletedEvent> = {
  encode(message: TaskDeletedEvent, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.data !== undefined) {
      TaskEventData.encode(message.data, writer.uint32(10).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): TaskDeletedEvent {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    const end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseTaskDeletedEvent();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.data = TaskEventData.decode(reader, reader.uint32());
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): TaskDeletedEvent {
    return { data: isSet(object.data) ? TaskEventData.fromJSON(object.data) : undefined };
  },

  toJSON(message: TaskDeletedEvent): unknown {
    const obj: any = {};
    if (message.data !== undefined) {
      obj.data = TaskEventData.toJSON(message.data);
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<TaskDeletedEvent>, I>>(base?: I): TaskDeletedEvent {
    return TaskDeletedEvent.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<TaskDeletedEvent>, I>>(object: I): TaskDeletedEvent {
    const message = createBaseTaskDeletedEvent();
    message.data = (object.data !== undefined && object.data !== null)
      ? TaskEventData.fromPartial(object.data)
      : undefined;
    return message;
  },
};

function createBaseEnvironmentCreatedEvent(): EnvironmentCreatedEvent {
  return { data: undefined };
}

export const EnvironmentCreatedEvent: MessageFns<EnvironmentCreatedEvent> = {
  encode(message: EnvironmentCreatedEvent, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.data !== undefined) {
      EnvironmentEventData.encode(message.data, writer.uint32(10).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): EnvironmentCreatedEvent {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    const end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseEnvironmentCreatedEvent();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.data = EnvironmentEventData.decode(reader, reader.uint32());
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): EnvironmentCreatedEvent {
    return { data: isSet(object.data) ? EnvironmentEventData.fromJSON(object.data) : undefined };
  },

  toJSON(message: EnvironmentCreatedEvent): unknown {
    const obj: any = {};
    if (message.data !== undefined) {
      obj.data = EnvironmentEventData.toJSON(message.data);
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<EnvironmentCreatedEvent>, I>>(base?: I): EnvironmentCreatedEvent {
    return EnvironmentCreatedEvent.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<EnvironmentCreatedEvent>, I>>(object: I): EnvironmentCreatedEvent {
    const message = createBaseEnvironmentCreatedEvent();
    message.data = (object.data !== undefined && object.data !== null)
      ? EnvironmentEventData.fromPartial(object.data)
      : undefined;
    return message;
  },
};

function createBaseEnvironmentUpdatedEvent(): EnvironmentUpdatedEvent {
  return { data: undefined };
}

export const EnvironmentUpdatedEvent: MessageFns<EnvironmentUpdatedEvent> = {
  encode(message: EnvironmentUpdatedEvent, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.data !== undefined) {
      EnvironmentEventData.encode(message.data, writer.uint32(10).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): EnvironmentUpdatedEvent {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    const end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseEnvironmentUpdatedEvent();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.data = EnvironmentEventData.decode(reader, reader.uint32());
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): EnvironmentUpdatedEvent {
    return { data: isSet(object.data) ? EnvironmentEventData.fromJSON(object.data) : undefined };
  },

  toJSON(message: EnvironmentUpdatedEvent): unknown {
    const obj: any = {};
    if (message.data !== undefined) {
      obj.data = EnvironmentEventData.toJSON(message.data);
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<EnvironmentUpdatedEvent>, I>>(base?: I): EnvironmentUpdatedEvent {
    return EnvironmentUpdatedEvent.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<EnvironmentUpdatedEvent>, I>>(object: I): EnvironmentUpdatedEvent {
    const message = createBaseEnvironmentUpdatedEvent();
    message.data = (object.data !== undefined && object.data !== null)
      ? EnvironmentEventData.fromPartial(object.data)
      : undefined;
    return message;
  },
};

function createBaseEnvironmentDeletedEvent(): EnvironmentDeletedEvent {
  return { data: undefined };
}

export const EnvironmentDeletedEvent: MessageFns<EnvironmentDeletedEvent> = {
  encode(message: EnvironmentDeletedEvent, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.data !== undefined) {
      EnvironmentEventData.encode(message.data, writer.uint32(10).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): EnvironmentDeletedEvent {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    const end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseEnvironmentDeletedEvent();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.data = EnvironmentEventData.decode(reader, reader.uint32());
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): EnvironmentDeletedEvent {
    return { data: isSet(object.data) ? EnvironmentEventData.fromJSON(object.data) : undefined };
  },

  toJSON(message: EnvironmentDeletedEvent): unknown {
    const obj: any = {};
    if (message.data !== undefined) {
      obj.data = EnvironmentEventData.toJSON(message.data);
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<EnvironmentDeletedEvent>, I>>(base?: I): EnvironmentDeletedEvent {
    return EnvironmentDeletedEvent.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<EnvironmentDeletedEvent>, I>>(object: I): EnvironmentDeletedEvent {
    const message = createBaseEnvironmentDeletedEvent();
    message.data = (object.data !== undefined && object.data !== null)
      ? EnvironmentEventData.fromPartial(object.data)
      : undefined;
    return message;
  },
};

type Builtin = Date | Function | Uint8Array | string | number | boolean | undefined;

export type DeepPartial<T> = T extends Builtin ? T
  : T extends Long ? string | number | Long : T extends globalThis.Array<infer U> ? globalThis.Array<DeepPartial<U>>
  : T extends ReadonlyArray<infer U> ? ReadonlyArray<DeepPartial<U>>
  : T extends {} ? { [K in keyof T]?: DeepPartial<T[K]> }
  : Partial<T>;

type KeysOfUnion<T> = T extends T ? keyof T : never;
export type Exact<P, I extends P> = P extends Builtin ? P
  : P & { [K in keyof P]: Exact<P[K], I[K]> } & { [K in Exclude<keyof I, KeysOfUnion<P>>]: never };

function isSet(value: any): boolean {
  return value !== null && value !== undefined;
}

export interface MessageFns<T> {
  encode(message: T, writer?: BinaryWriter): BinaryWriter;
  decode(input: BinaryReader | Uint8Array, length?: number): T;
  fromJSON(object: any): T;
  toJSON(message: T): unknown;
  create<I extends Exact<DeepPartial<T>, I>>(base?: I): T;
  fromPartial<I extends Exact<DeepPartial<T>, I>>(object: I): T;
}
