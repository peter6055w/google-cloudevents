// Code generated by protoc-gen-ts_proto. DO NOT EDIT.
// versions:
//   protoc-gen-ts_proto  v2.7.7
//   protoc               v6.32.0
// source: google/events/cloud/datastore/v1/events.proto

/* eslint-disable */
import { BinaryReader, BinaryWriter } from "@bufbuild/protobuf/wire";
import Long from "long";
import { EntityEventData } from "./data";

export const protobufPackage = "google.events.cloud.datastore.v1";

/** The CloudEvent is raised when a Firestore entity is created. */
export interface EntityCreatedEvent {
  /** The data associated with the event. */
  data?: EntityEventData | undefined;
}

/** The CloudEvent is raised when a Firestore entity is updated. */
export interface EntityUpdatedEvent {
  /** The data associated with the event. */
  data?: EntityEventData | undefined;
}

/** The CloudEvent is raised when a Firestore entity is deleted. */
export interface EntityDeletedEvent {
  /** The data associated with the event. */
  data?: EntityEventData | undefined;
}

/**
 * The CloudEvent is raised when a Firestore entity is created, updated or
 * deleted.
 */
export interface EntityWrittenEvent {
  /** The data associated with the event. */
  data?: EntityEventData | undefined;
}

/**
 * The CloudEvent with Auth Context is raised when a Firestore entity is
 * created.
 */
export interface EntityCreatedEventWithAuthContext {
  /** The data associated with the event. */
  data?: EntityEventData | undefined;
}

/**
 * The CloudEvent with Auth Context is raised when a Firestore entity is
 * updated.
 */
export interface EntityUpdatedEventWithAuthContext {
  /** The data associated with the event. */
  data?: EntityEventData | undefined;
}

/**
 * The CloudEvent with Auth Context is raised when a Firestore entity is
 * deleted.
 */
export interface EntityDeletedEventWithAuthContext {
  /** The data associated with the event. */
  data?: EntityEventData | undefined;
}

/**
 * The CloudEvent with Auth Context is raised when a Firestore entity is
 * created, updated or deleted.
 */
export interface EntityWrittenEventWithAuthContext {
  /** The data associated with the event. */
  data?: EntityEventData | undefined;
}

function createBaseEntityCreatedEvent(): EntityCreatedEvent {
  return { data: undefined };
}

export const EntityCreatedEvent: MessageFns<EntityCreatedEvent> = {
  encode(message: EntityCreatedEvent, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.data !== undefined) {
      EntityEventData.encode(message.data, writer.uint32(10).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): EntityCreatedEvent {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    const end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseEntityCreatedEvent();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.data = EntityEventData.decode(reader, reader.uint32());
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): EntityCreatedEvent {
    return { data: isSet(object.data) ? EntityEventData.fromJSON(object.data) : undefined };
  },

  toJSON(message: EntityCreatedEvent): unknown {
    const obj: any = {};
    if (message.data !== undefined) {
      obj.data = EntityEventData.toJSON(message.data);
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<EntityCreatedEvent>, I>>(base?: I): EntityCreatedEvent {
    return EntityCreatedEvent.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<EntityCreatedEvent>, I>>(object: I): EntityCreatedEvent {
    const message = createBaseEntityCreatedEvent();
    message.data = (object.data !== undefined && object.data !== null)
      ? EntityEventData.fromPartial(object.data)
      : undefined;
    return message;
  },
};

function createBaseEntityUpdatedEvent(): EntityUpdatedEvent {
  return { data: undefined };
}

export const EntityUpdatedEvent: MessageFns<EntityUpdatedEvent> = {
  encode(message: EntityUpdatedEvent, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.data !== undefined) {
      EntityEventData.encode(message.data, writer.uint32(10).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): EntityUpdatedEvent {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    const end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseEntityUpdatedEvent();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.data = EntityEventData.decode(reader, reader.uint32());
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): EntityUpdatedEvent {
    return { data: isSet(object.data) ? EntityEventData.fromJSON(object.data) : undefined };
  },

  toJSON(message: EntityUpdatedEvent): unknown {
    const obj: any = {};
    if (message.data !== undefined) {
      obj.data = EntityEventData.toJSON(message.data);
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<EntityUpdatedEvent>, I>>(base?: I): EntityUpdatedEvent {
    return EntityUpdatedEvent.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<EntityUpdatedEvent>, I>>(object: I): EntityUpdatedEvent {
    const message = createBaseEntityUpdatedEvent();
    message.data = (object.data !== undefined && object.data !== null)
      ? EntityEventData.fromPartial(object.data)
      : undefined;
    return message;
  },
};

function createBaseEntityDeletedEvent(): EntityDeletedEvent {
  return { data: undefined };
}

export const EntityDeletedEvent: MessageFns<EntityDeletedEvent> = {
  encode(message: EntityDeletedEvent, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.data !== undefined) {
      EntityEventData.encode(message.data, writer.uint32(10).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): EntityDeletedEvent {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    const end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseEntityDeletedEvent();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.data = EntityEventData.decode(reader, reader.uint32());
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): EntityDeletedEvent {
    return { data: isSet(object.data) ? EntityEventData.fromJSON(object.data) : undefined };
  },

  toJSON(message: EntityDeletedEvent): unknown {
    const obj: any = {};
    if (message.data !== undefined) {
      obj.data = EntityEventData.toJSON(message.data);
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<EntityDeletedEvent>, I>>(base?: I): EntityDeletedEvent {
    return EntityDeletedEvent.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<EntityDeletedEvent>, I>>(object: I): EntityDeletedEvent {
    const message = createBaseEntityDeletedEvent();
    message.data = (object.data !== undefined && object.data !== null)
      ? EntityEventData.fromPartial(object.data)
      : undefined;
    return message;
  },
};

function createBaseEntityWrittenEvent(): EntityWrittenEvent {
  return { data: undefined };
}

export const EntityWrittenEvent: MessageFns<EntityWrittenEvent> = {
  encode(message: EntityWrittenEvent, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.data !== undefined) {
      EntityEventData.encode(message.data, writer.uint32(10).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): EntityWrittenEvent {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    const end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseEntityWrittenEvent();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.data = EntityEventData.decode(reader, reader.uint32());
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): EntityWrittenEvent {
    return { data: isSet(object.data) ? EntityEventData.fromJSON(object.data) : undefined };
  },

  toJSON(message: EntityWrittenEvent): unknown {
    const obj: any = {};
    if (message.data !== undefined) {
      obj.data = EntityEventData.toJSON(message.data);
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<EntityWrittenEvent>, I>>(base?: I): EntityWrittenEvent {
    return EntityWrittenEvent.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<EntityWrittenEvent>, I>>(object: I): EntityWrittenEvent {
    const message = createBaseEntityWrittenEvent();
    message.data = (object.data !== undefined && object.data !== null)
      ? EntityEventData.fromPartial(object.data)
      : undefined;
    return message;
  },
};

function createBaseEntityCreatedEventWithAuthContext(): EntityCreatedEventWithAuthContext {
  return { data: undefined };
}

export const EntityCreatedEventWithAuthContext: MessageFns<EntityCreatedEventWithAuthContext> = {
  encode(message: EntityCreatedEventWithAuthContext, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.data !== undefined) {
      EntityEventData.encode(message.data, writer.uint32(10).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): EntityCreatedEventWithAuthContext {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    const end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseEntityCreatedEventWithAuthContext();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.data = EntityEventData.decode(reader, reader.uint32());
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): EntityCreatedEventWithAuthContext {
    return { data: isSet(object.data) ? EntityEventData.fromJSON(object.data) : undefined };
  },

  toJSON(message: EntityCreatedEventWithAuthContext): unknown {
    const obj: any = {};
    if (message.data !== undefined) {
      obj.data = EntityEventData.toJSON(message.data);
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<EntityCreatedEventWithAuthContext>, I>>(
    base?: I,
  ): EntityCreatedEventWithAuthContext {
    return EntityCreatedEventWithAuthContext.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<EntityCreatedEventWithAuthContext>, I>>(
    object: I,
  ): EntityCreatedEventWithAuthContext {
    const message = createBaseEntityCreatedEventWithAuthContext();
    message.data = (object.data !== undefined && object.data !== null)
      ? EntityEventData.fromPartial(object.data)
      : undefined;
    return message;
  },
};

function createBaseEntityUpdatedEventWithAuthContext(): EntityUpdatedEventWithAuthContext {
  return { data: undefined };
}

export const EntityUpdatedEventWithAuthContext: MessageFns<EntityUpdatedEventWithAuthContext> = {
  encode(message: EntityUpdatedEventWithAuthContext, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.data !== undefined) {
      EntityEventData.encode(message.data, writer.uint32(10).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): EntityUpdatedEventWithAuthContext {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    const end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseEntityUpdatedEventWithAuthContext();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.data = EntityEventData.decode(reader, reader.uint32());
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): EntityUpdatedEventWithAuthContext {
    return { data: isSet(object.data) ? EntityEventData.fromJSON(object.data) : undefined };
  },

  toJSON(message: EntityUpdatedEventWithAuthContext): unknown {
    const obj: any = {};
    if (message.data !== undefined) {
      obj.data = EntityEventData.toJSON(message.data);
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<EntityUpdatedEventWithAuthContext>, I>>(
    base?: I,
  ): EntityUpdatedEventWithAuthContext {
    return EntityUpdatedEventWithAuthContext.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<EntityUpdatedEventWithAuthContext>, I>>(
    object: I,
  ): EntityUpdatedEventWithAuthContext {
    const message = createBaseEntityUpdatedEventWithAuthContext();
    message.data = (object.data !== undefined && object.data !== null)
      ? EntityEventData.fromPartial(object.data)
      : undefined;
    return message;
  },
};

function createBaseEntityDeletedEventWithAuthContext(): EntityDeletedEventWithAuthContext {
  return { data: undefined };
}

export const EntityDeletedEventWithAuthContext: MessageFns<EntityDeletedEventWithAuthContext> = {
  encode(message: EntityDeletedEventWithAuthContext, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.data !== undefined) {
      EntityEventData.encode(message.data, writer.uint32(10).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): EntityDeletedEventWithAuthContext {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    const end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseEntityDeletedEventWithAuthContext();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.data = EntityEventData.decode(reader, reader.uint32());
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): EntityDeletedEventWithAuthContext {
    return { data: isSet(object.data) ? EntityEventData.fromJSON(object.data) : undefined };
  },

  toJSON(message: EntityDeletedEventWithAuthContext): unknown {
    const obj: any = {};
    if (message.data !== undefined) {
      obj.data = EntityEventData.toJSON(message.data);
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<EntityDeletedEventWithAuthContext>, I>>(
    base?: I,
  ): EntityDeletedEventWithAuthContext {
    return EntityDeletedEventWithAuthContext.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<EntityDeletedEventWithAuthContext>, I>>(
    object: I,
  ): EntityDeletedEventWithAuthContext {
    const message = createBaseEntityDeletedEventWithAuthContext();
    message.data = (object.data !== undefined && object.data !== null)
      ? EntityEventData.fromPartial(object.data)
      : undefined;
    return message;
  },
};

function createBaseEntityWrittenEventWithAuthContext(): EntityWrittenEventWithAuthContext {
  return { data: undefined };
}

export const EntityWrittenEventWithAuthContext: MessageFns<EntityWrittenEventWithAuthContext> = {
  encode(message: EntityWrittenEventWithAuthContext, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.data !== undefined) {
      EntityEventData.encode(message.data, writer.uint32(10).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): EntityWrittenEventWithAuthContext {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    const end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseEntityWrittenEventWithAuthContext();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.data = EntityEventData.decode(reader, reader.uint32());
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): EntityWrittenEventWithAuthContext {
    return { data: isSet(object.data) ? EntityEventData.fromJSON(object.data) : undefined };
  },

  toJSON(message: EntityWrittenEventWithAuthContext): unknown {
    const obj: any = {};
    if (message.data !== undefined) {
      obj.data = EntityEventData.toJSON(message.data);
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<EntityWrittenEventWithAuthContext>, I>>(
    base?: I,
  ): EntityWrittenEventWithAuthContext {
    return EntityWrittenEventWithAuthContext.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<EntityWrittenEventWithAuthContext>, I>>(
    object: I,
  ): EntityWrittenEventWithAuthContext {
    const message = createBaseEntityWrittenEventWithAuthContext();
    message.data = (object.data !== undefined && object.data !== null)
      ? EntityEventData.fromPartial(object.data)
      : undefined;
    return message;
  },
};

type Builtin = Date | Function | Uint8Array | string | number | boolean | undefined;

export type DeepPartial<T> = T extends Builtin ? T
  : T extends Long ? string | number | Long : T extends globalThis.Array<infer U> ? globalThis.Array<DeepPartial<U>>
  : T extends ReadonlyArray<infer U> ? ReadonlyArray<DeepPartial<U>>
  : T extends {} ? { [K in keyof T]?: DeepPartial<T[K]> }
  : Partial<T>;

type KeysOfUnion<T> = T extends T ? keyof T : never;
export type Exact<P, I extends P> = P extends Builtin ? P
  : P & { [K in keyof P]: Exact<P[K], I[K]> } & { [K in Exclude<keyof I, KeysOfUnion<P>>]: never };

function isSet(value: any): boolean {
  return value !== null && value !== undefined;
}

export interface MessageFns<T> {
  encode(message: T, writer?: BinaryWriter): BinaryWriter;
  decode(input: BinaryReader | Uint8Array, length?: number): T;
  fromJSON(object: any): T;
  toJSON(message: T): unknown;
  create<I extends Exact<DeepPartial<T>, I>>(base?: I): T;
  fromPartial<I extends Exact<DeepPartial<T>, I>>(object: I): T;
}
