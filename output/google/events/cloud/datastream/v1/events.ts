// Code generated by protoc-gen-ts_proto. DO NOT EDIT.
// versions:
//   protoc-gen-ts_proto  v2.7.7
//   protoc               v6.32.0
// source: google/events/cloud/datastream/v1/events.proto

/* eslint-disable */
import { BinaryReader, BinaryWriter } from "@bufbuild/protobuf/wire";
import Long from "long";
import { ConnectionProfileEventData, PrivateConnectionEventData, RouteEventData, StreamEventData } from "./data";

export const protobufPackage = "google.events.cloud.datastream.v1";

/** The CloudEvent raised when a ConnectionProfile is created. */
export interface ConnectionProfileCreatedEvent {
  /** The data associated with the event. */
  data?: ConnectionProfileEventData | undefined;
}

/** The CloudEvent raised when a ConnectionProfile is updated. */
export interface ConnectionProfileUpdatedEvent {
  /** The data associated with the event. */
  data?: ConnectionProfileEventData | undefined;
}

/** The CloudEvent raised when a ConnectionProfile is deleted. */
export interface ConnectionProfileDeletedEvent {
  /** The data associated with the event. */
  data?: ConnectionProfileEventData | undefined;
}

/** The CloudEvent raised when a Stream is created. */
export interface StreamCreatedEvent {
  /** The data associated with the event. */
  data?: StreamEventData | undefined;
}

/** The CloudEvent raised when a Stream is updated. */
export interface StreamUpdatedEvent {
  /** The data associated with the event. */
  data?: StreamEventData | undefined;
}

/** The CloudEvent raised when a Stream is deleted. */
export interface StreamDeletedEvent {
  /** The data associated with the event. */
  data?: StreamEventData | undefined;
}

/** The CloudEvent raised when a PrivateConnection is created. */
export interface PrivateConnectionCreatedEvent {
  /** The data associated with the event. */
  data?: PrivateConnectionEventData | undefined;
}

/** The CloudEvent raised when a PrivateConnection is deleted. */
export interface PrivateConnectionDeletedEvent {
  /** The data associated with the event. */
  data?: PrivateConnectionEventData | undefined;
}

/** The CloudEvent raised when a Route is created. */
export interface RouteCreatedEvent {
  /** The data associated with the event. */
  data?: RouteEventData | undefined;
}

/** The CloudEvent raised when a Route is deleted. */
export interface RouteDeletedEvent {
  /** The data associated with the event. */
  data?: RouteEventData | undefined;
}

function createBaseConnectionProfileCreatedEvent(): ConnectionProfileCreatedEvent {
  return { data: undefined };
}

export const ConnectionProfileCreatedEvent: MessageFns<ConnectionProfileCreatedEvent> = {
  encode(message: ConnectionProfileCreatedEvent, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.data !== undefined) {
      ConnectionProfileEventData.encode(message.data, writer.uint32(10).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): ConnectionProfileCreatedEvent {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    const end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseConnectionProfileCreatedEvent();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.data = ConnectionProfileEventData.decode(reader, reader.uint32());
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): ConnectionProfileCreatedEvent {
    return { data: isSet(object.data) ? ConnectionProfileEventData.fromJSON(object.data) : undefined };
  },

  toJSON(message: ConnectionProfileCreatedEvent): unknown {
    const obj: any = {};
    if (message.data !== undefined) {
      obj.data = ConnectionProfileEventData.toJSON(message.data);
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<ConnectionProfileCreatedEvent>, I>>(base?: I): ConnectionProfileCreatedEvent {
    return ConnectionProfileCreatedEvent.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<ConnectionProfileCreatedEvent>, I>>(
    object: I,
  ): ConnectionProfileCreatedEvent {
    const message = createBaseConnectionProfileCreatedEvent();
    message.data = (object.data !== undefined && object.data !== null)
      ? ConnectionProfileEventData.fromPartial(object.data)
      : undefined;
    return message;
  },
};

function createBaseConnectionProfileUpdatedEvent(): ConnectionProfileUpdatedEvent {
  return { data: undefined };
}

export const ConnectionProfileUpdatedEvent: MessageFns<ConnectionProfileUpdatedEvent> = {
  encode(message: ConnectionProfileUpdatedEvent, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.data !== undefined) {
      ConnectionProfileEventData.encode(message.data, writer.uint32(10).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): ConnectionProfileUpdatedEvent {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    const end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseConnectionProfileUpdatedEvent();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.data = ConnectionProfileEventData.decode(reader, reader.uint32());
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): ConnectionProfileUpdatedEvent {
    return { data: isSet(object.data) ? ConnectionProfileEventData.fromJSON(object.data) : undefined };
  },

  toJSON(message: ConnectionProfileUpdatedEvent): unknown {
    const obj: any = {};
    if (message.data !== undefined) {
      obj.data = ConnectionProfileEventData.toJSON(message.data);
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<ConnectionProfileUpdatedEvent>, I>>(base?: I): ConnectionProfileUpdatedEvent {
    return ConnectionProfileUpdatedEvent.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<ConnectionProfileUpdatedEvent>, I>>(
    object: I,
  ): ConnectionProfileUpdatedEvent {
    const message = createBaseConnectionProfileUpdatedEvent();
    message.data = (object.data !== undefined && object.data !== null)
      ? ConnectionProfileEventData.fromPartial(object.data)
      : undefined;
    return message;
  },
};

function createBaseConnectionProfileDeletedEvent(): ConnectionProfileDeletedEvent {
  return { data: undefined };
}

export const ConnectionProfileDeletedEvent: MessageFns<ConnectionProfileDeletedEvent> = {
  encode(message: ConnectionProfileDeletedEvent, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.data !== undefined) {
      ConnectionProfileEventData.encode(message.data, writer.uint32(10).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): ConnectionProfileDeletedEvent {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    const end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseConnectionProfileDeletedEvent();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.data = ConnectionProfileEventData.decode(reader, reader.uint32());
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): ConnectionProfileDeletedEvent {
    return { data: isSet(object.data) ? ConnectionProfileEventData.fromJSON(object.data) : undefined };
  },

  toJSON(message: ConnectionProfileDeletedEvent): unknown {
    const obj: any = {};
    if (message.data !== undefined) {
      obj.data = ConnectionProfileEventData.toJSON(message.data);
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<ConnectionProfileDeletedEvent>, I>>(base?: I): ConnectionProfileDeletedEvent {
    return ConnectionProfileDeletedEvent.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<ConnectionProfileDeletedEvent>, I>>(
    object: I,
  ): ConnectionProfileDeletedEvent {
    const message = createBaseConnectionProfileDeletedEvent();
    message.data = (object.data !== undefined && object.data !== null)
      ? ConnectionProfileEventData.fromPartial(object.data)
      : undefined;
    return message;
  },
};

function createBaseStreamCreatedEvent(): StreamCreatedEvent {
  return { data: undefined };
}

export const StreamCreatedEvent: MessageFns<StreamCreatedEvent> = {
  encode(message: StreamCreatedEvent, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.data !== undefined) {
      StreamEventData.encode(message.data, writer.uint32(10).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): StreamCreatedEvent {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    const end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseStreamCreatedEvent();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.data = StreamEventData.decode(reader, reader.uint32());
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): StreamCreatedEvent {
    return { data: isSet(object.data) ? StreamEventData.fromJSON(object.data) : undefined };
  },

  toJSON(message: StreamCreatedEvent): unknown {
    const obj: any = {};
    if (message.data !== undefined) {
      obj.data = StreamEventData.toJSON(message.data);
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<StreamCreatedEvent>, I>>(base?: I): StreamCreatedEvent {
    return StreamCreatedEvent.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<StreamCreatedEvent>, I>>(object: I): StreamCreatedEvent {
    const message = createBaseStreamCreatedEvent();
    message.data = (object.data !== undefined && object.data !== null)
      ? StreamEventData.fromPartial(object.data)
      : undefined;
    return message;
  },
};

function createBaseStreamUpdatedEvent(): StreamUpdatedEvent {
  return { data: undefined };
}

export const StreamUpdatedEvent: MessageFns<StreamUpdatedEvent> = {
  encode(message: StreamUpdatedEvent, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.data !== undefined) {
      StreamEventData.encode(message.data, writer.uint32(10).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): StreamUpdatedEvent {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    const end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseStreamUpdatedEvent();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.data = StreamEventData.decode(reader, reader.uint32());
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): StreamUpdatedEvent {
    return { data: isSet(object.data) ? StreamEventData.fromJSON(object.data) : undefined };
  },

  toJSON(message: StreamUpdatedEvent): unknown {
    const obj: any = {};
    if (message.data !== undefined) {
      obj.data = StreamEventData.toJSON(message.data);
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<StreamUpdatedEvent>, I>>(base?: I): StreamUpdatedEvent {
    return StreamUpdatedEvent.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<StreamUpdatedEvent>, I>>(object: I): StreamUpdatedEvent {
    const message = createBaseStreamUpdatedEvent();
    message.data = (object.data !== undefined && object.data !== null)
      ? StreamEventData.fromPartial(object.data)
      : undefined;
    return message;
  },
};

function createBaseStreamDeletedEvent(): StreamDeletedEvent {
  return { data: undefined };
}

export const StreamDeletedEvent: MessageFns<StreamDeletedEvent> = {
  encode(message: StreamDeletedEvent, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.data !== undefined) {
      StreamEventData.encode(message.data, writer.uint32(10).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): StreamDeletedEvent {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    const end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseStreamDeletedEvent();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.data = StreamEventData.decode(reader, reader.uint32());
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): StreamDeletedEvent {
    return { data: isSet(object.data) ? StreamEventData.fromJSON(object.data) : undefined };
  },

  toJSON(message: StreamDeletedEvent): unknown {
    const obj: any = {};
    if (message.data !== undefined) {
      obj.data = StreamEventData.toJSON(message.data);
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<StreamDeletedEvent>, I>>(base?: I): StreamDeletedEvent {
    return StreamDeletedEvent.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<StreamDeletedEvent>, I>>(object: I): StreamDeletedEvent {
    const message = createBaseStreamDeletedEvent();
    message.data = (object.data !== undefined && object.data !== null)
      ? StreamEventData.fromPartial(object.data)
      : undefined;
    return message;
  },
};

function createBasePrivateConnectionCreatedEvent(): PrivateConnectionCreatedEvent {
  return { data: undefined };
}

export const PrivateConnectionCreatedEvent: MessageFns<PrivateConnectionCreatedEvent> = {
  encode(message: PrivateConnectionCreatedEvent, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.data !== undefined) {
      PrivateConnectionEventData.encode(message.data, writer.uint32(10).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): PrivateConnectionCreatedEvent {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    const end = length === undefined ? reader.len : reader.pos + length;
    const message = createBasePrivateConnectionCreatedEvent();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.data = PrivateConnectionEventData.decode(reader, reader.uint32());
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): PrivateConnectionCreatedEvent {
    return { data: isSet(object.data) ? PrivateConnectionEventData.fromJSON(object.data) : undefined };
  },

  toJSON(message: PrivateConnectionCreatedEvent): unknown {
    const obj: any = {};
    if (message.data !== undefined) {
      obj.data = PrivateConnectionEventData.toJSON(message.data);
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<PrivateConnectionCreatedEvent>, I>>(base?: I): PrivateConnectionCreatedEvent {
    return PrivateConnectionCreatedEvent.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<PrivateConnectionCreatedEvent>, I>>(
    object: I,
  ): PrivateConnectionCreatedEvent {
    const message = createBasePrivateConnectionCreatedEvent();
    message.data = (object.data !== undefined && object.data !== null)
      ? PrivateConnectionEventData.fromPartial(object.data)
      : undefined;
    return message;
  },
};

function createBasePrivateConnectionDeletedEvent(): PrivateConnectionDeletedEvent {
  return { data: undefined };
}

export const PrivateConnectionDeletedEvent: MessageFns<PrivateConnectionDeletedEvent> = {
  encode(message: PrivateConnectionDeletedEvent, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.data !== undefined) {
      PrivateConnectionEventData.encode(message.data, writer.uint32(10).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): PrivateConnectionDeletedEvent {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    const end = length === undefined ? reader.len : reader.pos + length;
    const message = createBasePrivateConnectionDeletedEvent();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.data = PrivateConnectionEventData.decode(reader, reader.uint32());
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): PrivateConnectionDeletedEvent {
    return { data: isSet(object.data) ? PrivateConnectionEventData.fromJSON(object.data) : undefined };
  },

  toJSON(message: PrivateConnectionDeletedEvent): unknown {
    const obj: any = {};
    if (message.data !== undefined) {
      obj.data = PrivateConnectionEventData.toJSON(message.data);
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<PrivateConnectionDeletedEvent>, I>>(base?: I): PrivateConnectionDeletedEvent {
    return PrivateConnectionDeletedEvent.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<PrivateConnectionDeletedEvent>, I>>(
    object: I,
  ): PrivateConnectionDeletedEvent {
    const message = createBasePrivateConnectionDeletedEvent();
    message.data = (object.data !== undefined && object.data !== null)
      ? PrivateConnectionEventData.fromPartial(object.data)
      : undefined;
    return message;
  },
};

function createBaseRouteCreatedEvent(): RouteCreatedEvent {
  return { data: undefined };
}

export const RouteCreatedEvent: MessageFns<RouteCreatedEvent> = {
  encode(message: RouteCreatedEvent, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.data !== undefined) {
      RouteEventData.encode(message.data, writer.uint32(10).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): RouteCreatedEvent {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    const end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseRouteCreatedEvent();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.data = RouteEventData.decode(reader, reader.uint32());
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): RouteCreatedEvent {
    return { data: isSet(object.data) ? RouteEventData.fromJSON(object.data) : undefined };
  },

  toJSON(message: RouteCreatedEvent): unknown {
    const obj: any = {};
    if (message.data !== undefined) {
      obj.data = RouteEventData.toJSON(message.data);
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<RouteCreatedEvent>, I>>(base?: I): RouteCreatedEvent {
    return RouteCreatedEvent.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<RouteCreatedEvent>, I>>(object: I): RouteCreatedEvent {
    const message = createBaseRouteCreatedEvent();
    message.data = (object.data !== undefined && object.data !== null)
      ? RouteEventData.fromPartial(object.data)
      : undefined;
    return message;
  },
};

function createBaseRouteDeletedEvent(): RouteDeletedEvent {
  return { data: undefined };
}

export const RouteDeletedEvent: MessageFns<RouteDeletedEvent> = {
  encode(message: RouteDeletedEvent, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.data !== undefined) {
      RouteEventData.encode(message.data, writer.uint32(10).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): RouteDeletedEvent {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    const end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseRouteDeletedEvent();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.data = RouteEventData.decode(reader, reader.uint32());
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): RouteDeletedEvent {
    return { data: isSet(object.data) ? RouteEventData.fromJSON(object.data) : undefined };
  },

  toJSON(message: RouteDeletedEvent): unknown {
    const obj: any = {};
    if (message.data !== undefined) {
      obj.data = RouteEventData.toJSON(message.data);
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<RouteDeletedEvent>, I>>(base?: I): RouteDeletedEvent {
    return RouteDeletedEvent.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<RouteDeletedEvent>, I>>(object: I): RouteDeletedEvent {
    const message = createBaseRouteDeletedEvent();
    message.data = (object.data !== undefined && object.data !== null)
      ? RouteEventData.fromPartial(object.data)
      : undefined;
    return message;
  },
};

type Builtin = Date | Function | Uint8Array | string | number | boolean | undefined;

export type DeepPartial<T> = T extends Builtin ? T
  : T extends Long ? string | number | Long : T extends globalThis.Array<infer U> ? globalThis.Array<DeepPartial<U>>
  : T extends ReadonlyArray<infer U> ? ReadonlyArray<DeepPartial<U>>
  : T extends {} ? { [K in keyof T]?: DeepPartial<T[K]> }
  : Partial<T>;

type KeysOfUnion<T> = T extends T ? keyof T : never;
export type Exact<P, I extends P> = P extends Builtin ? P
  : P & { [K in keyof P]: Exact<P[K], I[K]> } & { [K in Exclude<keyof I, KeysOfUnion<P>>]: never };

function isSet(value: any): boolean {
  return value !== null && value !== undefined;
}

export interface MessageFns<T> {
  encode(message: T, writer?: BinaryWriter): BinaryWriter;
  decode(input: BinaryReader | Uint8Array, length?: number): T;
  fromJSON(object: any): T;
  toJSON(message: T): unknown;
  create<I extends Exact<DeepPartial<T>, I>>(base?: I): T;
  fromPartial<I extends Exact<DeepPartial<T>, I>>(object: I): T;
}
