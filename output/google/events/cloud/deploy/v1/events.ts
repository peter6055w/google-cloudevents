// Code generated by protoc-gen-ts_proto. DO NOT EDIT.
// versions:
//   protoc-gen-ts_proto  v2.7.7
//   protoc               v6.32.0
// source: google/events/cloud/deploy/v1/events.proto

/* eslint-disable */
import { BinaryReader, BinaryWriter } from "@bufbuild/protobuf/wire";
import Long from "long";
import {
  AutomationEventData,
  CustomTargetTypeEventData,
  DeliveryPipelineEventData,
  ReleaseEventData,
  RolloutEventData,
  TargetEventData,
} from "./data";

export const protobufPackage = "google.events.cloud.deploy.v1";

/** The CloudEvent raised when a DeliveryPipeline is created. */
export interface DeliveryPipelineCreatedEvent {
  /** The data associated with the event. */
  data?: DeliveryPipelineEventData | undefined;
}

/** The CloudEvent raised when a DeliveryPipeline is updated. */
export interface DeliveryPipelineUpdatedEvent {
  /** The data associated with the event. */
  data?: DeliveryPipelineEventData | undefined;
}

/** The CloudEvent raised when a DeliveryPipeline is deleted. */
export interface DeliveryPipelineDeletedEvent {
  /** The data associated with the event. */
  data?: DeliveryPipelineEventData | undefined;
}

/** The CloudEvent raised when a Target is created. */
export interface TargetCreatedEvent {
  /** The data associated with the event. */
  data?: TargetEventData | undefined;
}

/** The CloudEvent raised when a Target is updated. */
export interface TargetUpdatedEvent {
  /** The data associated with the event. */
  data?: TargetEventData | undefined;
}

/** The CloudEvent raised when a Target is deleted. */
export interface TargetDeletedEvent {
  /** The data associated with the event. */
  data?: TargetEventData | undefined;
}

/** The CloudEvent raised when a CustomTargetType is created. */
export interface CustomTargetTypeCreatedEvent {
  /** The data associated with the event. */
  data?: CustomTargetTypeEventData | undefined;
}

/** The CloudEvent raised when a CustomTargetType is updated. */
export interface CustomTargetTypeUpdatedEvent {
  /** The data associated with the event. */
  data?: CustomTargetTypeEventData | undefined;
}

/** The CloudEvent raised when a CustomTargetType is deleted. */
export interface CustomTargetTypeDeletedEvent {
  /** The data associated with the event. */
  data?: CustomTargetTypeEventData | undefined;
}

/** The CloudEvent raised when a Release is created. */
export interface ReleaseCreatedEvent {
  /** The data associated with the event. */
  data?: ReleaseEventData | undefined;
}

/** The CloudEvent raised when a Rollout is created. */
export interface RolloutCreatedEvent {
  /** The data associated with the event. */
  data?: RolloutEventData | undefined;
}

/** The CloudEvent raised when a Automation is created. */
export interface AutomationCreatedEvent {
  /** The data associated with the event. */
  data?: AutomationEventData | undefined;
}

/** The CloudEvent raised when a Automation is updated. */
export interface AutomationUpdatedEvent {
  /** The data associated with the event. */
  data?: AutomationEventData | undefined;
}

/** The CloudEvent raised when a Automation is deleted. */
export interface AutomationDeletedEvent {
  /** The data associated with the event. */
  data?: AutomationEventData | undefined;
}

function createBaseDeliveryPipelineCreatedEvent(): DeliveryPipelineCreatedEvent {
  return { data: undefined };
}

export const DeliveryPipelineCreatedEvent: MessageFns<DeliveryPipelineCreatedEvent> = {
  encode(message: DeliveryPipelineCreatedEvent, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.data !== undefined) {
      DeliveryPipelineEventData.encode(message.data, writer.uint32(10).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): DeliveryPipelineCreatedEvent {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    const end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseDeliveryPipelineCreatedEvent();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.data = DeliveryPipelineEventData.decode(reader, reader.uint32());
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): DeliveryPipelineCreatedEvent {
    return { data: isSet(object.data) ? DeliveryPipelineEventData.fromJSON(object.data) : undefined };
  },

  toJSON(message: DeliveryPipelineCreatedEvent): unknown {
    const obj: any = {};
    if (message.data !== undefined) {
      obj.data = DeliveryPipelineEventData.toJSON(message.data);
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<DeliveryPipelineCreatedEvent>, I>>(base?: I): DeliveryPipelineCreatedEvent {
    return DeliveryPipelineCreatedEvent.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<DeliveryPipelineCreatedEvent>, I>>(object: I): DeliveryPipelineCreatedEvent {
    const message = createBaseDeliveryPipelineCreatedEvent();
    message.data = (object.data !== undefined && object.data !== null)
      ? DeliveryPipelineEventData.fromPartial(object.data)
      : undefined;
    return message;
  },
};

function createBaseDeliveryPipelineUpdatedEvent(): DeliveryPipelineUpdatedEvent {
  return { data: undefined };
}

export const DeliveryPipelineUpdatedEvent: MessageFns<DeliveryPipelineUpdatedEvent> = {
  encode(message: DeliveryPipelineUpdatedEvent, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.data !== undefined) {
      DeliveryPipelineEventData.encode(message.data, writer.uint32(10).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): DeliveryPipelineUpdatedEvent {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    const end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseDeliveryPipelineUpdatedEvent();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.data = DeliveryPipelineEventData.decode(reader, reader.uint32());
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): DeliveryPipelineUpdatedEvent {
    return { data: isSet(object.data) ? DeliveryPipelineEventData.fromJSON(object.data) : undefined };
  },

  toJSON(message: DeliveryPipelineUpdatedEvent): unknown {
    const obj: any = {};
    if (message.data !== undefined) {
      obj.data = DeliveryPipelineEventData.toJSON(message.data);
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<DeliveryPipelineUpdatedEvent>, I>>(base?: I): DeliveryPipelineUpdatedEvent {
    return DeliveryPipelineUpdatedEvent.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<DeliveryPipelineUpdatedEvent>, I>>(object: I): DeliveryPipelineUpdatedEvent {
    const message = createBaseDeliveryPipelineUpdatedEvent();
    message.data = (object.data !== undefined && object.data !== null)
      ? DeliveryPipelineEventData.fromPartial(object.data)
      : undefined;
    return message;
  },
};

function createBaseDeliveryPipelineDeletedEvent(): DeliveryPipelineDeletedEvent {
  return { data: undefined };
}

export const DeliveryPipelineDeletedEvent: MessageFns<DeliveryPipelineDeletedEvent> = {
  encode(message: DeliveryPipelineDeletedEvent, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.data !== undefined) {
      DeliveryPipelineEventData.encode(message.data, writer.uint32(10).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): DeliveryPipelineDeletedEvent {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    const end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseDeliveryPipelineDeletedEvent();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.data = DeliveryPipelineEventData.decode(reader, reader.uint32());
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): DeliveryPipelineDeletedEvent {
    return { data: isSet(object.data) ? DeliveryPipelineEventData.fromJSON(object.data) : undefined };
  },

  toJSON(message: DeliveryPipelineDeletedEvent): unknown {
    const obj: any = {};
    if (message.data !== undefined) {
      obj.data = DeliveryPipelineEventData.toJSON(message.data);
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<DeliveryPipelineDeletedEvent>, I>>(base?: I): DeliveryPipelineDeletedEvent {
    return DeliveryPipelineDeletedEvent.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<DeliveryPipelineDeletedEvent>, I>>(object: I): DeliveryPipelineDeletedEvent {
    const message = createBaseDeliveryPipelineDeletedEvent();
    message.data = (object.data !== undefined && object.data !== null)
      ? DeliveryPipelineEventData.fromPartial(object.data)
      : undefined;
    return message;
  },
};

function createBaseTargetCreatedEvent(): TargetCreatedEvent {
  return { data: undefined };
}

export const TargetCreatedEvent: MessageFns<TargetCreatedEvent> = {
  encode(message: TargetCreatedEvent, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.data !== undefined) {
      TargetEventData.encode(message.data, writer.uint32(10).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): TargetCreatedEvent {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    const end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseTargetCreatedEvent();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.data = TargetEventData.decode(reader, reader.uint32());
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): TargetCreatedEvent {
    return { data: isSet(object.data) ? TargetEventData.fromJSON(object.data) : undefined };
  },

  toJSON(message: TargetCreatedEvent): unknown {
    const obj: any = {};
    if (message.data !== undefined) {
      obj.data = TargetEventData.toJSON(message.data);
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<TargetCreatedEvent>, I>>(base?: I): TargetCreatedEvent {
    return TargetCreatedEvent.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<TargetCreatedEvent>, I>>(object: I): TargetCreatedEvent {
    const message = createBaseTargetCreatedEvent();
    message.data = (object.data !== undefined && object.data !== null)
      ? TargetEventData.fromPartial(object.data)
      : undefined;
    return message;
  },
};

function createBaseTargetUpdatedEvent(): TargetUpdatedEvent {
  return { data: undefined };
}

export const TargetUpdatedEvent: MessageFns<TargetUpdatedEvent> = {
  encode(message: TargetUpdatedEvent, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.data !== undefined) {
      TargetEventData.encode(message.data, writer.uint32(10).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): TargetUpdatedEvent {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    const end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseTargetUpdatedEvent();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.data = TargetEventData.decode(reader, reader.uint32());
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): TargetUpdatedEvent {
    return { data: isSet(object.data) ? TargetEventData.fromJSON(object.data) : undefined };
  },

  toJSON(message: TargetUpdatedEvent): unknown {
    const obj: any = {};
    if (message.data !== undefined) {
      obj.data = TargetEventData.toJSON(message.data);
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<TargetUpdatedEvent>, I>>(base?: I): TargetUpdatedEvent {
    return TargetUpdatedEvent.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<TargetUpdatedEvent>, I>>(object: I): TargetUpdatedEvent {
    const message = createBaseTargetUpdatedEvent();
    message.data = (object.data !== undefined && object.data !== null)
      ? TargetEventData.fromPartial(object.data)
      : undefined;
    return message;
  },
};

function createBaseTargetDeletedEvent(): TargetDeletedEvent {
  return { data: undefined };
}

export const TargetDeletedEvent: MessageFns<TargetDeletedEvent> = {
  encode(message: TargetDeletedEvent, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.data !== undefined) {
      TargetEventData.encode(message.data, writer.uint32(10).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): TargetDeletedEvent {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    const end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseTargetDeletedEvent();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.data = TargetEventData.decode(reader, reader.uint32());
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): TargetDeletedEvent {
    return { data: isSet(object.data) ? TargetEventData.fromJSON(object.data) : undefined };
  },

  toJSON(message: TargetDeletedEvent): unknown {
    const obj: any = {};
    if (message.data !== undefined) {
      obj.data = TargetEventData.toJSON(message.data);
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<TargetDeletedEvent>, I>>(base?: I): TargetDeletedEvent {
    return TargetDeletedEvent.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<TargetDeletedEvent>, I>>(object: I): TargetDeletedEvent {
    const message = createBaseTargetDeletedEvent();
    message.data = (object.data !== undefined && object.data !== null)
      ? TargetEventData.fromPartial(object.data)
      : undefined;
    return message;
  },
};

function createBaseCustomTargetTypeCreatedEvent(): CustomTargetTypeCreatedEvent {
  return { data: undefined };
}

export const CustomTargetTypeCreatedEvent: MessageFns<CustomTargetTypeCreatedEvent> = {
  encode(message: CustomTargetTypeCreatedEvent, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.data !== undefined) {
      CustomTargetTypeEventData.encode(message.data, writer.uint32(10).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): CustomTargetTypeCreatedEvent {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    const end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseCustomTargetTypeCreatedEvent();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.data = CustomTargetTypeEventData.decode(reader, reader.uint32());
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): CustomTargetTypeCreatedEvent {
    return { data: isSet(object.data) ? CustomTargetTypeEventData.fromJSON(object.data) : undefined };
  },

  toJSON(message: CustomTargetTypeCreatedEvent): unknown {
    const obj: any = {};
    if (message.data !== undefined) {
      obj.data = CustomTargetTypeEventData.toJSON(message.data);
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<CustomTargetTypeCreatedEvent>, I>>(base?: I): CustomTargetTypeCreatedEvent {
    return CustomTargetTypeCreatedEvent.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<CustomTargetTypeCreatedEvent>, I>>(object: I): CustomTargetTypeCreatedEvent {
    const message = createBaseCustomTargetTypeCreatedEvent();
    message.data = (object.data !== undefined && object.data !== null)
      ? CustomTargetTypeEventData.fromPartial(object.data)
      : undefined;
    return message;
  },
};

function createBaseCustomTargetTypeUpdatedEvent(): CustomTargetTypeUpdatedEvent {
  return { data: undefined };
}

export const CustomTargetTypeUpdatedEvent: MessageFns<CustomTargetTypeUpdatedEvent> = {
  encode(message: CustomTargetTypeUpdatedEvent, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.data !== undefined) {
      CustomTargetTypeEventData.encode(message.data, writer.uint32(10).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): CustomTargetTypeUpdatedEvent {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    const end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseCustomTargetTypeUpdatedEvent();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.data = CustomTargetTypeEventData.decode(reader, reader.uint32());
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): CustomTargetTypeUpdatedEvent {
    return { data: isSet(object.data) ? CustomTargetTypeEventData.fromJSON(object.data) : undefined };
  },

  toJSON(message: CustomTargetTypeUpdatedEvent): unknown {
    const obj: any = {};
    if (message.data !== undefined) {
      obj.data = CustomTargetTypeEventData.toJSON(message.data);
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<CustomTargetTypeUpdatedEvent>, I>>(base?: I): CustomTargetTypeUpdatedEvent {
    return CustomTargetTypeUpdatedEvent.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<CustomTargetTypeUpdatedEvent>, I>>(object: I): CustomTargetTypeUpdatedEvent {
    const message = createBaseCustomTargetTypeUpdatedEvent();
    message.data = (object.data !== undefined && object.data !== null)
      ? CustomTargetTypeEventData.fromPartial(object.data)
      : undefined;
    return message;
  },
};

function createBaseCustomTargetTypeDeletedEvent(): CustomTargetTypeDeletedEvent {
  return { data: undefined };
}

export const CustomTargetTypeDeletedEvent: MessageFns<CustomTargetTypeDeletedEvent> = {
  encode(message: CustomTargetTypeDeletedEvent, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.data !== undefined) {
      CustomTargetTypeEventData.encode(message.data, writer.uint32(10).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): CustomTargetTypeDeletedEvent {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    const end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseCustomTargetTypeDeletedEvent();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.data = CustomTargetTypeEventData.decode(reader, reader.uint32());
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): CustomTargetTypeDeletedEvent {
    return { data: isSet(object.data) ? CustomTargetTypeEventData.fromJSON(object.data) : undefined };
  },

  toJSON(message: CustomTargetTypeDeletedEvent): unknown {
    const obj: any = {};
    if (message.data !== undefined) {
      obj.data = CustomTargetTypeEventData.toJSON(message.data);
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<CustomTargetTypeDeletedEvent>, I>>(base?: I): CustomTargetTypeDeletedEvent {
    return CustomTargetTypeDeletedEvent.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<CustomTargetTypeDeletedEvent>, I>>(object: I): CustomTargetTypeDeletedEvent {
    const message = createBaseCustomTargetTypeDeletedEvent();
    message.data = (object.data !== undefined && object.data !== null)
      ? CustomTargetTypeEventData.fromPartial(object.data)
      : undefined;
    return message;
  },
};

function createBaseReleaseCreatedEvent(): ReleaseCreatedEvent {
  return { data: undefined };
}

export const ReleaseCreatedEvent: MessageFns<ReleaseCreatedEvent> = {
  encode(message: ReleaseCreatedEvent, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.data !== undefined) {
      ReleaseEventData.encode(message.data, writer.uint32(10).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): ReleaseCreatedEvent {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    const end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseReleaseCreatedEvent();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.data = ReleaseEventData.decode(reader, reader.uint32());
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): ReleaseCreatedEvent {
    return { data: isSet(object.data) ? ReleaseEventData.fromJSON(object.data) : undefined };
  },

  toJSON(message: ReleaseCreatedEvent): unknown {
    const obj: any = {};
    if (message.data !== undefined) {
      obj.data = ReleaseEventData.toJSON(message.data);
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<ReleaseCreatedEvent>, I>>(base?: I): ReleaseCreatedEvent {
    return ReleaseCreatedEvent.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<ReleaseCreatedEvent>, I>>(object: I): ReleaseCreatedEvent {
    const message = createBaseReleaseCreatedEvent();
    message.data = (object.data !== undefined && object.data !== null)
      ? ReleaseEventData.fromPartial(object.data)
      : undefined;
    return message;
  },
};

function createBaseRolloutCreatedEvent(): RolloutCreatedEvent {
  return { data: undefined };
}

export const RolloutCreatedEvent: MessageFns<RolloutCreatedEvent> = {
  encode(message: RolloutCreatedEvent, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.data !== undefined) {
      RolloutEventData.encode(message.data, writer.uint32(10).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): RolloutCreatedEvent {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    const end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseRolloutCreatedEvent();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.data = RolloutEventData.decode(reader, reader.uint32());
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): RolloutCreatedEvent {
    return { data: isSet(object.data) ? RolloutEventData.fromJSON(object.data) : undefined };
  },

  toJSON(message: RolloutCreatedEvent): unknown {
    const obj: any = {};
    if (message.data !== undefined) {
      obj.data = RolloutEventData.toJSON(message.data);
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<RolloutCreatedEvent>, I>>(base?: I): RolloutCreatedEvent {
    return RolloutCreatedEvent.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<RolloutCreatedEvent>, I>>(object: I): RolloutCreatedEvent {
    const message = createBaseRolloutCreatedEvent();
    message.data = (object.data !== undefined && object.data !== null)
      ? RolloutEventData.fromPartial(object.data)
      : undefined;
    return message;
  },
};

function createBaseAutomationCreatedEvent(): AutomationCreatedEvent {
  return { data: undefined };
}

export const AutomationCreatedEvent: MessageFns<AutomationCreatedEvent> = {
  encode(message: AutomationCreatedEvent, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.data !== undefined) {
      AutomationEventData.encode(message.data, writer.uint32(10).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): AutomationCreatedEvent {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    const end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseAutomationCreatedEvent();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.data = AutomationEventData.decode(reader, reader.uint32());
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): AutomationCreatedEvent {
    return { data: isSet(object.data) ? AutomationEventData.fromJSON(object.data) : undefined };
  },

  toJSON(message: AutomationCreatedEvent): unknown {
    const obj: any = {};
    if (message.data !== undefined) {
      obj.data = AutomationEventData.toJSON(message.data);
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<AutomationCreatedEvent>, I>>(base?: I): AutomationCreatedEvent {
    return AutomationCreatedEvent.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<AutomationCreatedEvent>, I>>(object: I): AutomationCreatedEvent {
    const message = createBaseAutomationCreatedEvent();
    message.data = (object.data !== undefined && object.data !== null)
      ? AutomationEventData.fromPartial(object.data)
      : undefined;
    return message;
  },
};

function createBaseAutomationUpdatedEvent(): AutomationUpdatedEvent {
  return { data: undefined };
}

export const AutomationUpdatedEvent: MessageFns<AutomationUpdatedEvent> = {
  encode(message: AutomationUpdatedEvent, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.data !== undefined) {
      AutomationEventData.encode(message.data, writer.uint32(10).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): AutomationUpdatedEvent {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    const end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseAutomationUpdatedEvent();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.data = AutomationEventData.decode(reader, reader.uint32());
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): AutomationUpdatedEvent {
    return { data: isSet(object.data) ? AutomationEventData.fromJSON(object.data) : undefined };
  },

  toJSON(message: AutomationUpdatedEvent): unknown {
    const obj: any = {};
    if (message.data !== undefined) {
      obj.data = AutomationEventData.toJSON(message.data);
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<AutomationUpdatedEvent>, I>>(base?: I): AutomationUpdatedEvent {
    return AutomationUpdatedEvent.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<AutomationUpdatedEvent>, I>>(object: I): AutomationUpdatedEvent {
    const message = createBaseAutomationUpdatedEvent();
    message.data = (object.data !== undefined && object.data !== null)
      ? AutomationEventData.fromPartial(object.data)
      : undefined;
    return message;
  },
};

function createBaseAutomationDeletedEvent(): AutomationDeletedEvent {
  return { data: undefined };
}

export const AutomationDeletedEvent: MessageFns<AutomationDeletedEvent> = {
  encode(message: AutomationDeletedEvent, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.data !== undefined) {
      AutomationEventData.encode(message.data, writer.uint32(10).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): AutomationDeletedEvent {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    const end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseAutomationDeletedEvent();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.data = AutomationEventData.decode(reader, reader.uint32());
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): AutomationDeletedEvent {
    return { data: isSet(object.data) ? AutomationEventData.fromJSON(object.data) : undefined };
  },

  toJSON(message: AutomationDeletedEvent): unknown {
    const obj: any = {};
    if (message.data !== undefined) {
      obj.data = AutomationEventData.toJSON(message.data);
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<AutomationDeletedEvent>, I>>(base?: I): AutomationDeletedEvent {
    return AutomationDeletedEvent.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<AutomationDeletedEvent>, I>>(object: I): AutomationDeletedEvent {
    const message = createBaseAutomationDeletedEvent();
    message.data = (object.data !== undefined && object.data !== null)
      ? AutomationEventData.fromPartial(object.data)
      : undefined;
    return message;
  },
};

type Builtin = Date | Function | Uint8Array | string | number | boolean | undefined;

export type DeepPartial<T> = T extends Builtin ? T
  : T extends Long ? string | number | Long : T extends globalThis.Array<infer U> ? globalThis.Array<DeepPartial<U>>
  : T extends ReadonlyArray<infer U> ? ReadonlyArray<DeepPartial<U>>
  : T extends {} ? { [K in keyof T]?: DeepPartial<T[K]> }
  : Partial<T>;

type KeysOfUnion<T> = T extends T ? keyof T : never;
export type Exact<P, I extends P> = P extends Builtin ? P
  : P & { [K in keyof P]: Exact<P[K], I[K]> } & { [K in Exclude<keyof I, KeysOfUnion<P>>]: never };

function isSet(value: any): boolean {
  return value !== null && value !== undefined;
}

export interface MessageFns<T> {
  encode(message: T, writer?: BinaryWriter): BinaryWriter;
  decode(input: BinaryReader | Uint8Array, length?: number): T;
  fromJSON(object: any): T;
  toJSON(message: T): unknown;
  create<I extends Exact<DeepPartial<T>, I>>(base?: I): T;
  fromPartial<I extends Exact<DeepPartial<T>, I>>(object: I): T;
}
