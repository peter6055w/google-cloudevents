// Code generated by protoc-gen-ts_proto. DO NOT EDIT.
// versions:
//   protoc-gen-ts_proto  v2.7.7
//   protoc               v6.32.0
// source: google/events/cloud/eventarc/v1/events.proto

/* eslint-disable */
import { BinaryReader, BinaryWriter } from "@bufbuild/protobuf/wire";
import Long from "long";
import { ChannelConnectionEventData, ChannelEventData, TriggerEventData } from "./data";

export const protobufPackage = "google.events.cloud.eventarc.v1";

/** The CloudEvent raised when a Trigger is created. */
export interface TriggerCreatedEvent {
  /** The data associated with the event. */
  data?: TriggerEventData | undefined;
}

/** The CloudEvent raised when a Trigger is updated. */
export interface TriggerUpdatedEvent {
  /** The data associated with the event. */
  data?: TriggerEventData | undefined;
}

/** The CloudEvent raised when a Trigger is deleted. */
export interface TriggerDeletedEvent {
  /** The data associated with the event. */
  data?: TriggerEventData | undefined;
}

/** The CloudEvent raised when a Channel is created. */
export interface ChannelCreatedEvent {
  /** The data associated with the event. */
  data?: ChannelEventData | undefined;
}

/** The CloudEvent raised when a Channel is updated. */
export interface ChannelUpdatedEvent {
  /** The data associated with the event. */
  data?: ChannelEventData | undefined;
}

/** The CloudEvent raised when a Channel is deleted. */
export interface ChannelDeletedEvent {
  /** The data associated with the event. */
  data?: ChannelEventData | undefined;
}

/** The CloudEvent raised when a ChannelConnection is created. */
export interface ChannelConnectionCreatedEvent {
  /** The data associated with the event. */
  data?: ChannelConnectionEventData | undefined;
}

/** The CloudEvent raised when a ChannelConnection is deleted. */
export interface ChannelConnectionDeletedEvent {
  /** The data associated with the event. */
  data?: ChannelConnectionEventData | undefined;
}

function createBaseTriggerCreatedEvent(): TriggerCreatedEvent {
  return { data: undefined };
}

export const TriggerCreatedEvent: MessageFns<TriggerCreatedEvent> = {
  encode(message: TriggerCreatedEvent, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.data !== undefined) {
      TriggerEventData.encode(message.data, writer.uint32(10).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): TriggerCreatedEvent {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    const end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseTriggerCreatedEvent();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.data = TriggerEventData.decode(reader, reader.uint32());
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): TriggerCreatedEvent {
    return { data: isSet(object.data) ? TriggerEventData.fromJSON(object.data) : undefined };
  },

  toJSON(message: TriggerCreatedEvent): unknown {
    const obj: any = {};
    if (message.data !== undefined) {
      obj.data = TriggerEventData.toJSON(message.data);
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<TriggerCreatedEvent>, I>>(base?: I): TriggerCreatedEvent {
    return TriggerCreatedEvent.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<TriggerCreatedEvent>, I>>(object: I): TriggerCreatedEvent {
    const message = createBaseTriggerCreatedEvent();
    message.data = (object.data !== undefined && object.data !== null)
      ? TriggerEventData.fromPartial(object.data)
      : undefined;
    return message;
  },
};

function createBaseTriggerUpdatedEvent(): TriggerUpdatedEvent {
  return { data: undefined };
}

export const TriggerUpdatedEvent: MessageFns<TriggerUpdatedEvent> = {
  encode(message: TriggerUpdatedEvent, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.data !== undefined) {
      TriggerEventData.encode(message.data, writer.uint32(10).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): TriggerUpdatedEvent {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    const end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseTriggerUpdatedEvent();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.data = TriggerEventData.decode(reader, reader.uint32());
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): TriggerUpdatedEvent {
    return { data: isSet(object.data) ? TriggerEventData.fromJSON(object.data) : undefined };
  },

  toJSON(message: TriggerUpdatedEvent): unknown {
    const obj: any = {};
    if (message.data !== undefined) {
      obj.data = TriggerEventData.toJSON(message.data);
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<TriggerUpdatedEvent>, I>>(base?: I): TriggerUpdatedEvent {
    return TriggerUpdatedEvent.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<TriggerUpdatedEvent>, I>>(object: I): TriggerUpdatedEvent {
    const message = createBaseTriggerUpdatedEvent();
    message.data = (object.data !== undefined && object.data !== null)
      ? TriggerEventData.fromPartial(object.data)
      : undefined;
    return message;
  },
};

function createBaseTriggerDeletedEvent(): TriggerDeletedEvent {
  return { data: undefined };
}

export const TriggerDeletedEvent: MessageFns<TriggerDeletedEvent> = {
  encode(message: TriggerDeletedEvent, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.data !== undefined) {
      TriggerEventData.encode(message.data, writer.uint32(10).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): TriggerDeletedEvent {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    const end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseTriggerDeletedEvent();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.data = TriggerEventData.decode(reader, reader.uint32());
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): TriggerDeletedEvent {
    return { data: isSet(object.data) ? TriggerEventData.fromJSON(object.data) : undefined };
  },

  toJSON(message: TriggerDeletedEvent): unknown {
    const obj: any = {};
    if (message.data !== undefined) {
      obj.data = TriggerEventData.toJSON(message.data);
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<TriggerDeletedEvent>, I>>(base?: I): TriggerDeletedEvent {
    return TriggerDeletedEvent.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<TriggerDeletedEvent>, I>>(object: I): TriggerDeletedEvent {
    const message = createBaseTriggerDeletedEvent();
    message.data = (object.data !== undefined && object.data !== null)
      ? TriggerEventData.fromPartial(object.data)
      : undefined;
    return message;
  },
};

function createBaseChannelCreatedEvent(): ChannelCreatedEvent {
  return { data: undefined };
}

export const ChannelCreatedEvent: MessageFns<ChannelCreatedEvent> = {
  encode(message: ChannelCreatedEvent, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.data !== undefined) {
      ChannelEventData.encode(message.data, writer.uint32(10).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): ChannelCreatedEvent {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    const end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseChannelCreatedEvent();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.data = ChannelEventData.decode(reader, reader.uint32());
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): ChannelCreatedEvent {
    return { data: isSet(object.data) ? ChannelEventData.fromJSON(object.data) : undefined };
  },

  toJSON(message: ChannelCreatedEvent): unknown {
    const obj: any = {};
    if (message.data !== undefined) {
      obj.data = ChannelEventData.toJSON(message.data);
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<ChannelCreatedEvent>, I>>(base?: I): ChannelCreatedEvent {
    return ChannelCreatedEvent.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<ChannelCreatedEvent>, I>>(object: I): ChannelCreatedEvent {
    const message = createBaseChannelCreatedEvent();
    message.data = (object.data !== undefined && object.data !== null)
      ? ChannelEventData.fromPartial(object.data)
      : undefined;
    return message;
  },
};

function createBaseChannelUpdatedEvent(): ChannelUpdatedEvent {
  return { data: undefined };
}

export const ChannelUpdatedEvent: MessageFns<ChannelUpdatedEvent> = {
  encode(message: ChannelUpdatedEvent, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.data !== undefined) {
      ChannelEventData.encode(message.data, writer.uint32(10).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): ChannelUpdatedEvent {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    const end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseChannelUpdatedEvent();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.data = ChannelEventData.decode(reader, reader.uint32());
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): ChannelUpdatedEvent {
    return { data: isSet(object.data) ? ChannelEventData.fromJSON(object.data) : undefined };
  },

  toJSON(message: ChannelUpdatedEvent): unknown {
    const obj: any = {};
    if (message.data !== undefined) {
      obj.data = ChannelEventData.toJSON(message.data);
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<ChannelUpdatedEvent>, I>>(base?: I): ChannelUpdatedEvent {
    return ChannelUpdatedEvent.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<ChannelUpdatedEvent>, I>>(object: I): ChannelUpdatedEvent {
    const message = createBaseChannelUpdatedEvent();
    message.data = (object.data !== undefined && object.data !== null)
      ? ChannelEventData.fromPartial(object.data)
      : undefined;
    return message;
  },
};

function createBaseChannelDeletedEvent(): ChannelDeletedEvent {
  return { data: undefined };
}

export const ChannelDeletedEvent: MessageFns<ChannelDeletedEvent> = {
  encode(message: ChannelDeletedEvent, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.data !== undefined) {
      ChannelEventData.encode(message.data, writer.uint32(10).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): ChannelDeletedEvent {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    const end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseChannelDeletedEvent();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.data = ChannelEventData.decode(reader, reader.uint32());
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): ChannelDeletedEvent {
    return { data: isSet(object.data) ? ChannelEventData.fromJSON(object.data) : undefined };
  },

  toJSON(message: ChannelDeletedEvent): unknown {
    const obj: any = {};
    if (message.data !== undefined) {
      obj.data = ChannelEventData.toJSON(message.data);
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<ChannelDeletedEvent>, I>>(base?: I): ChannelDeletedEvent {
    return ChannelDeletedEvent.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<ChannelDeletedEvent>, I>>(object: I): ChannelDeletedEvent {
    const message = createBaseChannelDeletedEvent();
    message.data = (object.data !== undefined && object.data !== null)
      ? ChannelEventData.fromPartial(object.data)
      : undefined;
    return message;
  },
};

function createBaseChannelConnectionCreatedEvent(): ChannelConnectionCreatedEvent {
  return { data: undefined };
}

export const ChannelConnectionCreatedEvent: MessageFns<ChannelConnectionCreatedEvent> = {
  encode(message: ChannelConnectionCreatedEvent, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.data !== undefined) {
      ChannelConnectionEventData.encode(message.data, writer.uint32(10).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): ChannelConnectionCreatedEvent {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    const end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseChannelConnectionCreatedEvent();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.data = ChannelConnectionEventData.decode(reader, reader.uint32());
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): ChannelConnectionCreatedEvent {
    return { data: isSet(object.data) ? ChannelConnectionEventData.fromJSON(object.data) : undefined };
  },

  toJSON(message: ChannelConnectionCreatedEvent): unknown {
    const obj: any = {};
    if (message.data !== undefined) {
      obj.data = ChannelConnectionEventData.toJSON(message.data);
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<ChannelConnectionCreatedEvent>, I>>(base?: I): ChannelConnectionCreatedEvent {
    return ChannelConnectionCreatedEvent.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<ChannelConnectionCreatedEvent>, I>>(
    object: I,
  ): ChannelConnectionCreatedEvent {
    const message = createBaseChannelConnectionCreatedEvent();
    message.data = (object.data !== undefined && object.data !== null)
      ? ChannelConnectionEventData.fromPartial(object.data)
      : undefined;
    return message;
  },
};

function createBaseChannelConnectionDeletedEvent(): ChannelConnectionDeletedEvent {
  return { data: undefined };
}

export const ChannelConnectionDeletedEvent: MessageFns<ChannelConnectionDeletedEvent> = {
  encode(message: ChannelConnectionDeletedEvent, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.data !== undefined) {
      ChannelConnectionEventData.encode(message.data, writer.uint32(10).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): ChannelConnectionDeletedEvent {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    const end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseChannelConnectionDeletedEvent();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.data = ChannelConnectionEventData.decode(reader, reader.uint32());
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): ChannelConnectionDeletedEvent {
    return { data: isSet(object.data) ? ChannelConnectionEventData.fromJSON(object.data) : undefined };
  },

  toJSON(message: ChannelConnectionDeletedEvent): unknown {
    const obj: any = {};
    if (message.data !== undefined) {
      obj.data = ChannelConnectionEventData.toJSON(message.data);
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<ChannelConnectionDeletedEvent>, I>>(base?: I): ChannelConnectionDeletedEvent {
    return ChannelConnectionDeletedEvent.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<ChannelConnectionDeletedEvent>, I>>(
    object: I,
  ): ChannelConnectionDeletedEvent {
    const message = createBaseChannelConnectionDeletedEvent();
    message.data = (object.data !== undefined && object.data !== null)
      ? ChannelConnectionEventData.fromPartial(object.data)
      : undefined;
    return message;
  },
};

type Builtin = Date | Function | Uint8Array | string | number | boolean | undefined;

export type DeepPartial<T> = T extends Builtin ? T
  : T extends Long ? string | number | Long : T extends globalThis.Array<infer U> ? globalThis.Array<DeepPartial<U>>
  : T extends ReadonlyArray<infer U> ? ReadonlyArray<DeepPartial<U>>
  : T extends {} ? { [K in keyof T]?: DeepPartial<T[K]> }
  : Partial<T>;

type KeysOfUnion<T> = T extends T ? keyof T : never;
export type Exact<P, I extends P> = P extends Builtin ? P
  : P & { [K in keyof P]: Exact<P[K], I[K]> } & { [K in Exclude<keyof I, KeysOfUnion<P>>]: never };

function isSet(value: any): boolean {
  return value !== null && value !== undefined;
}

export interface MessageFns<T> {
  encode(message: T, writer?: BinaryWriter): BinaryWriter;
  decode(input: BinaryReader | Uint8Array, length?: number): T;
  fromJSON(object: any): T;
  toJSON(message: T): unknown;
  create<I extends Exact<DeepPartial<T>, I>>(base?: I): T;
  fromPartial<I extends Exact<DeepPartial<T>, I>>(object: I): T;
}
