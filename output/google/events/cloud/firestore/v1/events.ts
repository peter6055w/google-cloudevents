// Code generated by protoc-gen-ts_proto. DO NOT EDIT.
// versions:
//   protoc-gen-ts_proto  v2.7.7
//   protoc               v6.32.0
// source: google/events/cloud/firestore/v1/events.proto

/* eslint-disable */
import { BinaryReader, BinaryWriter } from "@bufbuild/protobuf/wire";
import Long from "long";
import { DocumentEventData } from "./data";

export const protobufPackage = "google.events.cloud.firestore.v1";

/** The CloudEvent raised when a Firestore document is created. */
export interface DocumentCreatedEvent {
  /** The data associated with the event. */
  data?: DocumentEventData | undefined;
}

/** The CloudEvent raised when a Firestore document is updated. */
export interface DocumentUpdatedEvent {
  /** The data associated with the event. */
  data?: DocumentEventData | undefined;
}

/** The CloudEvent raised when a Firestore document is deleted. */
export interface DocumentDeletedEvent {
  /** The data associated with the event. */
  data?: DocumentEventData | undefined;
}

/**
 * The CloudEvent raised when a Firestore document is created, updated or
 * deleted.
 */
export interface DocumentWrittenEvent {
  /** The data associated with the event. */
  data?: DocumentEventData | undefined;
}

/** The CloudEvent with Auth Context raised when a Firestore document is created. */
export interface DocumentCreatedEventWithAuthContext {
  /** The data associated with the event. */
  data?: DocumentEventData | undefined;
}

/** The CloudEvent with Auth Context raised when a Firestore document is updated. */
export interface DocumentUpdatedEventWithAuthContext {
  /** The data associated with the event. */
  data?: DocumentEventData | undefined;
}

/** The CloudEvent with Auth Context raised when a Firestore document is deleted. */
export interface DocumentDeletedEventWithAuthContext {
  /** The data associated with the event. */
  data?: DocumentEventData | undefined;
}

/**
 * The CloudEvent with Auth Context raised when a Firestore document is created,
 * updated or deleted.
 */
export interface DocumentWrittenEventWithAuthContext {
  /** The data associated with the event. */
  data?: DocumentEventData | undefined;
}

function createBaseDocumentCreatedEvent(): DocumentCreatedEvent {
  return { data: undefined };
}

export const DocumentCreatedEvent: MessageFns<DocumentCreatedEvent> = {
  encode(message: DocumentCreatedEvent, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.data !== undefined) {
      DocumentEventData.encode(message.data, writer.uint32(10).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): DocumentCreatedEvent {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    const end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseDocumentCreatedEvent();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.data = DocumentEventData.decode(reader, reader.uint32());
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): DocumentCreatedEvent {
    return { data: isSet(object.data) ? DocumentEventData.fromJSON(object.data) : undefined };
  },

  toJSON(message: DocumentCreatedEvent): unknown {
    const obj: any = {};
    if (message.data !== undefined) {
      obj.data = DocumentEventData.toJSON(message.data);
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<DocumentCreatedEvent>, I>>(base?: I): DocumentCreatedEvent {
    return DocumentCreatedEvent.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<DocumentCreatedEvent>, I>>(object: I): DocumentCreatedEvent {
    const message = createBaseDocumentCreatedEvent();
    message.data = (object.data !== undefined && object.data !== null)
      ? DocumentEventData.fromPartial(object.data)
      : undefined;
    return message;
  },
};

function createBaseDocumentUpdatedEvent(): DocumentUpdatedEvent {
  return { data: undefined };
}

export const DocumentUpdatedEvent: MessageFns<DocumentUpdatedEvent> = {
  encode(message: DocumentUpdatedEvent, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.data !== undefined) {
      DocumentEventData.encode(message.data, writer.uint32(10).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): DocumentUpdatedEvent {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    const end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseDocumentUpdatedEvent();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.data = DocumentEventData.decode(reader, reader.uint32());
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): DocumentUpdatedEvent {
    return { data: isSet(object.data) ? DocumentEventData.fromJSON(object.data) : undefined };
  },

  toJSON(message: DocumentUpdatedEvent): unknown {
    const obj: any = {};
    if (message.data !== undefined) {
      obj.data = DocumentEventData.toJSON(message.data);
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<DocumentUpdatedEvent>, I>>(base?: I): DocumentUpdatedEvent {
    return DocumentUpdatedEvent.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<DocumentUpdatedEvent>, I>>(object: I): DocumentUpdatedEvent {
    const message = createBaseDocumentUpdatedEvent();
    message.data = (object.data !== undefined && object.data !== null)
      ? DocumentEventData.fromPartial(object.data)
      : undefined;
    return message;
  },
};

function createBaseDocumentDeletedEvent(): DocumentDeletedEvent {
  return { data: undefined };
}

export const DocumentDeletedEvent: MessageFns<DocumentDeletedEvent> = {
  encode(message: DocumentDeletedEvent, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.data !== undefined) {
      DocumentEventData.encode(message.data, writer.uint32(10).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): DocumentDeletedEvent {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    const end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseDocumentDeletedEvent();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.data = DocumentEventData.decode(reader, reader.uint32());
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): DocumentDeletedEvent {
    return { data: isSet(object.data) ? DocumentEventData.fromJSON(object.data) : undefined };
  },

  toJSON(message: DocumentDeletedEvent): unknown {
    const obj: any = {};
    if (message.data !== undefined) {
      obj.data = DocumentEventData.toJSON(message.data);
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<DocumentDeletedEvent>, I>>(base?: I): DocumentDeletedEvent {
    return DocumentDeletedEvent.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<DocumentDeletedEvent>, I>>(object: I): DocumentDeletedEvent {
    const message = createBaseDocumentDeletedEvent();
    message.data = (object.data !== undefined && object.data !== null)
      ? DocumentEventData.fromPartial(object.data)
      : undefined;
    return message;
  },
};

function createBaseDocumentWrittenEvent(): DocumentWrittenEvent {
  return { data: undefined };
}

export const DocumentWrittenEvent: MessageFns<DocumentWrittenEvent> = {
  encode(message: DocumentWrittenEvent, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.data !== undefined) {
      DocumentEventData.encode(message.data, writer.uint32(10).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): DocumentWrittenEvent {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    const end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseDocumentWrittenEvent();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.data = DocumentEventData.decode(reader, reader.uint32());
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): DocumentWrittenEvent {
    return { data: isSet(object.data) ? DocumentEventData.fromJSON(object.data) : undefined };
  },

  toJSON(message: DocumentWrittenEvent): unknown {
    const obj: any = {};
    if (message.data !== undefined) {
      obj.data = DocumentEventData.toJSON(message.data);
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<DocumentWrittenEvent>, I>>(base?: I): DocumentWrittenEvent {
    return DocumentWrittenEvent.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<DocumentWrittenEvent>, I>>(object: I): DocumentWrittenEvent {
    const message = createBaseDocumentWrittenEvent();
    message.data = (object.data !== undefined && object.data !== null)
      ? DocumentEventData.fromPartial(object.data)
      : undefined;
    return message;
  },
};

function createBaseDocumentCreatedEventWithAuthContext(): DocumentCreatedEventWithAuthContext {
  return { data: undefined };
}

export const DocumentCreatedEventWithAuthContext: MessageFns<DocumentCreatedEventWithAuthContext> = {
  encode(message: DocumentCreatedEventWithAuthContext, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.data !== undefined) {
      DocumentEventData.encode(message.data, writer.uint32(10).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): DocumentCreatedEventWithAuthContext {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    const end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseDocumentCreatedEventWithAuthContext();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.data = DocumentEventData.decode(reader, reader.uint32());
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): DocumentCreatedEventWithAuthContext {
    return { data: isSet(object.data) ? DocumentEventData.fromJSON(object.data) : undefined };
  },

  toJSON(message: DocumentCreatedEventWithAuthContext): unknown {
    const obj: any = {};
    if (message.data !== undefined) {
      obj.data = DocumentEventData.toJSON(message.data);
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<DocumentCreatedEventWithAuthContext>, I>>(
    base?: I,
  ): DocumentCreatedEventWithAuthContext {
    return DocumentCreatedEventWithAuthContext.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<DocumentCreatedEventWithAuthContext>, I>>(
    object: I,
  ): DocumentCreatedEventWithAuthContext {
    const message = createBaseDocumentCreatedEventWithAuthContext();
    message.data = (object.data !== undefined && object.data !== null)
      ? DocumentEventData.fromPartial(object.data)
      : undefined;
    return message;
  },
};

function createBaseDocumentUpdatedEventWithAuthContext(): DocumentUpdatedEventWithAuthContext {
  return { data: undefined };
}

export const DocumentUpdatedEventWithAuthContext: MessageFns<DocumentUpdatedEventWithAuthContext> = {
  encode(message: DocumentUpdatedEventWithAuthContext, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.data !== undefined) {
      DocumentEventData.encode(message.data, writer.uint32(10).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): DocumentUpdatedEventWithAuthContext {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    const end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseDocumentUpdatedEventWithAuthContext();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.data = DocumentEventData.decode(reader, reader.uint32());
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): DocumentUpdatedEventWithAuthContext {
    return { data: isSet(object.data) ? DocumentEventData.fromJSON(object.data) : undefined };
  },

  toJSON(message: DocumentUpdatedEventWithAuthContext): unknown {
    const obj: any = {};
    if (message.data !== undefined) {
      obj.data = DocumentEventData.toJSON(message.data);
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<DocumentUpdatedEventWithAuthContext>, I>>(
    base?: I,
  ): DocumentUpdatedEventWithAuthContext {
    return DocumentUpdatedEventWithAuthContext.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<DocumentUpdatedEventWithAuthContext>, I>>(
    object: I,
  ): DocumentUpdatedEventWithAuthContext {
    const message = createBaseDocumentUpdatedEventWithAuthContext();
    message.data = (object.data !== undefined && object.data !== null)
      ? DocumentEventData.fromPartial(object.data)
      : undefined;
    return message;
  },
};

function createBaseDocumentDeletedEventWithAuthContext(): DocumentDeletedEventWithAuthContext {
  return { data: undefined };
}

export const DocumentDeletedEventWithAuthContext: MessageFns<DocumentDeletedEventWithAuthContext> = {
  encode(message: DocumentDeletedEventWithAuthContext, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.data !== undefined) {
      DocumentEventData.encode(message.data, writer.uint32(10).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): DocumentDeletedEventWithAuthContext {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    const end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseDocumentDeletedEventWithAuthContext();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.data = DocumentEventData.decode(reader, reader.uint32());
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): DocumentDeletedEventWithAuthContext {
    return { data: isSet(object.data) ? DocumentEventData.fromJSON(object.data) : undefined };
  },

  toJSON(message: DocumentDeletedEventWithAuthContext): unknown {
    const obj: any = {};
    if (message.data !== undefined) {
      obj.data = DocumentEventData.toJSON(message.data);
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<DocumentDeletedEventWithAuthContext>, I>>(
    base?: I,
  ): DocumentDeletedEventWithAuthContext {
    return DocumentDeletedEventWithAuthContext.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<DocumentDeletedEventWithAuthContext>, I>>(
    object: I,
  ): DocumentDeletedEventWithAuthContext {
    const message = createBaseDocumentDeletedEventWithAuthContext();
    message.data = (object.data !== undefined && object.data !== null)
      ? DocumentEventData.fromPartial(object.data)
      : undefined;
    return message;
  },
};

function createBaseDocumentWrittenEventWithAuthContext(): DocumentWrittenEventWithAuthContext {
  return { data: undefined };
}

export const DocumentWrittenEventWithAuthContext: MessageFns<DocumentWrittenEventWithAuthContext> = {
  encode(message: DocumentWrittenEventWithAuthContext, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.data !== undefined) {
      DocumentEventData.encode(message.data, writer.uint32(10).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): DocumentWrittenEventWithAuthContext {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    const end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseDocumentWrittenEventWithAuthContext();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.data = DocumentEventData.decode(reader, reader.uint32());
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): DocumentWrittenEventWithAuthContext {
    return { data: isSet(object.data) ? DocumentEventData.fromJSON(object.data) : undefined };
  },

  toJSON(message: DocumentWrittenEventWithAuthContext): unknown {
    const obj: any = {};
    if (message.data !== undefined) {
      obj.data = DocumentEventData.toJSON(message.data);
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<DocumentWrittenEventWithAuthContext>, I>>(
    base?: I,
  ): DocumentWrittenEventWithAuthContext {
    return DocumentWrittenEventWithAuthContext.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<DocumentWrittenEventWithAuthContext>, I>>(
    object: I,
  ): DocumentWrittenEventWithAuthContext {
    const message = createBaseDocumentWrittenEventWithAuthContext();
    message.data = (object.data !== undefined && object.data !== null)
      ? DocumentEventData.fromPartial(object.data)
      : undefined;
    return message;
  },
};

type Builtin = Date | Function | Uint8Array | string | number | boolean | undefined;

export type DeepPartial<T> = T extends Builtin ? T
  : T extends Long ? string | number | Long : T extends globalThis.Array<infer U> ? globalThis.Array<DeepPartial<U>>
  : T extends ReadonlyArray<infer U> ? ReadonlyArray<DeepPartial<U>>
  : T extends {} ? { [K in keyof T]?: DeepPartial<T[K]> }
  : Partial<T>;

type KeysOfUnion<T> = T extends T ? keyof T : never;
export type Exact<P, I extends P> = P extends Builtin ? P
  : P & { [K in keyof P]: Exact<P[K], I[K]> } & { [K in Exclude<keyof I, KeysOfUnion<P>>]: never };

function isSet(value: any): boolean {
  return value !== null && value !== undefined;
}

export interface MessageFns<T> {
  encode(message: T, writer?: BinaryWriter): BinaryWriter;
  decode(input: BinaryReader | Uint8Array, length?: number): T;
  fromJSON(object: any): T;
  toJSON(message: T): unknown;
  create<I extends Exact<DeepPartial<T>, I>>(base?: I): T;
  fromPartial<I extends Exact<DeepPartial<T>, I>>(object: I): T;
}
