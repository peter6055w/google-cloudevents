// Code generated by protoc-gen-ts_proto. DO NOT EDIT.
// versions:
//   protoc-gen-ts_proto  v2.7.7
//   protoc               v6.32.0
// source: google/events/cloud/functions/v2/events.proto

/* eslint-disable */
import { BinaryReader, BinaryWriter } from "@bufbuild/protobuf/wire";
import Long from "long";
import { FunctionEventData } from "./data";

export const protobufPackage = "google.events.cloud.functions.v2";

/** The CloudEvent raised when a Function is created. */
export interface FunctionCreatedEvent {
  /** The data associated with the event. */
  data?: FunctionEventData | undefined;
}

/** The CloudEvent raised when a Function is updated. */
export interface FunctionUpdatedEvent {
  /** The data associated with the event. */
  data?: FunctionEventData | undefined;
}

/** The CloudEvent raised when a Function is deleted. */
export interface FunctionDeletedEvent {
  /** The data associated with the event. */
  data?: FunctionEventData | undefined;
}

function createBaseFunctionCreatedEvent(): FunctionCreatedEvent {
  return { data: undefined };
}

export const FunctionCreatedEvent: MessageFns<FunctionCreatedEvent> = {
  encode(message: FunctionCreatedEvent, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.data !== undefined) {
      FunctionEventData.encode(message.data, writer.uint32(10).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): FunctionCreatedEvent {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    const end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseFunctionCreatedEvent();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.data = FunctionEventData.decode(reader, reader.uint32());
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): FunctionCreatedEvent {
    return { data: isSet(object.data) ? FunctionEventData.fromJSON(object.data) : undefined };
  },

  toJSON(message: FunctionCreatedEvent): unknown {
    const obj: any = {};
    if (message.data !== undefined) {
      obj.data = FunctionEventData.toJSON(message.data);
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<FunctionCreatedEvent>, I>>(base?: I): FunctionCreatedEvent {
    return FunctionCreatedEvent.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<FunctionCreatedEvent>, I>>(object: I): FunctionCreatedEvent {
    const message = createBaseFunctionCreatedEvent();
    message.data = (object.data !== undefined && object.data !== null)
      ? FunctionEventData.fromPartial(object.data)
      : undefined;
    return message;
  },
};

function createBaseFunctionUpdatedEvent(): FunctionUpdatedEvent {
  return { data: undefined };
}

export const FunctionUpdatedEvent: MessageFns<FunctionUpdatedEvent> = {
  encode(message: FunctionUpdatedEvent, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.data !== undefined) {
      FunctionEventData.encode(message.data, writer.uint32(10).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): FunctionUpdatedEvent {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    const end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseFunctionUpdatedEvent();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.data = FunctionEventData.decode(reader, reader.uint32());
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): FunctionUpdatedEvent {
    return { data: isSet(object.data) ? FunctionEventData.fromJSON(object.data) : undefined };
  },

  toJSON(message: FunctionUpdatedEvent): unknown {
    const obj: any = {};
    if (message.data !== undefined) {
      obj.data = FunctionEventData.toJSON(message.data);
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<FunctionUpdatedEvent>, I>>(base?: I): FunctionUpdatedEvent {
    return FunctionUpdatedEvent.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<FunctionUpdatedEvent>, I>>(object: I): FunctionUpdatedEvent {
    const message = createBaseFunctionUpdatedEvent();
    message.data = (object.data !== undefined && object.data !== null)
      ? FunctionEventData.fromPartial(object.data)
      : undefined;
    return message;
  },
};

function createBaseFunctionDeletedEvent(): FunctionDeletedEvent {
  return { data: undefined };
}

export const FunctionDeletedEvent: MessageFns<FunctionDeletedEvent> = {
  encode(message: FunctionDeletedEvent, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.data !== undefined) {
      FunctionEventData.encode(message.data, writer.uint32(10).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): FunctionDeletedEvent {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    const end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseFunctionDeletedEvent();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.data = FunctionEventData.decode(reader, reader.uint32());
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): FunctionDeletedEvent {
    return { data: isSet(object.data) ? FunctionEventData.fromJSON(object.data) : undefined };
  },

  toJSON(message: FunctionDeletedEvent): unknown {
    const obj: any = {};
    if (message.data !== undefined) {
      obj.data = FunctionEventData.toJSON(message.data);
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<FunctionDeletedEvent>, I>>(base?: I): FunctionDeletedEvent {
    return FunctionDeletedEvent.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<FunctionDeletedEvent>, I>>(object: I): FunctionDeletedEvent {
    const message = createBaseFunctionDeletedEvent();
    message.data = (object.data !== undefined && object.data !== null)
      ? FunctionEventData.fromPartial(object.data)
      : undefined;
    return message;
  },
};

type Builtin = Date | Function | Uint8Array | string | number | boolean | undefined;

export type DeepPartial<T> = T extends Builtin ? T
  : T extends Long ? string | number | Long : T extends globalThis.Array<infer U> ? globalThis.Array<DeepPartial<U>>
  : T extends ReadonlyArray<infer U> ? ReadonlyArray<DeepPartial<U>>
  : T extends {} ? { [K in keyof T]?: DeepPartial<T[K]> }
  : Partial<T>;

type KeysOfUnion<T> = T extends T ? keyof T : never;
export type Exact<P, I extends P> = P extends Builtin ? P
  : P & { [K in keyof P]: Exact<P[K], I[K]> } & { [K in Exclude<keyof I, KeysOfUnion<P>>]: never };

function isSet(value: any): boolean {
  return value !== null && value !== undefined;
}

export interface MessageFns<T> {
  encode(message: T, writer?: BinaryWriter): BinaryWriter;
  decode(input: BinaryReader | Uint8Array, length?: number): T;
  fromJSON(object: any): T;
  toJSON(message: T): unknown;
  create<I extends Exact<DeepPartial<T>, I>>(base?: I): T;
  fromPartial<I extends Exact<DeepPartial<T>, I>>(object: I): T;
}
