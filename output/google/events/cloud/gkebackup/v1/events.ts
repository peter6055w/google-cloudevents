// Code generated by protoc-gen-ts_proto. DO NOT EDIT.
// versions:
//   protoc-gen-ts_proto  v2.7.7
//   protoc               v6.32.0
// source: google/events/cloud/gkebackup/v1/events.proto

/* eslint-disable */
import { BinaryReader, BinaryWriter } from "@bufbuild/protobuf/wire";
import Long from "long";
import { BackupEventData, BackupPlanEventData, RestoreEventData, RestorePlanEventData } from "./data";

export const protobufPackage = "google.events.cloud.gkebackup.v1";

/** The CloudEvent raised when a BackupPlan is created. */
export interface BackupPlanCreatedEvent {
  /** The data associated with the event. */
  data?: BackupPlanEventData | undefined;
}

/** The CloudEvent raised when a BackupPlan is updated. */
export interface BackupPlanUpdatedEvent {
  /** The data associated with the event. */
  data?: BackupPlanEventData | undefined;
}

/** The CloudEvent raised when a BackupPlan is deleted. */
export interface BackupPlanDeletedEvent {
  /** The data associated with the event. */
  data?: BackupPlanEventData | undefined;
}

/** The CloudEvent raised when a Backup is created. */
export interface BackupCreatedEvent {
  /** The data associated with the event. */
  data?: BackupEventData | undefined;
}

/** The CloudEvent raised when a Backup is updated. */
export interface BackupUpdatedEvent {
  /** The data associated with the event. */
  data?: BackupEventData | undefined;
}

/** The CloudEvent raised when a Backup is deleted. */
export interface BackupDeletedEvent {
  /** The data associated with the event. */
  data?: BackupEventData | undefined;
}

/** The CloudEvent raised when a RestorePlan is created. */
export interface RestorePlanCreatedEvent {
  /** The data associated with the event. */
  data?: RestorePlanEventData | undefined;
}

/** The CloudEvent raised when a RestorePlan is updated. */
export interface RestorePlanUpdatedEvent {
  /** The data associated with the event. */
  data?: RestorePlanEventData | undefined;
}

/** The CloudEvent raised when a RestorePlan is deleted. */
export interface RestorePlanDeletedEvent {
  /** The data associated with the event. */
  data?: RestorePlanEventData | undefined;
}

/** The CloudEvent raised when a Restore is created. */
export interface RestoreCreatedEvent {
  /** The data associated with the event. */
  data?: RestoreEventData | undefined;
}

/** The CloudEvent raised when a Restore is updated. */
export interface RestoreUpdatedEvent {
  /** The data associated with the event. */
  data?: RestoreEventData | undefined;
}

/** The CloudEvent raised when a Restore is deleted. */
export interface RestoreDeletedEvent {
  /** The data associated with the event. */
  data?: RestoreEventData | undefined;
}

function createBaseBackupPlanCreatedEvent(): BackupPlanCreatedEvent {
  return { data: undefined };
}

export const BackupPlanCreatedEvent: MessageFns<BackupPlanCreatedEvent> = {
  encode(message: BackupPlanCreatedEvent, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.data !== undefined) {
      BackupPlanEventData.encode(message.data, writer.uint32(10).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): BackupPlanCreatedEvent {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    const end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseBackupPlanCreatedEvent();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.data = BackupPlanEventData.decode(reader, reader.uint32());
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): BackupPlanCreatedEvent {
    return { data: isSet(object.data) ? BackupPlanEventData.fromJSON(object.data) : undefined };
  },

  toJSON(message: BackupPlanCreatedEvent): unknown {
    const obj: any = {};
    if (message.data !== undefined) {
      obj.data = BackupPlanEventData.toJSON(message.data);
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<BackupPlanCreatedEvent>, I>>(base?: I): BackupPlanCreatedEvent {
    return BackupPlanCreatedEvent.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<BackupPlanCreatedEvent>, I>>(object: I): BackupPlanCreatedEvent {
    const message = createBaseBackupPlanCreatedEvent();
    message.data = (object.data !== undefined && object.data !== null)
      ? BackupPlanEventData.fromPartial(object.data)
      : undefined;
    return message;
  },
};

function createBaseBackupPlanUpdatedEvent(): BackupPlanUpdatedEvent {
  return { data: undefined };
}

export const BackupPlanUpdatedEvent: MessageFns<BackupPlanUpdatedEvent> = {
  encode(message: BackupPlanUpdatedEvent, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.data !== undefined) {
      BackupPlanEventData.encode(message.data, writer.uint32(10).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): BackupPlanUpdatedEvent {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    const end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseBackupPlanUpdatedEvent();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.data = BackupPlanEventData.decode(reader, reader.uint32());
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): BackupPlanUpdatedEvent {
    return { data: isSet(object.data) ? BackupPlanEventData.fromJSON(object.data) : undefined };
  },

  toJSON(message: BackupPlanUpdatedEvent): unknown {
    const obj: any = {};
    if (message.data !== undefined) {
      obj.data = BackupPlanEventData.toJSON(message.data);
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<BackupPlanUpdatedEvent>, I>>(base?: I): BackupPlanUpdatedEvent {
    return BackupPlanUpdatedEvent.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<BackupPlanUpdatedEvent>, I>>(object: I): BackupPlanUpdatedEvent {
    const message = createBaseBackupPlanUpdatedEvent();
    message.data = (object.data !== undefined && object.data !== null)
      ? BackupPlanEventData.fromPartial(object.data)
      : undefined;
    return message;
  },
};

function createBaseBackupPlanDeletedEvent(): BackupPlanDeletedEvent {
  return { data: undefined };
}

export const BackupPlanDeletedEvent: MessageFns<BackupPlanDeletedEvent> = {
  encode(message: BackupPlanDeletedEvent, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.data !== undefined) {
      BackupPlanEventData.encode(message.data, writer.uint32(10).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): BackupPlanDeletedEvent {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    const end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseBackupPlanDeletedEvent();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.data = BackupPlanEventData.decode(reader, reader.uint32());
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): BackupPlanDeletedEvent {
    return { data: isSet(object.data) ? BackupPlanEventData.fromJSON(object.data) : undefined };
  },

  toJSON(message: BackupPlanDeletedEvent): unknown {
    const obj: any = {};
    if (message.data !== undefined) {
      obj.data = BackupPlanEventData.toJSON(message.data);
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<BackupPlanDeletedEvent>, I>>(base?: I): BackupPlanDeletedEvent {
    return BackupPlanDeletedEvent.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<BackupPlanDeletedEvent>, I>>(object: I): BackupPlanDeletedEvent {
    const message = createBaseBackupPlanDeletedEvent();
    message.data = (object.data !== undefined && object.data !== null)
      ? BackupPlanEventData.fromPartial(object.data)
      : undefined;
    return message;
  },
};

function createBaseBackupCreatedEvent(): BackupCreatedEvent {
  return { data: undefined };
}

export const BackupCreatedEvent: MessageFns<BackupCreatedEvent> = {
  encode(message: BackupCreatedEvent, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.data !== undefined) {
      BackupEventData.encode(message.data, writer.uint32(10).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): BackupCreatedEvent {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    const end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseBackupCreatedEvent();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.data = BackupEventData.decode(reader, reader.uint32());
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): BackupCreatedEvent {
    return { data: isSet(object.data) ? BackupEventData.fromJSON(object.data) : undefined };
  },

  toJSON(message: BackupCreatedEvent): unknown {
    const obj: any = {};
    if (message.data !== undefined) {
      obj.data = BackupEventData.toJSON(message.data);
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<BackupCreatedEvent>, I>>(base?: I): BackupCreatedEvent {
    return BackupCreatedEvent.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<BackupCreatedEvent>, I>>(object: I): BackupCreatedEvent {
    const message = createBaseBackupCreatedEvent();
    message.data = (object.data !== undefined && object.data !== null)
      ? BackupEventData.fromPartial(object.data)
      : undefined;
    return message;
  },
};

function createBaseBackupUpdatedEvent(): BackupUpdatedEvent {
  return { data: undefined };
}

export const BackupUpdatedEvent: MessageFns<BackupUpdatedEvent> = {
  encode(message: BackupUpdatedEvent, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.data !== undefined) {
      BackupEventData.encode(message.data, writer.uint32(10).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): BackupUpdatedEvent {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    const end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseBackupUpdatedEvent();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.data = BackupEventData.decode(reader, reader.uint32());
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): BackupUpdatedEvent {
    return { data: isSet(object.data) ? BackupEventData.fromJSON(object.data) : undefined };
  },

  toJSON(message: BackupUpdatedEvent): unknown {
    const obj: any = {};
    if (message.data !== undefined) {
      obj.data = BackupEventData.toJSON(message.data);
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<BackupUpdatedEvent>, I>>(base?: I): BackupUpdatedEvent {
    return BackupUpdatedEvent.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<BackupUpdatedEvent>, I>>(object: I): BackupUpdatedEvent {
    const message = createBaseBackupUpdatedEvent();
    message.data = (object.data !== undefined && object.data !== null)
      ? BackupEventData.fromPartial(object.data)
      : undefined;
    return message;
  },
};

function createBaseBackupDeletedEvent(): BackupDeletedEvent {
  return { data: undefined };
}

export const BackupDeletedEvent: MessageFns<BackupDeletedEvent> = {
  encode(message: BackupDeletedEvent, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.data !== undefined) {
      BackupEventData.encode(message.data, writer.uint32(10).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): BackupDeletedEvent {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    const end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseBackupDeletedEvent();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.data = BackupEventData.decode(reader, reader.uint32());
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): BackupDeletedEvent {
    return { data: isSet(object.data) ? BackupEventData.fromJSON(object.data) : undefined };
  },

  toJSON(message: BackupDeletedEvent): unknown {
    const obj: any = {};
    if (message.data !== undefined) {
      obj.data = BackupEventData.toJSON(message.data);
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<BackupDeletedEvent>, I>>(base?: I): BackupDeletedEvent {
    return BackupDeletedEvent.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<BackupDeletedEvent>, I>>(object: I): BackupDeletedEvent {
    const message = createBaseBackupDeletedEvent();
    message.data = (object.data !== undefined && object.data !== null)
      ? BackupEventData.fromPartial(object.data)
      : undefined;
    return message;
  },
};

function createBaseRestorePlanCreatedEvent(): RestorePlanCreatedEvent {
  return { data: undefined };
}

export const RestorePlanCreatedEvent: MessageFns<RestorePlanCreatedEvent> = {
  encode(message: RestorePlanCreatedEvent, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.data !== undefined) {
      RestorePlanEventData.encode(message.data, writer.uint32(10).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): RestorePlanCreatedEvent {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    const end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseRestorePlanCreatedEvent();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.data = RestorePlanEventData.decode(reader, reader.uint32());
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): RestorePlanCreatedEvent {
    return { data: isSet(object.data) ? RestorePlanEventData.fromJSON(object.data) : undefined };
  },

  toJSON(message: RestorePlanCreatedEvent): unknown {
    const obj: any = {};
    if (message.data !== undefined) {
      obj.data = RestorePlanEventData.toJSON(message.data);
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<RestorePlanCreatedEvent>, I>>(base?: I): RestorePlanCreatedEvent {
    return RestorePlanCreatedEvent.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<RestorePlanCreatedEvent>, I>>(object: I): RestorePlanCreatedEvent {
    const message = createBaseRestorePlanCreatedEvent();
    message.data = (object.data !== undefined && object.data !== null)
      ? RestorePlanEventData.fromPartial(object.data)
      : undefined;
    return message;
  },
};

function createBaseRestorePlanUpdatedEvent(): RestorePlanUpdatedEvent {
  return { data: undefined };
}

export const RestorePlanUpdatedEvent: MessageFns<RestorePlanUpdatedEvent> = {
  encode(message: RestorePlanUpdatedEvent, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.data !== undefined) {
      RestorePlanEventData.encode(message.data, writer.uint32(10).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): RestorePlanUpdatedEvent {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    const end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseRestorePlanUpdatedEvent();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.data = RestorePlanEventData.decode(reader, reader.uint32());
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): RestorePlanUpdatedEvent {
    return { data: isSet(object.data) ? RestorePlanEventData.fromJSON(object.data) : undefined };
  },

  toJSON(message: RestorePlanUpdatedEvent): unknown {
    const obj: any = {};
    if (message.data !== undefined) {
      obj.data = RestorePlanEventData.toJSON(message.data);
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<RestorePlanUpdatedEvent>, I>>(base?: I): RestorePlanUpdatedEvent {
    return RestorePlanUpdatedEvent.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<RestorePlanUpdatedEvent>, I>>(object: I): RestorePlanUpdatedEvent {
    const message = createBaseRestorePlanUpdatedEvent();
    message.data = (object.data !== undefined && object.data !== null)
      ? RestorePlanEventData.fromPartial(object.data)
      : undefined;
    return message;
  },
};

function createBaseRestorePlanDeletedEvent(): RestorePlanDeletedEvent {
  return { data: undefined };
}

export const RestorePlanDeletedEvent: MessageFns<RestorePlanDeletedEvent> = {
  encode(message: RestorePlanDeletedEvent, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.data !== undefined) {
      RestorePlanEventData.encode(message.data, writer.uint32(10).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): RestorePlanDeletedEvent {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    const end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseRestorePlanDeletedEvent();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.data = RestorePlanEventData.decode(reader, reader.uint32());
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): RestorePlanDeletedEvent {
    return { data: isSet(object.data) ? RestorePlanEventData.fromJSON(object.data) : undefined };
  },

  toJSON(message: RestorePlanDeletedEvent): unknown {
    const obj: any = {};
    if (message.data !== undefined) {
      obj.data = RestorePlanEventData.toJSON(message.data);
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<RestorePlanDeletedEvent>, I>>(base?: I): RestorePlanDeletedEvent {
    return RestorePlanDeletedEvent.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<RestorePlanDeletedEvent>, I>>(object: I): RestorePlanDeletedEvent {
    const message = createBaseRestorePlanDeletedEvent();
    message.data = (object.data !== undefined && object.data !== null)
      ? RestorePlanEventData.fromPartial(object.data)
      : undefined;
    return message;
  },
};

function createBaseRestoreCreatedEvent(): RestoreCreatedEvent {
  return { data: undefined };
}

export const RestoreCreatedEvent: MessageFns<RestoreCreatedEvent> = {
  encode(message: RestoreCreatedEvent, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.data !== undefined) {
      RestoreEventData.encode(message.data, writer.uint32(10).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): RestoreCreatedEvent {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    const end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseRestoreCreatedEvent();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.data = RestoreEventData.decode(reader, reader.uint32());
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): RestoreCreatedEvent {
    return { data: isSet(object.data) ? RestoreEventData.fromJSON(object.data) : undefined };
  },

  toJSON(message: RestoreCreatedEvent): unknown {
    const obj: any = {};
    if (message.data !== undefined) {
      obj.data = RestoreEventData.toJSON(message.data);
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<RestoreCreatedEvent>, I>>(base?: I): RestoreCreatedEvent {
    return RestoreCreatedEvent.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<RestoreCreatedEvent>, I>>(object: I): RestoreCreatedEvent {
    const message = createBaseRestoreCreatedEvent();
    message.data = (object.data !== undefined && object.data !== null)
      ? RestoreEventData.fromPartial(object.data)
      : undefined;
    return message;
  },
};

function createBaseRestoreUpdatedEvent(): RestoreUpdatedEvent {
  return { data: undefined };
}

export const RestoreUpdatedEvent: MessageFns<RestoreUpdatedEvent> = {
  encode(message: RestoreUpdatedEvent, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.data !== undefined) {
      RestoreEventData.encode(message.data, writer.uint32(10).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): RestoreUpdatedEvent {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    const end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseRestoreUpdatedEvent();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.data = RestoreEventData.decode(reader, reader.uint32());
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): RestoreUpdatedEvent {
    return { data: isSet(object.data) ? RestoreEventData.fromJSON(object.data) : undefined };
  },

  toJSON(message: RestoreUpdatedEvent): unknown {
    const obj: any = {};
    if (message.data !== undefined) {
      obj.data = RestoreEventData.toJSON(message.data);
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<RestoreUpdatedEvent>, I>>(base?: I): RestoreUpdatedEvent {
    return RestoreUpdatedEvent.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<RestoreUpdatedEvent>, I>>(object: I): RestoreUpdatedEvent {
    const message = createBaseRestoreUpdatedEvent();
    message.data = (object.data !== undefined && object.data !== null)
      ? RestoreEventData.fromPartial(object.data)
      : undefined;
    return message;
  },
};

function createBaseRestoreDeletedEvent(): RestoreDeletedEvent {
  return { data: undefined };
}

export const RestoreDeletedEvent: MessageFns<RestoreDeletedEvent> = {
  encode(message: RestoreDeletedEvent, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.data !== undefined) {
      RestoreEventData.encode(message.data, writer.uint32(10).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): RestoreDeletedEvent {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    const end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseRestoreDeletedEvent();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.data = RestoreEventData.decode(reader, reader.uint32());
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): RestoreDeletedEvent {
    return { data: isSet(object.data) ? RestoreEventData.fromJSON(object.data) : undefined };
  },

  toJSON(message: RestoreDeletedEvent): unknown {
    const obj: any = {};
    if (message.data !== undefined) {
      obj.data = RestoreEventData.toJSON(message.data);
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<RestoreDeletedEvent>, I>>(base?: I): RestoreDeletedEvent {
    return RestoreDeletedEvent.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<RestoreDeletedEvent>, I>>(object: I): RestoreDeletedEvent {
    const message = createBaseRestoreDeletedEvent();
    message.data = (object.data !== undefined && object.data !== null)
      ? RestoreEventData.fromPartial(object.data)
      : undefined;
    return message;
  },
};

type Builtin = Date | Function | Uint8Array | string | number | boolean | undefined;

export type DeepPartial<T> = T extends Builtin ? T
  : T extends Long ? string | number | Long : T extends globalThis.Array<infer U> ? globalThis.Array<DeepPartial<U>>
  : T extends ReadonlyArray<infer U> ? ReadonlyArray<DeepPartial<U>>
  : T extends {} ? { [K in keyof T]?: DeepPartial<T[K]> }
  : Partial<T>;

type KeysOfUnion<T> = T extends T ? keyof T : never;
export type Exact<P, I extends P> = P extends Builtin ? P
  : P & { [K in keyof P]: Exact<P[K], I[K]> } & { [K in Exclude<keyof I, KeysOfUnion<P>>]: never };

function isSet(value: any): boolean {
  return value !== null && value !== undefined;
}

export interface MessageFns<T> {
  encode(message: T, writer?: BinaryWriter): BinaryWriter;
  decode(input: BinaryReader | Uint8Array, length?: number): T;
  fromJSON(object: any): T;
  toJSON(message: T): unknown;
  create<I extends Exact<DeepPartial<T>, I>>(base?: I): T;
  fromPartial<I extends Exact<DeepPartial<T>, I>>(object: I): T;
}
