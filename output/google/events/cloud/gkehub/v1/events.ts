// Code generated by protoc-gen-ts_proto. DO NOT EDIT.
// versions:
//   protoc-gen-ts_proto  v2.7.7
//   protoc               v6.32.0
// source: google/events/cloud/gkehub/v1/events.proto

/* eslint-disable */
import { BinaryReader, BinaryWriter } from "@bufbuild/protobuf/wire";
import Long from "long";
import { FeatureEventData, MembershipBindingEventData, MembershipEventData, ScopeEventData } from "./data";

export const protobufPackage = "google.events.cloud.gkehub.v1";

/** The CloudEvent raised when a Membership is created. */
export interface MembershipCreatedEvent {
  /** The data associated with the event. */
  data?: MembershipEventData | undefined;
}

/** The CloudEvent raised when a Feature is created. */
export interface FeatureCreatedEvent {
  /** The data associated with the event. */
  data?: FeatureEventData | undefined;
}

/** The CloudEvent raised when a Membership is deleted. */
export interface MembershipDeletedEvent {
  /** The data associated with the event. */
  data?: MembershipEventData | undefined;
}

/** The CloudEvent raised when a Feature is deleted. */
export interface FeatureDeletedEvent {
  /** The data associated with the event. */
  data?: FeatureEventData | undefined;
}

/** The CloudEvent raised when a Membership is updated. */
export interface MembershipUpdatedEvent {
  /** The data associated with the event. */
  data?: MembershipEventData | undefined;
}

/** The CloudEvent raised when a Feature is updated. */
export interface FeatureUpdatedEvent {
  /** The data associated with the event. */
  data?: FeatureEventData | undefined;
}

/** The CloudEvent raised when a Scope is created. */
export interface ScopeCreatedEvent {
  /** The data associated with the event. */
  data?: ScopeEventData | undefined;
}

/** The CloudEvent raised when a Scope is deleted. */
export interface ScopeDeletedEvent {
  /** The data associated with the event. */
  data?: ScopeEventData | undefined;
}

/** The CloudEvent raised when a MembershipBinding is created. */
export interface MembershipBindingCreatedEvent {
  /** The data associated with the event. */
  data?: MembershipBindingEventData | undefined;
}

/** The CloudEvent raised when a MembershipBinding is updated. */
export interface MembershipBindingUpdatedEvent {
  /** The data associated with the event. */
  data?: MembershipBindingEventData | undefined;
}

/** The CloudEvent raised when a MembershipBinding is deleted. */
export interface MembershipBindingDeletedEvent {
  /** The data associated with the event. */
  data?: MembershipBindingEventData | undefined;
}

function createBaseMembershipCreatedEvent(): MembershipCreatedEvent {
  return { data: undefined };
}

export const MembershipCreatedEvent: MessageFns<MembershipCreatedEvent> = {
  encode(message: MembershipCreatedEvent, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.data !== undefined) {
      MembershipEventData.encode(message.data, writer.uint32(10).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): MembershipCreatedEvent {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    const end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseMembershipCreatedEvent();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.data = MembershipEventData.decode(reader, reader.uint32());
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): MembershipCreatedEvent {
    return { data: isSet(object.data) ? MembershipEventData.fromJSON(object.data) : undefined };
  },

  toJSON(message: MembershipCreatedEvent): unknown {
    const obj: any = {};
    if (message.data !== undefined) {
      obj.data = MembershipEventData.toJSON(message.data);
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<MembershipCreatedEvent>, I>>(base?: I): MembershipCreatedEvent {
    return MembershipCreatedEvent.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<MembershipCreatedEvent>, I>>(object: I): MembershipCreatedEvent {
    const message = createBaseMembershipCreatedEvent();
    message.data = (object.data !== undefined && object.data !== null)
      ? MembershipEventData.fromPartial(object.data)
      : undefined;
    return message;
  },
};

function createBaseFeatureCreatedEvent(): FeatureCreatedEvent {
  return { data: undefined };
}

export const FeatureCreatedEvent: MessageFns<FeatureCreatedEvent> = {
  encode(message: FeatureCreatedEvent, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.data !== undefined) {
      FeatureEventData.encode(message.data, writer.uint32(10).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): FeatureCreatedEvent {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    const end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseFeatureCreatedEvent();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.data = FeatureEventData.decode(reader, reader.uint32());
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): FeatureCreatedEvent {
    return { data: isSet(object.data) ? FeatureEventData.fromJSON(object.data) : undefined };
  },

  toJSON(message: FeatureCreatedEvent): unknown {
    const obj: any = {};
    if (message.data !== undefined) {
      obj.data = FeatureEventData.toJSON(message.data);
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<FeatureCreatedEvent>, I>>(base?: I): FeatureCreatedEvent {
    return FeatureCreatedEvent.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<FeatureCreatedEvent>, I>>(object: I): FeatureCreatedEvent {
    const message = createBaseFeatureCreatedEvent();
    message.data = (object.data !== undefined && object.data !== null)
      ? FeatureEventData.fromPartial(object.data)
      : undefined;
    return message;
  },
};

function createBaseMembershipDeletedEvent(): MembershipDeletedEvent {
  return { data: undefined };
}

export const MembershipDeletedEvent: MessageFns<MembershipDeletedEvent> = {
  encode(message: MembershipDeletedEvent, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.data !== undefined) {
      MembershipEventData.encode(message.data, writer.uint32(10).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): MembershipDeletedEvent {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    const end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseMembershipDeletedEvent();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.data = MembershipEventData.decode(reader, reader.uint32());
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): MembershipDeletedEvent {
    return { data: isSet(object.data) ? MembershipEventData.fromJSON(object.data) : undefined };
  },

  toJSON(message: MembershipDeletedEvent): unknown {
    const obj: any = {};
    if (message.data !== undefined) {
      obj.data = MembershipEventData.toJSON(message.data);
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<MembershipDeletedEvent>, I>>(base?: I): MembershipDeletedEvent {
    return MembershipDeletedEvent.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<MembershipDeletedEvent>, I>>(object: I): MembershipDeletedEvent {
    const message = createBaseMembershipDeletedEvent();
    message.data = (object.data !== undefined && object.data !== null)
      ? MembershipEventData.fromPartial(object.data)
      : undefined;
    return message;
  },
};

function createBaseFeatureDeletedEvent(): FeatureDeletedEvent {
  return { data: undefined };
}

export const FeatureDeletedEvent: MessageFns<FeatureDeletedEvent> = {
  encode(message: FeatureDeletedEvent, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.data !== undefined) {
      FeatureEventData.encode(message.data, writer.uint32(10).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): FeatureDeletedEvent {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    const end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseFeatureDeletedEvent();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.data = FeatureEventData.decode(reader, reader.uint32());
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): FeatureDeletedEvent {
    return { data: isSet(object.data) ? FeatureEventData.fromJSON(object.data) : undefined };
  },

  toJSON(message: FeatureDeletedEvent): unknown {
    const obj: any = {};
    if (message.data !== undefined) {
      obj.data = FeatureEventData.toJSON(message.data);
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<FeatureDeletedEvent>, I>>(base?: I): FeatureDeletedEvent {
    return FeatureDeletedEvent.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<FeatureDeletedEvent>, I>>(object: I): FeatureDeletedEvent {
    const message = createBaseFeatureDeletedEvent();
    message.data = (object.data !== undefined && object.data !== null)
      ? FeatureEventData.fromPartial(object.data)
      : undefined;
    return message;
  },
};

function createBaseMembershipUpdatedEvent(): MembershipUpdatedEvent {
  return { data: undefined };
}

export const MembershipUpdatedEvent: MessageFns<MembershipUpdatedEvent> = {
  encode(message: MembershipUpdatedEvent, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.data !== undefined) {
      MembershipEventData.encode(message.data, writer.uint32(10).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): MembershipUpdatedEvent {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    const end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseMembershipUpdatedEvent();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.data = MembershipEventData.decode(reader, reader.uint32());
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): MembershipUpdatedEvent {
    return { data: isSet(object.data) ? MembershipEventData.fromJSON(object.data) : undefined };
  },

  toJSON(message: MembershipUpdatedEvent): unknown {
    const obj: any = {};
    if (message.data !== undefined) {
      obj.data = MembershipEventData.toJSON(message.data);
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<MembershipUpdatedEvent>, I>>(base?: I): MembershipUpdatedEvent {
    return MembershipUpdatedEvent.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<MembershipUpdatedEvent>, I>>(object: I): MembershipUpdatedEvent {
    const message = createBaseMembershipUpdatedEvent();
    message.data = (object.data !== undefined && object.data !== null)
      ? MembershipEventData.fromPartial(object.data)
      : undefined;
    return message;
  },
};

function createBaseFeatureUpdatedEvent(): FeatureUpdatedEvent {
  return { data: undefined };
}

export const FeatureUpdatedEvent: MessageFns<FeatureUpdatedEvent> = {
  encode(message: FeatureUpdatedEvent, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.data !== undefined) {
      FeatureEventData.encode(message.data, writer.uint32(10).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): FeatureUpdatedEvent {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    const end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseFeatureUpdatedEvent();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.data = FeatureEventData.decode(reader, reader.uint32());
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): FeatureUpdatedEvent {
    return { data: isSet(object.data) ? FeatureEventData.fromJSON(object.data) : undefined };
  },

  toJSON(message: FeatureUpdatedEvent): unknown {
    const obj: any = {};
    if (message.data !== undefined) {
      obj.data = FeatureEventData.toJSON(message.data);
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<FeatureUpdatedEvent>, I>>(base?: I): FeatureUpdatedEvent {
    return FeatureUpdatedEvent.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<FeatureUpdatedEvent>, I>>(object: I): FeatureUpdatedEvent {
    const message = createBaseFeatureUpdatedEvent();
    message.data = (object.data !== undefined && object.data !== null)
      ? FeatureEventData.fromPartial(object.data)
      : undefined;
    return message;
  },
};

function createBaseScopeCreatedEvent(): ScopeCreatedEvent {
  return { data: undefined };
}

export const ScopeCreatedEvent: MessageFns<ScopeCreatedEvent> = {
  encode(message: ScopeCreatedEvent, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.data !== undefined) {
      ScopeEventData.encode(message.data, writer.uint32(10).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): ScopeCreatedEvent {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    const end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseScopeCreatedEvent();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.data = ScopeEventData.decode(reader, reader.uint32());
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): ScopeCreatedEvent {
    return { data: isSet(object.data) ? ScopeEventData.fromJSON(object.data) : undefined };
  },

  toJSON(message: ScopeCreatedEvent): unknown {
    const obj: any = {};
    if (message.data !== undefined) {
      obj.data = ScopeEventData.toJSON(message.data);
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<ScopeCreatedEvent>, I>>(base?: I): ScopeCreatedEvent {
    return ScopeCreatedEvent.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<ScopeCreatedEvent>, I>>(object: I): ScopeCreatedEvent {
    const message = createBaseScopeCreatedEvent();
    message.data = (object.data !== undefined && object.data !== null)
      ? ScopeEventData.fromPartial(object.data)
      : undefined;
    return message;
  },
};

function createBaseScopeDeletedEvent(): ScopeDeletedEvent {
  return { data: undefined };
}

export const ScopeDeletedEvent: MessageFns<ScopeDeletedEvent> = {
  encode(message: ScopeDeletedEvent, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.data !== undefined) {
      ScopeEventData.encode(message.data, writer.uint32(10).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): ScopeDeletedEvent {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    const end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseScopeDeletedEvent();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.data = ScopeEventData.decode(reader, reader.uint32());
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): ScopeDeletedEvent {
    return { data: isSet(object.data) ? ScopeEventData.fromJSON(object.data) : undefined };
  },

  toJSON(message: ScopeDeletedEvent): unknown {
    const obj: any = {};
    if (message.data !== undefined) {
      obj.data = ScopeEventData.toJSON(message.data);
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<ScopeDeletedEvent>, I>>(base?: I): ScopeDeletedEvent {
    return ScopeDeletedEvent.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<ScopeDeletedEvent>, I>>(object: I): ScopeDeletedEvent {
    const message = createBaseScopeDeletedEvent();
    message.data = (object.data !== undefined && object.data !== null)
      ? ScopeEventData.fromPartial(object.data)
      : undefined;
    return message;
  },
};

function createBaseMembershipBindingCreatedEvent(): MembershipBindingCreatedEvent {
  return { data: undefined };
}

export const MembershipBindingCreatedEvent: MessageFns<MembershipBindingCreatedEvent> = {
  encode(message: MembershipBindingCreatedEvent, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.data !== undefined) {
      MembershipBindingEventData.encode(message.data, writer.uint32(10).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): MembershipBindingCreatedEvent {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    const end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseMembershipBindingCreatedEvent();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.data = MembershipBindingEventData.decode(reader, reader.uint32());
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): MembershipBindingCreatedEvent {
    return { data: isSet(object.data) ? MembershipBindingEventData.fromJSON(object.data) : undefined };
  },

  toJSON(message: MembershipBindingCreatedEvent): unknown {
    const obj: any = {};
    if (message.data !== undefined) {
      obj.data = MembershipBindingEventData.toJSON(message.data);
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<MembershipBindingCreatedEvent>, I>>(base?: I): MembershipBindingCreatedEvent {
    return MembershipBindingCreatedEvent.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<MembershipBindingCreatedEvent>, I>>(
    object: I,
  ): MembershipBindingCreatedEvent {
    const message = createBaseMembershipBindingCreatedEvent();
    message.data = (object.data !== undefined && object.data !== null)
      ? MembershipBindingEventData.fromPartial(object.data)
      : undefined;
    return message;
  },
};

function createBaseMembershipBindingUpdatedEvent(): MembershipBindingUpdatedEvent {
  return { data: undefined };
}

export const MembershipBindingUpdatedEvent: MessageFns<MembershipBindingUpdatedEvent> = {
  encode(message: MembershipBindingUpdatedEvent, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.data !== undefined) {
      MembershipBindingEventData.encode(message.data, writer.uint32(10).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): MembershipBindingUpdatedEvent {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    const end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseMembershipBindingUpdatedEvent();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.data = MembershipBindingEventData.decode(reader, reader.uint32());
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): MembershipBindingUpdatedEvent {
    return { data: isSet(object.data) ? MembershipBindingEventData.fromJSON(object.data) : undefined };
  },

  toJSON(message: MembershipBindingUpdatedEvent): unknown {
    const obj: any = {};
    if (message.data !== undefined) {
      obj.data = MembershipBindingEventData.toJSON(message.data);
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<MembershipBindingUpdatedEvent>, I>>(base?: I): MembershipBindingUpdatedEvent {
    return MembershipBindingUpdatedEvent.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<MembershipBindingUpdatedEvent>, I>>(
    object: I,
  ): MembershipBindingUpdatedEvent {
    const message = createBaseMembershipBindingUpdatedEvent();
    message.data = (object.data !== undefined && object.data !== null)
      ? MembershipBindingEventData.fromPartial(object.data)
      : undefined;
    return message;
  },
};

function createBaseMembershipBindingDeletedEvent(): MembershipBindingDeletedEvent {
  return { data: undefined };
}

export const MembershipBindingDeletedEvent: MessageFns<MembershipBindingDeletedEvent> = {
  encode(message: MembershipBindingDeletedEvent, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.data !== undefined) {
      MembershipBindingEventData.encode(message.data, writer.uint32(10).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): MembershipBindingDeletedEvent {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    const end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseMembershipBindingDeletedEvent();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.data = MembershipBindingEventData.decode(reader, reader.uint32());
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): MembershipBindingDeletedEvent {
    return { data: isSet(object.data) ? MembershipBindingEventData.fromJSON(object.data) : undefined };
  },

  toJSON(message: MembershipBindingDeletedEvent): unknown {
    const obj: any = {};
    if (message.data !== undefined) {
      obj.data = MembershipBindingEventData.toJSON(message.data);
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<MembershipBindingDeletedEvent>, I>>(base?: I): MembershipBindingDeletedEvent {
    return MembershipBindingDeletedEvent.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<MembershipBindingDeletedEvent>, I>>(
    object: I,
  ): MembershipBindingDeletedEvent {
    const message = createBaseMembershipBindingDeletedEvent();
    message.data = (object.data !== undefined && object.data !== null)
      ? MembershipBindingEventData.fromPartial(object.data)
      : undefined;
    return message;
  },
};

type Builtin = Date | Function | Uint8Array | string | number | boolean | undefined;

export type DeepPartial<T> = T extends Builtin ? T
  : T extends Long ? string | number | Long : T extends globalThis.Array<infer U> ? globalThis.Array<DeepPartial<U>>
  : T extends ReadonlyArray<infer U> ? ReadonlyArray<DeepPartial<U>>
  : T extends {} ? { [K in keyof T]?: DeepPartial<T[K]> }
  : Partial<T>;

type KeysOfUnion<T> = T extends T ? keyof T : never;
export type Exact<P, I extends P> = P extends Builtin ? P
  : P & { [K in keyof P]: Exact<P[K], I[K]> } & { [K in Exclude<keyof I, KeysOfUnion<P>>]: never };

function isSet(value: any): boolean {
  return value !== null && value !== undefined;
}

export interface MessageFns<T> {
  encode(message: T, writer?: BinaryWriter): BinaryWriter;
  decode(input: BinaryReader | Uint8Array, length?: number): T;
  fromJSON(object: any): T;
  toJSON(message: T): unknown;
  create<I extends Exact<DeepPartial<T>, I>>(base?: I): T;
  fromPartial<I extends Exact<DeepPartial<T>, I>>(object: I): T;
}
