// Code generated by protoc-gen-ts_proto. DO NOT EDIT.
// versions:
//   protoc-gen-ts_proto  v2.7.7
//   protoc               v6.32.0
// source: google/events/cloud/iot/v1/events.proto

/* eslint-disable */
import { BinaryReader, BinaryWriter } from "@bufbuild/protobuf/wire";
import Long from "long";
import { DeviceEventData, RegistryEventData } from "./data";

export const protobufPackage = "google.events.cloud.iot.v1";

/** CreateDevice event. */
export interface CreateDeviceEvent {
  /** The data associated with the event. */
  data?: DeviceEventData | undefined;
}

/** UpdateDevice event. */
export interface UpdateDeviceEvent {
  /** The data associated with the event. */
  data?: DeviceEventData | undefined;
}

/** DeleteDevice event. */
export interface DeleteDeviceEvent {
  /** The data associated with the event. */
  data?: DeviceEventData | undefined;
}

/** CreateDeviceRegistry event. */
export interface CreateDeviceRegistryEvent {
  /** The data associated with the event. */
  data?: RegistryEventData | undefined;
}

/** UpdateDeviceRegistry event. */
export interface UpdateDeviceRegistryEvent {
  /** The data associated with the event. */
  data?: RegistryEventData | undefined;
}

/** DeleteDeviceRegistry event. */
export interface DeleteDeviceRegistryEvent {
  /** The data associated with the event. */
  data?: RegistryEventData | undefined;
}

function createBaseCreateDeviceEvent(): CreateDeviceEvent {
  return { data: undefined };
}

export const CreateDeviceEvent: MessageFns<CreateDeviceEvent> = {
  encode(message: CreateDeviceEvent, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.data !== undefined) {
      DeviceEventData.encode(message.data, writer.uint32(10).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): CreateDeviceEvent {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    const end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseCreateDeviceEvent();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.data = DeviceEventData.decode(reader, reader.uint32());
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): CreateDeviceEvent {
    return { data: isSet(object.data) ? DeviceEventData.fromJSON(object.data) : undefined };
  },

  toJSON(message: CreateDeviceEvent): unknown {
    const obj: any = {};
    if (message.data !== undefined) {
      obj.data = DeviceEventData.toJSON(message.data);
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<CreateDeviceEvent>, I>>(base?: I): CreateDeviceEvent {
    return CreateDeviceEvent.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<CreateDeviceEvent>, I>>(object: I): CreateDeviceEvent {
    const message = createBaseCreateDeviceEvent();
    message.data = (object.data !== undefined && object.data !== null)
      ? DeviceEventData.fromPartial(object.data)
      : undefined;
    return message;
  },
};

function createBaseUpdateDeviceEvent(): UpdateDeviceEvent {
  return { data: undefined };
}

export const UpdateDeviceEvent: MessageFns<UpdateDeviceEvent> = {
  encode(message: UpdateDeviceEvent, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.data !== undefined) {
      DeviceEventData.encode(message.data, writer.uint32(10).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): UpdateDeviceEvent {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    const end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseUpdateDeviceEvent();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.data = DeviceEventData.decode(reader, reader.uint32());
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): UpdateDeviceEvent {
    return { data: isSet(object.data) ? DeviceEventData.fromJSON(object.data) : undefined };
  },

  toJSON(message: UpdateDeviceEvent): unknown {
    const obj: any = {};
    if (message.data !== undefined) {
      obj.data = DeviceEventData.toJSON(message.data);
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<UpdateDeviceEvent>, I>>(base?: I): UpdateDeviceEvent {
    return UpdateDeviceEvent.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<UpdateDeviceEvent>, I>>(object: I): UpdateDeviceEvent {
    const message = createBaseUpdateDeviceEvent();
    message.data = (object.data !== undefined && object.data !== null)
      ? DeviceEventData.fromPartial(object.data)
      : undefined;
    return message;
  },
};

function createBaseDeleteDeviceEvent(): DeleteDeviceEvent {
  return { data: undefined };
}

export const DeleteDeviceEvent: MessageFns<DeleteDeviceEvent> = {
  encode(message: DeleteDeviceEvent, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.data !== undefined) {
      DeviceEventData.encode(message.data, writer.uint32(10).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): DeleteDeviceEvent {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    const end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseDeleteDeviceEvent();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.data = DeviceEventData.decode(reader, reader.uint32());
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): DeleteDeviceEvent {
    return { data: isSet(object.data) ? DeviceEventData.fromJSON(object.data) : undefined };
  },

  toJSON(message: DeleteDeviceEvent): unknown {
    const obj: any = {};
    if (message.data !== undefined) {
      obj.data = DeviceEventData.toJSON(message.data);
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<DeleteDeviceEvent>, I>>(base?: I): DeleteDeviceEvent {
    return DeleteDeviceEvent.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<DeleteDeviceEvent>, I>>(object: I): DeleteDeviceEvent {
    const message = createBaseDeleteDeviceEvent();
    message.data = (object.data !== undefined && object.data !== null)
      ? DeviceEventData.fromPartial(object.data)
      : undefined;
    return message;
  },
};

function createBaseCreateDeviceRegistryEvent(): CreateDeviceRegistryEvent {
  return { data: undefined };
}

export const CreateDeviceRegistryEvent: MessageFns<CreateDeviceRegistryEvent> = {
  encode(message: CreateDeviceRegistryEvent, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.data !== undefined) {
      RegistryEventData.encode(message.data, writer.uint32(10).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): CreateDeviceRegistryEvent {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    const end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseCreateDeviceRegistryEvent();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.data = RegistryEventData.decode(reader, reader.uint32());
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): CreateDeviceRegistryEvent {
    return { data: isSet(object.data) ? RegistryEventData.fromJSON(object.data) : undefined };
  },

  toJSON(message: CreateDeviceRegistryEvent): unknown {
    const obj: any = {};
    if (message.data !== undefined) {
      obj.data = RegistryEventData.toJSON(message.data);
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<CreateDeviceRegistryEvent>, I>>(base?: I): CreateDeviceRegistryEvent {
    return CreateDeviceRegistryEvent.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<CreateDeviceRegistryEvent>, I>>(object: I): CreateDeviceRegistryEvent {
    const message = createBaseCreateDeviceRegistryEvent();
    message.data = (object.data !== undefined && object.data !== null)
      ? RegistryEventData.fromPartial(object.data)
      : undefined;
    return message;
  },
};

function createBaseUpdateDeviceRegistryEvent(): UpdateDeviceRegistryEvent {
  return { data: undefined };
}

export const UpdateDeviceRegistryEvent: MessageFns<UpdateDeviceRegistryEvent> = {
  encode(message: UpdateDeviceRegistryEvent, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.data !== undefined) {
      RegistryEventData.encode(message.data, writer.uint32(10).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): UpdateDeviceRegistryEvent {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    const end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseUpdateDeviceRegistryEvent();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.data = RegistryEventData.decode(reader, reader.uint32());
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): UpdateDeviceRegistryEvent {
    return { data: isSet(object.data) ? RegistryEventData.fromJSON(object.data) : undefined };
  },

  toJSON(message: UpdateDeviceRegistryEvent): unknown {
    const obj: any = {};
    if (message.data !== undefined) {
      obj.data = RegistryEventData.toJSON(message.data);
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<UpdateDeviceRegistryEvent>, I>>(base?: I): UpdateDeviceRegistryEvent {
    return UpdateDeviceRegistryEvent.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<UpdateDeviceRegistryEvent>, I>>(object: I): UpdateDeviceRegistryEvent {
    const message = createBaseUpdateDeviceRegistryEvent();
    message.data = (object.data !== undefined && object.data !== null)
      ? RegistryEventData.fromPartial(object.data)
      : undefined;
    return message;
  },
};

function createBaseDeleteDeviceRegistryEvent(): DeleteDeviceRegistryEvent {
  return { data: undefined };
}

export const DeleteDeviceRegistryEvent: MessageFns<DeleteDeviceRegistryEvent> = {
  encode(message: DeleteDeviceRegistryEvent, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.data !== undefined) {
      RegistryEventData.encode(message.data, writer.uint32(10).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): DeleteDeviceRegistryEvent {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    const end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseDeleteDeviceRegistryEvent();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.data = RegistryEventData.decode(reader, reader.uint32());
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): DeleteDeviceRegistryEvent {
    return { data: isSet(object.data) ? RegistryEventData.fromJSON(object.data) : undefined };
  },

  toJSON(message: DeleteDeviceRegistryEvent): unknown {
    const obj: any = {};
    if (message.data !== undefined) {
      obj.data = RegistryEventData.toJSON(message.data);
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<DeleteDeviceRegistryEvent>, I>>(base?: I): DeleteDeviceRegistryEvent {
    return DeleteDeviceRegistryEvent.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<DeleteDeviceRegistryEvent>, I>>(object: I): DeleteDeviceRegistryEvent {
    const message = createBaseDeleteDeviceRegistryEvent();
    message.data = (object.data !== undefined && object.data !== null)
      ? RegistryEventData.fromPartial(object.data)
      : undefined;
    return message;
  },
};

type Builtin = Date | Function | Uint8Array | string | number | boolean | undefined;

export type DeepPartial<T> = T extends Builtin ? T
  : T extends Long ? string | number | Long : T extends globalThis.Array<infer U> ? globalThis.Array<DeepPartial<U>>
  : T extends ReadonlyArray<infer U> ? ReadonlyArray<DeepPartial<U>>
  : T extends {} ? { [K in keyof T]?: DeepPartial<T[K]> }
  : Partial<T>;

type KeysOfUnion<T> = T extends T ? keyof T : never;
export type Exact<P, I extends P> = P extends Builtin ? P
  : P & { [K in keyof P]: Exact<P[K], I[K]> } & { [K in Exclude<keyof I, KeysOfUnion<P>>]: never };

function isSet(value: any): boolean {
  return value !== null && value !== undefined;
}

export interface MessageFns<T> {
  encode(message: T, writer?: BinaryWriter): BinaryWriter;
  decode(input: BinaryReader | Uint8Array, length?: number): T;
  fromJSON(object: any): T;
  toJSON(message: T): unknown;
  create<I extends Exact<DeepPartial<T>, I>>(base?: I): T;
  fromPartial<I extends Exact<DeepPartial<T>, I>>(object: I): T;
}
