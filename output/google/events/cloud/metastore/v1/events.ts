// Code generated by protoc-gen-ts_proto. DO NOT EDIT.
// versions:
//   protoc-gen-ts_proto  v2.7.7
//   protoc               v6.32.0
// source: google/events/cloud/metastore/v1/events.proto

/* eslint-disable */
import { BinaryReader, BinaryWriter } from "@bufbuild/protobuf/wire";
import Long from "long";
import { BackupEventData, FederationEventData, MetadataImportEventData, ServiceEventData } from "./data";

export const protobufPackage = "google.events.cloud.metastore.v1";

/** The CloudEvent raised when a Federation is created. */
export interface FederationCreatedEvent {
  /** The data associated with the event. */
  data?: FederationEventData | undefined;
}

/** The CloudEvent raised when a Federation is updated. */
export interface FederationUpdatedEvent {
  /** The data associated with the event. */
  data?: FederationEventData | undefined;
}

/** The CloudEvent raised when a Federation is deleted. */
export interface FederationDeletedEvent {
  /** The data associated with the event. */
  data?: FederationEventData | undefined;
}

/** The CloudEvent raised when a Service is created. */
export interface ServiceCreatedEvent {
  /** The data associated with the event. */
  data?: ServiceEventData | undefined;
}

/** The CloudEvent raised when a Service is updated. */
export interface ServiceUpdatedEvent {
  /** The data associated with the event. */
  data?: ServiceEventData | undefined;
}

/** The CloudEvent raised when a Service is deleted. */
export interface ServiceDeletedEvent {
  /** The data associated with the event. */
  data?: ServiceEventData | undefined;
}

/** The CloudEvent raised when a MetadataImport is created. */
export interface MetadataImportCreatedEvent {
  /** The data associated with the event. */
  data?: MetadataImportEventData | undefined;
}

/** The CloudEvent raised when a MetadataImport is updated. */
export interface MetadataImportUpdatedEvent {
  /** The data associated with the event. */
  data?: MetadataImportEventData | undefined;
}

/** The CloudEvent raised when a Backup is created. */
export interface BackupCreatedEvent {
  /** The data associated with the event. */
  data?: BackupEventData | undefined;
}

/** The CloudEvent raised when a Backup is deleted. */
export interface BackupDeletedEvent {
  /** The data associated with the event. */
  data?: BackupEventData | undefined;
}

function createBaseFederationCreatedEvent(): FederationCreatedEvent {
  return { data: undefined };
}

export const FederationCreatedEvent: MessageFns<FederationCreatedEvent> = {
  encode(message: FederationCreatedEvent, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.data !== undefined) {
      FederationEventData.encode(message.data, writer.uint32(10).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): FederationCreatedEvent {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    const end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseFederationCreatedEvent();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.data = FederationEventData.decode(reader, reader.uint32());
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): FederationCreatedEvent {
    return { data: isSet(object.data) ? FederationEventData.fromJSON(object.data) : undefined };
  },

  toJSON(message: FederationCreatedEvent): unknown {
    const obj: any = {};
    if (message.data !== undefined) {
      obj.data = FederationEventData.toJSON(message.data);
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<FederationCreatedEvent>, I>>(base?: I): FederationCreatedEvent {
    return FederationCreatedEvent.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<FederationCreatedEvent>, I>>(object: I): FederationCreatedEvent {
    const message = createBaseFederationCreatedEvent();
    message.data = (object.data !== undefined && object.data !== null)
      ? FederationEventData.fromPartial(object.data)
      : undefined;
    return message;
  },
};

function createBaseFederationUpdatedEvent(): FederationUpdatedEvent {
  return { data: undefined };
}

export const FederationUpdatedEvent: MessageFns<FederationUpdatedEvent> = {
  encode(message: FederationUpdatedEvent, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.data !== undefined) {
      FederationEventData.encode(message.data, writer.uint32(10).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): FederationUpdatedEvent {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    const end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseFederationUpdatedEvent();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.data = FederationEventData.decode(reader, reader.uint32());
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): FederationUpdatedEvent {
    return { data: isSet(object.data) ? FederationEventData.fromJSON(object.data) : undefined };
  },

  toJSON(message: FederationUpdatedEvent): unknown {
    const obj: any = {};
    if (message.data !== undefined) {
      obj.data = FederationEventData.toJSON(message.data);
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<FederationUpdatedEvent>, I>>(base?: I): FederationUpdatedEvent {
    return FederationUpdatedEvent.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<FederationUpdatedEvent>, I>>(object: I): FederationUpdatedEvent {
    const message = createBaseFederationUpdatedEvent();
    message.data = (object.data !== undefined && object.data !== null)
      ? FederationEventData.fromPartial(object.data)
      : undefined;
    return message;
  },
};

function createBaseFederationDeletedEvent(): FederationDeletedEvent {
  return { data: undefined };
}

export const FederationDeletedEvent: MessageFns<FederationDeletedEvent> = {
  encode(message: FederationDeletedEvent, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.data !== undefined) {
      FederationEventData.encode(message.data, writer.uint32(10).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): FederationDeletedEvent {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    const end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseFederationDeletedEvent();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.data = FederationEventData.decode(reader, reader.uint32());
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): FederationDeletedEvent {
    return { data: isSet(object.data) ? FederationEventData.fromJSON(object.data) : undefined };
  },

  toJSON(message: FederationDeletedEvent): unknown {
    const obj: any = {};
    if (message.data !== undefined) {
      obj.data = FederationEventData.toJSON(message.data);
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<FederationDeletedEvent>, I>>(base?: I): FederationDeletedEvent {
    return FederationDeletedEvent.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<FederationDeletedEvent>, I>>(object: I): FederationDeletedEvent {
    const message = createBaseFederationDeletedEvent();
    message.data = (object.data !== undefined && object.data !== null)
      ? FederationEventData.fromPartial(object.data)
      : undefined;
    return message;
  },
};

function createBaseServiceCreatedEvent(): ServiceCreatedEvent {
  return { data: undefined };
}

export const ServiceCreatedEvent: MessageFns<ServiceCreatedEvent> = {
  encode(message: ServiceCreatedEvent, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.data !== undefined) {
      ServiceEventData.encode(message.data, writer.uint32(10).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): ServiceCreatedEvent {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    const end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseServiceCreatedEvent();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.data = ServiceEventData.decode(reader, reader.uint32());
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): ServiceCreatedEvent {
    return { data: isSet(object.data) ? ServiceEventData.fromJSON(object.data) : undefined };
  },

  toJSON(message: ServiceCreatedEvent): unknown {
    const obj: any = {};
    if (message.data !== undefined) {
      obj.data = ServiceEventData.toJSON(message.data);
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<ServiceCreatedEvent>, I>>(base?: I): ServiceCreatedEvent {
    return ServiceCreatedEvent.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<ServiceCreatedEvent>, I>>(object: I): ServiceCreatedEvent {
    const message = createBaseServiceCreatedEvent();
    message.data = (object.data !== undefined && object.data !== null)
      ? ServiceEventData.fromPartial(object.data)
      : undefined;
    return message;
  },
};

function createBaseServiceUpdatedEvent(): ServiceUpdatedEvent {
  return { data: undefined };
}

export const ServiceUpdatedEvent: MessageFns<ServiceUpdatedEvent> = {
  encode(message: ServiceUpdatedEvent, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.data !== undefined) {
      ServiceEventData.encode(message.data, writer.uint32(10).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): ServiceUpdatedEvent {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    const end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseServiceUpdatedEvent();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.data = ServiceEventData.decode(reader, reader.uint32());
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): ServiceUpdatedEvent {
    return { data: isSet(object.data) ? ServiceEventData.fromJSON(object.data) : undefined };
  },

  toJSON(message: ServiceUpdatedEvent): unknown {
    const obj: any = {};
    if (message.data !== undefined) {
      obj.data = ServiceEventData.toJSON(message.data);
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<ServiceUpdatedEvent>, I>>(base?: I): ServiceUpdatedEvent {
    return ServiceUpdatedEvent.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<ServiceUpdatedEvent>, I>>(object: I): ServiceUpdatedEvent {
    const message = createBaseServiceUpdatedEvent();
    message.data = (object.data !== undefined && object.data !== null)
      ? ServiceEventData.fromPartial(object.data)
      : undefined;
    return message;
  },
};

function createBaseServiceDeletedEvent(): ServiceDeletedEvent {
  return { data: undefined };
}

export const ServiceDeletedEvent: MessageFns<ServiceDeletedEvent> = {
  encode(message: ServiceDeletedEvent, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.data !== undefined) {
      ServiceEventData.encode(message.data, writer.uint32(10).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): ServiceDeletedEvent {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    const end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseServiceDeletedEvent();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.data = ServiceEventData.decode(reader, reader.uint32());
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): ServiceDeletedEvent {
    return { data: isSet(object.data) ? ServiceEventData.fromJSON(object.data) : undefined };
  },

  toJSON(message: ServiceDeletedEvent): unknown {
    const obj: any = {};
    if (message.data !== undefined) {
      obj.data = ServiceEventData.toJSON(message.data);
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<ServiceDeletedEvent>, I>>(base?: I): ServiceDeletedEvent {
    return ServiceDeletedEvent.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<ServiceDeletedEvent>, I>>(object: I): ServiceDeletedEvent {
    const message = createBaseServiceDeletedEvent();
    message.data = (object.data !== undefined && object.data !== null)
      ? ServiceEventData.fromPartial(object.data)
      : undefined;
    return message;
  },
};

function createBaseMetadataImportCreatedEvent(): MetadataImportCreatedEvent {
  return { data: undefined };
}

export const MetadataImportCreatedEvent: MessageFns<MetadataImportCreatedEvent> = {
  encode(message: MetadataImportCreatedEvent, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.data !== undefined) {
      MetadataImportEventData.encode(message.data, writer.uint32(10).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): MetadataImportCreatedEvent {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    const end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseMetadataImportCreatedEvent();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.data = MetadataImportEventData.decode(reader, reader.uint32());
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): MetadataImportCreatedEvent {
    return { data: isSet(object.data) ? MetadataImportEventData.fromJSON(object.data) : undefined };
  },

  toJSON(message: MetadataImportCreatedEvent): unknown {
    const obj: any = {};
    if (message.data !== undefined) {
      obj.data = MetadataImportEventData.toJSON(message.data);
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<MetadataImportCreatedEvent>, I>>(base?: I): MetadataImportCreatedEvent {
    return MetadataImportCreatedEvent.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<MetadataImportCreatedEvent>, I>>(object: I): MetadataImportCreatedEvent {
    const message = createBaseMetadataImportCreatedEvent();
    message.data = (object.data !== undefined && object.data !== null)
      ? MetadataImportEventData.fromPartial(object.data)
      : undefined;
    return message;
  },
};

function createBaseMetadataImportUpdatedEvent(): MetadataImportUpdatedEvent {
  return { data: undefined };
}

export const MetadataImportUpdatedEvent: MessageFns<MetadataImportUpdatedEvent> = {
  encode(message: MetadataImportUpdatedEvent, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.data !== undefined) {
      MetadataImportEventData.encode(message.data, writer.uint32(10).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): MetadataImportUpdatedEvent {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    const end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseMetadataImportUpdatedEvent();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.data = MetadataImportEventData.decode(reader, reader.uint32());
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): MetadataImportUpdatedEvent {
    return { data: isSet(object.data) ? MetadataImportEventData.fromJSON(object.data) : undefined };
  },

  toJSON(message: MetadataImportUpdatedEvent): unknown {
    const obj: any = {};
    if (message.data !== undefined) {
      obj.data = MetadataImportEventData.toJSON(message.data);
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<MetadataImportUpdatedEvent>, I>>(base?: I): MetadataImportUpdatedEvent {
    return MetadataImportUpdatedEvent.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<MetadataImportUpdatedEvent>, I>>(object: I): MetadataImportUpdatedEvent {
    const message = createBaseMetadataImportUpdatedEvent();
    message.data = (object.data !== undefined && object.data !== null)
      ? MetadataImportEventData.fromPartial(object.data)
      : undefined;
    return message;
  },
};

function createBaseBackupCreatedEvent(): BackupCreatedEvent {
  return { data: undefined };
}

export const BackupCreatedEvent: MessageFns<BackupCreatedEvent> = {
  encode(message: BackupCreatedEvent, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.data !== undefined) {
      BackupEventData.encode(message.data, writer.uint32(10).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): BackupCreatedEvent {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    const end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseBackupCreatedEvent();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.data = BackupEventData.decode(reader, reader.uint32());
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): BackupCreatedEvent {
    return { data: isSet(object.data) ? BackupEventData.fromJSON(object.data) : undefined };
  },

  toJSON(message: BackupCreatedEvent): unknown {
    const obj: any = {};
    if (message.data !== undefined) {
      obj.data = BackupEventData.toJSON(message.data);
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<BackupCreatedEvent>, I>>(base?: I): BackupCreatedEvent {
    return BackupCreatedEvent.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<BackupCreatedEvent>, I>>(object: I): BackupCreatedEvent {
    const message = createBaseBackupCreatedEvent();
    message.data = (object.data !== undefined && object.data !== null)
      ? BackupEventData.fromPartial(object.data)
      : undefined;
    return message;
  },
};

function createBaseBackupDeletedEvent(): BackupDeletedEvent {
  return { data: undefined };
}

export const BackupDeletedEvent: MessageFns<BackupDeletedEvent> = {
  encode(message: BackupDeletedEvent, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.data !== undefined) {
      BackupEventData.encode(message.data, writer.uint32(10).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): BackupDeletedEvent {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    const end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseBackupDeletedEvent();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.data = BackupEventData.decode(reader, reader.uint32());
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): BackupDeletedEvent {
    return { data: isSet(object.data) ? BackupEventData.fromJSON(object.data) : undefined };
  },

  toJSON(message: BackupDeletedEvent): unknown {
    const obj: any = {};
    if (message.data !== undefined) {
      obj.data = BackupEventData.toJSON(message.data);
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<BackupDeletedEvent>, I>>(base?: I): BackupDeletedEvent {
    return BackupDeletedEvent.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<BackupDeletedEvent>, I>>(object: I): BackupDeletedEvent {
    const message = createBaseBackupDeletedEvent();
    message.data = (object.data !== undefined && object.data !== null)
      ? BackupEventData.fromPartial(object.data)
      : undefined;
    return message;
  },
};

type Builtin = Date | Function | Uint8Array | string | number | boolean | undefined;

export type DeepPartial<T> = T extends Builtin ? T
  : T extends Long ? string | number | Long : T extends globalThis.Array<infer U> ? globalThis.Array<DeepPartial<U>>
  : T extends ReadonlyArray<infer U> ? ReadonlyArray<DeepPartial<U>>
  : T extends {} ? { [K in keyof T]?: DeepPartial<T[K]> }
  : Partial<T>;

type KeysOfUnion<T> = T extends T ? keyof T : never;
export type Exact<P, I extends P> = P extends Builtin ? P
  : P & { [K in keyof P]: Exact<P[K], I[K]> } & { [K in Exclude<keyof I, KeysOfUnion<P>>]: never };

function isSet(value: any): boolean {
  return value !== null && value !== undefined;
}

export interface MessageFns<T> {
  encode(message: T, writer?: BinaryWriter): BinaryWriter;
  decode(input: BinaryReader | Uint8Array, length?: number): T;
  fromJSON(object: any): T;
  toJSON(message: T): unknown;
  create<I extends Exact<DeepPartial<T>, I>>(base?: I): T;
  fromPartial<I extends Exact<DeepPartial<T>, I>>(object: I): T;
}
