// Code generated by protoc-gen-ts_proto. DO NOT EDIT.
// versions:
//   protoc-gen-ts_proto  v2.7.7
//   protoc               v6.32.0
// source: google/events/cloud/networkconnectivity/v1/events.proto

/* eslint-disable */
import { BinaryReader, BinaryWriter } from "@bufbuild/protobuf/wire";
import Long from "long";
import {
  HubEventData,
  ServiceClassEventData,
  ServiceConnectionMapEventData,
  ServiceConnectionPolicyEventData,
  ServiceConnectionTokenEventData,
  SpokeEventData,
} from "./data";

export const protobufPackage = "google.events.cloud.networkconnectivity.v1";

/** The CloudEvent raised when a ServiceConnectionMap is created. */
export interface ServiceConnectionMapCreatedEvent {
  /** The data associated with the event. */
  data?: ServiceConnectionMapEventData | undefined;
}

/** The CloudEvent raised when a ServiceConnectionMap is updated. */
export interface ServiceConnectionMapUpdatedEvent {
  /** The data associated with the event. */
  data?: ServiceConnectionMapEventData | undefined;
}

/** The CloudEvent raised when a ServiceConnectionMap is deleted. */
export interface ServiceConnectionMapDeletedEvent {
  /** The data associated with the event. */
  data?: ServiceConnectionMapEventData | undefined;
}

/** The CloudEvent raised when a ServiceConnectionPolicy is created. */
export interface ServiceConnectionPolicyCreatedEvent {
  /** The data associated with the event. */
  data?: ServiceConnectionPolicyEventData | undefined;
}

/** The CloudEvent raised when a ServiceConnectionPolicy is updated. */
export interface ServiceConnectionPolicyUpdatedEvent {
  /** The data associated with the event. */
  data?: ServiceConnectionPolicyEventData | undefined;
}

/** The CloudEvent raised when a ServiceConnectionPolicy is deleted. */
export interface ServiceConnectionPolicyDeletedEvent {
  /** The data associated with the event. */
  data?: ServiceConnectionPolicyEventData | undefined;
}

/** The CloudEvent raised when a ServiceClass is updated. */
export interface ServiceClassUpdatedEvent {
  /** The data associated with the event. */
  data?: ServiceClassEventData | undefined;
}

/** The CloudEvent raised when a ServiceClass is deleted. */
export interface ServiceClassDeletedEvent {
  /** The data associated with the event. */
  data?: ServiceClassEventData | undefined;
}

/** The CloudEvent raised when a ServiceConnectionToken is created. */
export interface ServiceConnectionTokenCreatedEvent {
  /** The data associated with the event. */
  data?: ServiceConnectionTokenEventData | undefined;
}

/** The CloudEvent raised when a ServiceConnectionToken is deleted. */
export interface ServiceConnectionTokenDeletedEvent {
  /** The data associated with the event. */
  data?: ServiceConnectionTokenEventData | undefined;
}

/** The CloudEvent raised when a Hub is created. */
export interface HubCreatedEvent {
  /** The data associated with the event. */
  data?: HubEventData | undefined;
}

/** The CloudEvent raised when a Hub is updated. */
export interface HubUpdatedEvent {
  /** The data associated with the event. */
  data?: HubEventData | undefined;
}

/** The CloudEvent raised when a Hub is deleted. */
export interface HubDeletedEvent {
  /** The data associated with the event. */
  data?: HubEventData | undefined;
}

/** The CloudEvent raised when a Spoke is created. */
export interface SpokeCreatedEvent {
  /** The data associated with the event. */
  data?: SpokeEventData | undefined;
}

/** The CloudEvent raised when a Spoke is updated. */
export interface SpokeUpdatedEvent {
  /** The data associated with the event. */
  data?: SpokeEventData | undefined;
}

/** The CloudEvent raised when a Spoke is deleted. */
export interface SpokeDeletedEvent {
  /** The data associated with the event. */
  data?: SpokeEventData | undefined;
}

function createBaseServiceConnectionMapCreatedEvent(): ServiceConnectionMapCreatedEvent {
  return { data: undefined };
}

export const ServiceConnectionMapCreatedEvent: MessageFns<ServiceConnectionMapCreatedEvent> = {
  encode(message: ServiceConnectionMapCreatedEvent, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.data !== undefined) {
      ServiceConnectionMapEventData.encode(message.data, writer.uint32(10).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): ServiceConnectionMapCreatedEvent {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    const end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseServiceConnectionMapCreatedEvent();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.data = ServiceConnectionMapEventData.decode(reader, reader.uint32());
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): ServiceConnectionMapCreatedEvent {
    return { data: isSet(object.data) ? ServiceConnectionMapEventData.fromJSON(object.data) : undefined };
  },

  toJSON(message: ServiceConnectionMapCreatedEvent): unknown {
    const obj: any = {};
    if (message.data !== undefined) {
      obj.data = ServiceConnectionMapEventData.toJSON(message.data);
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<ServiceConnectionMapCreatedEvent>, I>>(
    base?: I,
  ): ServiceConnectionMapCreatedEvent {
    return ServiceConnectionMapCreatedEvent.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<ServiceConnectionMapCreatedEvent>, I>>(
    object: I,
  ): ServiceConnectionMapCreatedEvent {
    const message = createBaseServiceConnectionMapCreatedEvent();
    message.data = (object.data !== undefined && object.data !== null)
      ? ServiceConnectionMapEventData.fromPartial(object.data)
      : undefined;
    return message;
  },
};

function createBaseServiceConnectionMapUpdatedEvent(): ServiceConnectionMapUpdatedEvent {
  return { data: undefined };
}

export const ServiceConnectionMapUpdatedEvent: MessageFns<ServiceConnectionMapUpdatedEvent> = {
  encode(message: ServiceConnectionMapUpdatedEvent, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.data !== undefined) {
      ServiceConnectionMapEventData.encode(message.data, writer.uint32(10).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): ServiceConnectionMapUpdatedEvent {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    const end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseServiceConnectionMapUpdatedEvent();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.data = ServiceConnectionMapEventData.decode(reader, reader.uint32());
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): ServiceConnectionMapUpdatedEvent {
    return { data: isSet(object.data) ? ServiceConnectionMapEventData.fromJSON(object.data) : undefined };
  },

  toJSON(message: ServiceConnectionMapUpdatedEvent): unknown {
    const obj: any = {};
    if (message.data !== undefined) {
      obj.data = ServiceConnectionMapEventData.toJSON(message.data);
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<ServiceConnectionMapUpdatedEvent>, I>>(
    base?: I,
  ): ServiceConnectionMapUpdatedEvent {
    return ServiceConnectionMapUpdatedEvent.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<ServiceConnectionMapUpdatedEvent>, I>>(
    object: I,
  ): ServiceConnectionMapUpdatedEvent {
    const message = createBaseServiceConnectionMapUpdatedEvent();
    message.data = (object.data !== undefined && object.data !== null)
      ? ServiceConnectionMapEventData.fromPartial(object.data)
      : undefined;
    return message;
  },
};

function createBaseServiceConnectionMapDeletedEvent(): ServiceConnectionMapDeletedEvent {
  return { data: undefined };
}

export const ServiceConnectionMapDeletedEvent: MessageFns<ServiceConnectionMapDeletedEvent> = {
  encode(message: ServiceConnectionMapDeletedEvent, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.data !== undefined) {
      ServiceConnectionMapEventData.encode(message.data, writer.uint32(10).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): ServiceConnectionMapDeletedEvent {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    const end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseServiceConnectionMapDeletedEvent();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.data = ServiceConnectionMapEventData.decode(reader, reader.uint32());
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): ServiceConnectionMapDeletedEvent {
    return { data: isSet(object.data) ? ServiceConnectionMapEventData.fromJSON(object.data) : undefined };
  },

  toJSON(message: ServiceConnectionMapDeletedEvent): unknown {
    const obj: any = {};
    if (message.data !== undefined) {
      obj.data = ServiceConnectionMapEventData.toJSON(message.data);
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<ServiceConnectionMapDeletedEvent>, I>>(
    base?: I,
  ): ServiceConnectionMapDeletedEvent {
    return ServiceConnectionMapDeletedEvent.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<ServiceConnectionMapDeletedEvent>, I>>(
    object: I,
  ): ServiceConnectionMapDeletedEvent {
    const message = createBaseServiceConnectionMapDeletedEvent();
    message.data = (object.data !== undefined && object.data !== null)
      ? ServiceConnectionMapEventData.fromPartial(object.data)
      : undefined;
    return message;
  },
};

function createBaseServiceConnectionPolicyCreatedEvent(): ServiceConnectionPolicyCreatedEvent {
  return { data: undefined };
}

export const ServiceConnectionPolicyCreatedEvent: MessageFns<ServiceConnectionPolicyCreatedEvent> = {
  encode(message: ServiceConnectionPolicyCreatedEvent, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.data !== undefined) {
      ServiceConnectionPolicyEventData.encode(message.data, writer.uint32(10).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): ServiceConnectionPolicyCreatedEvent {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    const end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseServiceConnectionPolicyCreatedEvent();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.data = ServiceConnectionPolicyEventData.decode(reader, reader.uint32());
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): ServiceConnectionPolicyCreatedEvent {
    return { data: isSet(object.data) ? ServiceConnectionPolicyEventData.fromJSON(object.data) : undefined };
  },

  toJSON(message: ServiceConnectionPolicyCreatedEvent): unknown {
    const obj: any = {};
    if (message.data !== undefined) {
      obj.data = ServiceConnectionPolicyEventData.toJSON(message.data);
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<ServiceConnectionPolicyCreatedEvent>, I>>(
    base?: I,
  ): ServiceConnectionPolicyCreatedEvent {
    return ServiceConnectionPolicyCreatedEvent.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<ServiceConnectionPolicyCreatedEvent>, I>>(
    object: I,
  ): ServiceConnectionPolicyCreatedEvent {
    const message = createBaseServiceConnectionPolicyCreatedEvent();
    message.data = (object.data !== undefined && object.data !== null)
      ? ServiceConnectionPolicyEventData.fromPartial(object.data)
      : undefined;
    return message;
  },
};

function createBaseServiceConnectionPolicyUpdatedEvent(): ServiceConnectionPolicyUpdatedEvent {
  return { data: undefined };
}

export const ServiceConnectionPolicyUpdatedEvent: MessageFns<ServiceConnectionPolicyUpdatedEvent> = {
  encode(message: ServiceConnectionPolicyUpdatedEvent, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.data !== undefined) {
      ServiceConnectionPolicyEventData.encode(message.data, writer.uint32(10).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): ServiceConnectionPolicyUpdatedEvent {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    const end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseServiceConnectionPolicyUpdatedEvent();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.data = ServiceConnectionPolicyEventData.decode(reader, reader.uint32());
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): ServiceConnectionPolicyUpdatedEvent {
    return { data: isSet(object.data) ? ServiceConnectionPolicyEventData.fromJSON(object.data) : undefined };
  },

  toJSON(message: ServiceConnectionPolicyUpdatedEvent): unknown {
    const obj: any = {};
    if (message.data !== undefined) {
      obj.data = ServiceConnectionPolicyEventData.toJSON(message.data);
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<ServiceConnectionPolicyUpdatedEvent>, I>>(
    base?: I,
  ): ServiceConnectionPolicyUpdatedEvent {
    return ServiceConnectionPolicyUpdatedEvent.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<ServiceConnectionPolicyUpdatedEvent>, I>>(
    object: I,
  ): ServiceConnectionPolicyUpdatedEvent {
    const message = createBaseServiceConnectionPolicyUpdatedEvent();
    message.data = (object.data !== undefined && object.data !== null)
      ? ServiceConnectionPolicyEventData.fromPartial(object.data)
      : undefined;
    return message;
  },
};

function createBaseServiceConnectionPolicyDeletedEvent(): ServiceConnectionPolicyDeletedEvent {
  return { data: undefined };
}

export const ServiceConnectionPolicyDeletedEvent: MessageFns<ServiceConnectionPolicyDeletedEvent> = {
  encode(message: ServiceConnectionPolicyDeletedEvent, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.data !== undefined) {
      ServiceConnectionPolicyEventData.encode(message.data, writer.uint32(10).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): ServiceConnectionPolicyDeletedEvent {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    const end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseServiceConnectionPolicyDeletedEvent();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.data = ServiceConnectionPolicyEventData.decode(reader, reader.uint32());
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): ServiceConnectionPolicyDeletedEvent {
    return { data: isSet(object.data) ? ServiceConnectionPolicyEventData.fromJSON(object.data) : undefined };
  },

  toJSON(message: ServiceConnectionPolicyDeletedEvent): unknown {
    const obj: any = {};
    if (message.data !== undefined) {
      obj.data = ServiceConnectionPolicyEventData.toJSON(message.data);
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<ServiceConnectionPolicyDeletedEvent>, I>>(
    base?: I,
  ): ServiceConnectionPolicyDeletedEvent {
    return ServiceConnectionPolicyDeletedEvent.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<ServiceConnectionPolicyDeletedEvent>, I>>(
    object: I,
  ): ServiceConnectionPolicyDeletedEvent {
    const message = createBaseServiceConnectionPolicyDeletedEvent();
    message.data = (object.data !== undefined && object.data !== null)
      ? ServiceConnectionPolicyEventData.fromPartial(object.data)
      : undefined;
    return message;
  },
};

function createBaseServiceClassUpdatedEvent(): ServiceClassUpdatedEvent {
  return { data: undefined };
}

export const ServiceClassUpdatedEvent: MessageFns<ServiceClassUpdatedEvent> = {
  encode(message: ServiceClassUpdatedEvent, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.data !== undefined) {
      ServiceClassEventData.encode(message.data, writer.uint32(10).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): ServiceClassUpdatedEvent {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    const end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseServiceClassUpdatedEvent();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.data = ServiceClassEventData.decode(reader, reader.uint32());
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): ServiceClassUpdatedEvent {
    return { data: isSet(object.data) ? ServiceClassEventData.fromJSON(object.data) : undefined };
  },

  toJSON(message: ServiceClassUpdatedEvent): unknown {
    const obj: any = {};
    if (message.data !== undefined) {
      obj.data = ServiceClassEventData.toJSON(message.data);
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<ServiceClassUpdatedEvent>, I>>(base?: I): ServiceClassUpdatedEvent {
    return ServiceClassUpdatedEvent.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<ServiceClassUpdatedEvent>, I>>(object: I): ServiceClassUpdatedEvent {
    const message = createBaseServiceClassUpdatedEvent();
    message.data = (object.data !== undefined && object.data !== null)
      ? ServiceClassEventData.fromPartial(object.data)
      : undefined;
    return message;
  },
};

function createBaseServiceClassDeletedEvent(): ServiceClassDeletedEvent {
  return { data: undefined };
}

export const ServiceClassDeletedEvent: MessageFns<ServiceClassDeletedEvent> = {
  encode(message: ServiceClassDeletedEvent, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.data !== undefined) {
      ServiceClassEventData.encode(message.data, writer.uint32(10).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): ServiceClassDeletedEvent {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    const end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseServiceClassDeletedEvent();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.data = ServiceClassEventData.decode(reader, reader.uint32());
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): ServiceClassDeletedEvent {
    return { data: isSet(object.data) ? ServiceClassEventData.fromJSON(object.data) : undefined };
  },

  toJSON(message: ServiceClassDeletedEvent): unknown {
    const obj: any = {};
    if (message.data !== undefined) {
      obj.data = ServiceClassEventData.toJSON(message.data);
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<ServiceClassDeletedEvent>, I>>(base?: I): ServiceClassDeletedEvent {
    return ServiceClassDeletedEvent.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<ServiceClassDeletedEvent>, I>>(object: I): ServiceClassDeletedEvent {
    const message = createBaseServiceClassDeletedEvent();
    message.data = (object.data !== undefined && object.data !== null)
      ? ServiceClassEventData.fromPartial(object.data)
      : undefined;
    return message;
  },
};

function createBaseServiceConnectionTokenCreatedEvent(): ServiceConnectionTokenCreatedEvent {
  return { data: undefined };
}

export const ServiceConnectionTokenCreatedEvent: MessageFns<ServiceConnectionTokenCreatedEvent> = {
  encode(message: ServiceConnectionTokenCreatedEvent, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.data !== undefined) {
      ServiceConnectionTokenEventData.encode(message.data, writer.uint32(10).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): ServiceConnectionTokenCreatedEvent {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    const end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseServiceConnectionTokenCreatedEvent();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.data = ServiceConnectionTokenEventData.decode(reader, reader.uint32());
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): ServiceConnectionTokenCreatedEvent {
    return { data: isSet(object.data) ? ServiceConnectionTokenEventData.fromJSON(object.data) : undefined };
  },

  toJSON(message: ServiceConnectionTokenCreatedEvent): unknown {
    const obj: any = {};
    if (message.data !== undefined) {
      obj.data = ServiceConnectionTokenEventData.toJSON(message.data);
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<ServiceConnectionTokenCreatedEvent>, I>>(
    base?: I,
  ): ServiceConnectionTokenCreatedEvent {
    return ServiceConnectionTokenCreatedEvent.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<ServiceConnectionTokenCreatedEvent>, I>>(
    object: I,
  ): ServiceConnectionTokenCreatedEvent {
    const message = createBaseServiceConnectionTokenCreatedEvent();
    message.data = (object.data !== undefined && object.data !== null)
      ? ServiceConnectionTokenEventData.fromPartial(object.data)
      : undefined;
    return message;
  },
};

function createBaseServiceConnectionTokenDeletedEvent(): ServiceConnectionTokenDeletedEvent {
  return { data: undefined };
}

export const ServiceConnectionTokenDeletedEvent: MessageFns<ServiceConnectionTokenDeletedEvent> = {
  encode(message: ServiceConnectionTokenDeletedEvent, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.data !== undefined) {
      ServiceConnectionTokenEventData.encode(message.data, writer.uint32(10).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): ServiceConnectionTokenDeletedEvent {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    const end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseServiceConnectionTokenDeletedEvent();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.data = ServiceConnectionTokenEventData.decode(reader, reader.uint32());
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): ServiceConnectionTokenDeletedEvent {
    return { data: isSet(object.data) ? ServiceConnectionTokenEventData.fromJSON(object.data) : undefined };
  },

  toJSON(message: ServiceConnectionTokenDeletedEvent): unknown {
    const obj: any = {};
    if (message.data !== undefined) {
      obj.data = ServiceConnectionTokenEventData.toJSON(message.data);
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<ServiceConnectionTokenDeletedEvent>, I>>(
    base?: I,
  ): ServiceConnectionTokenDeletedEvent {
    return ServiceConnectionTokenDeletedEvent.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<ServiceConnectionTokenDeletedEvent>, I>>(
    object: I,
  ): ServiceConnectionTokenDeletedEvent {
    const message = createBaseServiceConnectionTokenDeletedEvent();
    message.data = (object.data !== undefined && object.data !== null)
      ? ServiceConnectionTokenEventData.fromPartial(object.data)
      : undefined;
    return message;
  },
};

function createBaseHubCreatedEvent(): HubCreatedEvent {
  return { data: undefined };
}

export const HubCreatedEvent: MessageFns<HubCreatedEvent> = {
  encode(message: HubCreatedEvent, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.data !== undefined) {
      HubEventData.encode(message.data, writer.uint32(10).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): HubCreatedEvent {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    const end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseHubCreatedEvent();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.data = HubEventData.decode(reader, reader.uint32());
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): HubCreatedEvent {
    return { data: isSet(object.data) ? HubEventData.fromJSON(object.data) : undefined };
  },

  toJSON(message: HubCreatedEvent): unknown {
    const obj: any = {};
    if (message.data !== undefined) {
      obj.data = HubEventData.toJSON(message.data);
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<HubCreatedEvent>, I>>(base?: I): HubCreatedEvent {
    return HubCreatedEvent.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<HubCreatedEvent>, I>>(object: I): HubCreatedEvent {
    const message = createBaseHubCreatedEvent();
    message.data = (object.data !== undefined && object.data !== null)
      ? HubEventData.fromPartial(object.data)
      : undefined;
    return message;
  },
};

function createBaseHubUpdatedEvent(): HubUpdatedEvent {
  return { data: undefined };
}

export const HubUpdatedEvent: MessageFns<HubUpdatedEvent> = {
  encode(message: HubUpdatedEvent, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.data !== undefined) {
      HubEventData.encode(message.data, writer.uint32(10).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): HubUpdatedEvent {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    const end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseHubUpdatedEvent();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.data = HubEventData.decode(reader, reader.uint32());
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): HubUpdatedEvent {
    return { data: isSet(object.data) ? HubEventData.fromJSON(object.data) : undefined };
  },

  toJSON(message: HubUpdatedEvent): unknown {
    const obj: any = {};
    if (message.data !== undefined) {
      obj.data = HubEventData.toJSON(message.data);
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<HubUpdatedEvent>, I>>(base?: I): HubUpdatedEvent {
    return HubUpdatedEvent.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<HubUpdatedEvent>, I>>(object: I): HubUpdatedEvent {
    const message = createBaseHubUpdatedEvent();
    message.data = (object.data !== undefined && object.data !== null)
      ? HubEventData.fromPartial(object.data)
      : undefined;
    return message;
  },
};

function createBaseHubDeletedEvent(): HubDeletedEvent {
  return { data: undefined };
}

export const HubDeletedEvent: MessageFns<HubDeletedEvent> = {
  encode(message: HubDeletedEvent, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.data !== undefined) {
      HubEventData.encode(message.data, writer.uint32(10).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): HubDeletedEvent {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    const end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseHubDeletedEvent();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.data = HubEventData.decode(reader, reader.uint32());
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): HubDeletedEvent {
    return { data: isSet(object.data) ? HubEventData.fromJSON(object.data) : undefined };
  },

  toJSON(message: HubDeletedEvent): unknown {
    const obj: any = {};
    if (message.data !== undefined) {
      obj.data = HubEventData.toJSON(message.data);
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<HubDeletedEvent>, I>>(base?: I): HubDeletedEvent {
    return HubDeletedEvent.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<HubDeletedEvent>, I>>(object: I): HubDeletedEvent {
    const message = createBaseHubDeletedEvent();
    message.data = (object.data !== undefined && object.data !== null)
      ? HubEventData.fromPartial(object.data)
      : undefined;
    return message;
  },
};

function createBaseSpokeCreatedEvent(): SpokeCreatedEvent {
  return { data: undefined };
}

export const SpokeCreatedEvent: MessageFns<SpokeCreatedEvent> = {
  encode(message: SpokeCreatedEvent, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.data !== undefined) {
      SpokeEventData.encode(message.data, writer.uint32(10).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): SpokeCreatedEvent {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    const end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseSpokeCreatedEvent();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.data = SpokeEventData.decode(reader, reader.uint32());
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): SpokeCreatedEvent {
    return { data: isSet(object.data) ? SpokeEventData.fromJSON(object.data) : undefined };
  },

  toJSON(message: SpokeCreatedEvent): unknown {
    const obj: any = {};
    if (message.data !== undefined) {
      obj.data = SpokeEventData.toJSON(message.data);
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<SpokeCreatedEvent>, I>>(base?: I): SpokeCreatedEvent {
    return SpokeCreatedEvent.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<SpokeCreatedEvent>, I>>(object: I): SpokeCreatedEvent {
    const message = createBaseSpokeCreatedEvent();
    message.data = (object.data !== undefined && object.data !== null)
      ? SpokeEventData.fromPartial(object.data)
      : undefined;
    return message;
  },
};

function createBaseSpokeUpdatedEvent(): SpokeUpdatedEvent {
  return { data: undefined };
}

export const SpokeUpdatedEvent: MessageFns<SpokeUpdatedEvent> = {
  encode(message: SpokeUpdatedEvent, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.data !== undefined) {
      SpokeEventData.encode(message.data, writer.uint32(10).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): SpokeUpdatedEvent {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    const end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseSpokeUpdatedEvent();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.data = SpokeEventData.decode(reader, reader.uint32());
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): SpokeUpdatedEvent {
    return { data: isSet(object.data) ? SpokeEventData.fromJSON(object.data) : undefined };
  },

  toJSON(message: SpokeUpdatedEvent): unknown {
    const obj: any = {};
    if (message.data !== undefined) {
      obj.data = SpokeEventData.toJSON(message.data);
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<SpokeUpdatedEvent>, I>>(base?: I): SpokeUpdatedEvent {
    return SpokeUpdatedEvent.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<SpokeUpdatedEvent>, I>>(object: I): SpokeUpdatedEvent {
    const message = createBaseSpokeUpdatedEvent();
    message.data = (object.data !== undefined && object.data !== null)
      ? SpokeEventData.fromPartial(object.data)
      : undefined;
    return message;
  },
};

function createBaseSpokeDeletedEvent(): SpokeDeletedEvent {
  return { data: undefined };
}

export const SpokeDeletedEvent: MessageFns<SpokeDeletedEvent> = {
  encode(message: SpokeDeletedEvent, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.data !== undefined) {
      SpokeEventData.encode(message.data, writer.uint32(10).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): SpokeDeletedEvent {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    const end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseSpokeDeletedEvent();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.data = SpokeEventData.decode(reader, reader.uint32());
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): SpokeDeletedEvent {
    return { data: isSet(object.data) ? SpokeEventData.fromJSON(object.data) : undefined };
  },

  toJSON(message: SpokeDeletedEvent): unknown {
    const obj: any = {};
    if (message.data !== undefined) {
      obj.data = SpokeEventData.toJSON(message.data);
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<SpokeDeletedEvent>, I>>(base?: I): SpokeDeletedEvent {
    return SpokeDeletedEvent.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<SpokeDeletedEvent>, I>>(object: I): SpokeDeletedEvent {
    const message = createBaseSpokeDeletedEvent();
    message.data = (object.data !== undefined && object.data !== null)
      ? SpokeEventData.fromPartial(object.data)
      : undefined;
    return message;
  },
};

type Builtin = Date | Function | Uint8Array | string | number | boolean | undefined;

export type DeepPartial<T> = T extends Builtin ? T
  : T extends Long ? string | number | Long : T extends globalThis.Array<infer U> ? globalThis.Array<DeepPartial<U>>
  : T extends ReadonlyArray<infer U> ? ReadonlyArray<DeepPartial<U>>
  : T extends {} ? { [K in keyof T]?: DeepPartial<T[K]> }
  : Partial<T>;

type KeysOfUnion<T> = T extends T ? keyof T : never;
export type Exact<P, I extends P> = P extends Builtin ? P
  : P & { [K in keyof P]: Exact<P[K], I[K]> } & { [K in Exclude<keyof I, KeysOfUnion<P>>]: never };

function isSet(value: any): boolean {
  return value !== null && value !== undefined;
}

export interface MessageFns<T> {
  encode(message: T, writer?: BinaryWriter): BinaryWriter;
  decode(input: BinaryReader | Uint8Array, length?: number): T;
  fromJSON(object: any): T;
  toJSON(message: T): unknown;
  create<I extends Exact<DeepPartial<T>, I>>(base?: I): T;
  fromPartial<I extends Exact<DeepPartial<T>, I>>(object: I): T;
}
