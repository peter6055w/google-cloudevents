// Code generated by protoc-gen-ts_proto. DO NOT EDIT.
// versions:
//   protoc-gen-ts_proto  v2.7.7
//   protoc               v6.32.0
// source: google/events/cloud/networkservices/v1/events.proto

/* eslint-disable */
import { BinaryReader, BinaryWriter } from "@bufbuild/protobuf/wire";
import Long from "long";
import {
  EndpointPolicyEventData,
  GatewayEventData,
  GrpcRouteEventData,
  HttpRouteEventData,
  MeshEventData,
  ServiceBindingEventData,
  TcpRouteEventData,
  TlsRouteEventData,
} from "./data";

export const protobufPackage = "google.events.cloud.networkservices.v1";

/** The CloudEvent raised when an EndpointPolicy is created. */
export interface EndpointPolicyCreatedEvent {
  /** The data associated with the event. */
  data?: EndpointPolicyEventData | undefined;
}

/** The CloudEvent raised when an EndpointPolicy is updated. */
export interface EndpointPolicyUpdatedEvent {
  /** The data associated with the event. */
  data?: EndpointPolicyEventData | undefined;
}

/** The CloudEvent raised when an EndpointPolicy is deleted. */
export interface EndpointPolicyDeletedEvent {
  /** The data associated with the event. */
  data?: EndpointPolicyEventData | undefined;
}

/** The CloudEvent raised when a Gateway is created. */
export interface GatewayCreatedEvent {
  /** The data associated with the event. */
  data?: GatewayEventData | undefined;
}

/** The CloudEvent raised when a Gateway is updated. */
export interface GatewayUpdatedEvent {
  /** The data associated with the event. */
  data?: GatewayEventData | undefined;
}

/** The CloudEvent raised when a Gateway is deleted. */
export interface GatewayDeletedEvent {
  /** The data associated with the event. */
  data?: GatewayEventData | undefined;
}

/** The CloudEvent raised when a GrpcRoute is created. */
export interface GrpcRouteCreatedEvent {
  /** The data associated with the event. */
  data?: GrpcRouteEventData | undefined;
}

/** The CloudEvent raised when a GrpcRoute is updated. */
export interface GrpcRouteUpdatedEvent {
  /** The data associated with the event. */
  data?: GrpcRouteEventData | undefined;
}

/** The CloudEvent raised when a GrpcRoute is deleted. */
export interface GrpcRouteDeletedEvent {
  /** The data associated with the event. */
  data?: GrpcRouteEventData | undefined;
}

/** The CloudEvent raised when a HttpRoute is created. */
export interface HttpRouteCreatedEvent {
  /** The data associated with the event. */
  data?: HttpRouteEventData | undefined;
}

/** The CloudEvent raised when a HttpRoute is updated. */
export interface HttpRouteUpdatedEvent {
  /** The data associated with the event. */
  data?: HttpRouteEventData | undefined;
}

/** The CloudEvent raised when a HttpRoute is deleted. */
export interface HttpRouteDeletedEvent {
  /** The data associated with the event. */
  data?: HttpRouteEventData | undefined;
}

/** The CloudEvent raised when a TcpRoute is created. */
export interface TcpRouteCreatedEvent {
  /** The data associated with the event. */
  data?: TcpRouteEventData | undefined;
}

/** The CloudEvent raised when a TcpRoute is updated. */
export interface TcpRouteUpdatedEvent {
  /** The data associated with the event. */
  data?: TcpRouteEventData | undefined;
}

/** The CloudEvent raised when a TcpRoute is deleted. */
export interface TcpRouteDeletedEvent {
  /** The data associated with the event. */
  data?: TcpRouteEventData | undefined;
}

/** The CloudEvent raised when a TlsRoute is created. */
export interface TlsRouteCreatedEvent {
  /** The data associated with the event. */
  data?: TlsRouteEventData | undefined;
}

/** The CloudEvent raised when a TlsRoute is updated. */
export interface TlsRouteUpdatedEvent {
  /** The data associated with the event. */
  data?: TlsRouteEventData | undefined;
}

/** The CloudEvent raised when a TlsRoute is deleted. */
export interface TlsRouteDeletedEvent {
  /** The data associated with the event. */
  data?: TlsRouteEventData | undefined;
}

/** The CloudEvent raised when a ServiceBinding is created. */
export interface ServiceBindingCreatedEvent {
  /** The data associated with the event. */
  data?: ServiceBindingEventData | undefined;
}

/** The CloudEvent raised when a ServiceBinding is deleted. */
export interface ServiceBindingDeletedEvent {
  /** The data associated with the event. */
  data?: ServiceBindingEventData | undefined;
}

/** The CloudEvent raised when a Mesh is created. */
export interface MeshCreatedEvent {
  /** The data associated with the event. */
  data?: MeshEventData | undefined;
}

/** The CloudEvent raised when a Mesh is updated. */
export interface MeshUpdatedEvent {
  /** The data associated with the event. */
  data?: MeshEventData | undefined;
}

/** The CloudEvent raised when a Mesh is deleted. */
export interface MeshDeletedEvent {
  /** The data associated with the event. */
  data?: MeshEventData | undefined;
}

function createBaseEndpointPolicyCreatedEvent(): EndpointPolicyCreatedEvent {
  return { data: undefined };
}

export const EndpointPolicyCreatedEvent: MessageFns<EndpointPolicyCreatedEvent> = {
  encode(message: EndpointPolicyCreatedEvent, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.data !== undefined) {
      EndpointPolicyEventData.encode(message.data, writer.uint32(10).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): EndpointPolicyCreatedEvent {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    const end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseEndpointPolicyCreatedEvent();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.data = EndpointPolicyEventData.decode(reader, reader.uint32());
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): EndpointPolicyCreatedEvent {
    return { data: isSet(object.data) ? EndpointPolicyEventData.fromJSON(object.data) : undefined };
  },

  toJSON(message: EndpointPolicyCreatedEvent): unknown {
    const obj: any = {};
    if (message.data !== undefined) {
      obj.data = EndpointPolicyEventData.toJSON(message.data);
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<EndpointPolicyCreatedEvent>, I>>(base?: I): EndpointPolicyCreatedEvent {
    return EndpointPolicyCreatedEvent.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<EndpointPolicyCreatedEvent>, I>>(object: I): EndpointPolicyCreatedEvent {
    const message = createBaseEndpointPolicyCreatedEvent();
    message.data = (object.data !== undefined && object.data !== null)
      ? EndpointPolicyEventData.fromPartial(object.data)
      : undefined;
    return message;
  },
};

function createBaseEndpointPolicyUpdatedEvent(): EndpointPolicyUpdatedEvent {
  return { data: undefined };
}

export const EndpointPolicyUpdatedEvent: MessageFns<EndpointPolicyUpdatedEvent> = {
  encode(message: EndpointPolicyUpdatedEvent, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.data !== undefined) {
      EndpointPolicyEventData.encode(message.data, writer.uint32(10).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): EndpointPolicyUpdatedEvent {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    const end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseEndpointPolicyUpdatedEvent();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.data = EndpointPolicyEventData.decode(reader, reader.uint32());
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): EndpointPolicyUpdatedEvent {
    return { data: isSet(object.data) ? EndpointPolicyEventData.fromJSON(object.data) : undefined };
  },

  toJSON(message: EndpointPolicyUpdatedEvent): unknown {
    const obj: any = {};
    if (message.data !== undefined) {
      obj.data = EndpointPolicyEventData.toJSON(message.data);
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<EndpointPolicyUpdatedEvent>, I>>(base?: I): EndpointPolicyUpdatedEvent {
    return EndpointPolicyUpdatedEvent.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<EndpointPolicyUpdatedEvent>, I>>(object: I): EndpointPolicyUpdatedEvent {
    const message = createBaseEndpointPolicyUpdatedEvent();
    message.data = (object.data !== undefined && object.data !== null)
      ? EndpointPolicyEventData.fromPartial(object.data)
      : undefined;
    return message;
  },
};

function createBaseEndpointPolicyDeletedEvent(): EndpointPolicyDeletedEvent {
  return { data: undefined };
}

export const EndpointPolicyDeletedEvent: MessageFns<EndpointPolicyDeletedEvent> = {
  encode(message: EndpointPolicyDeletedEvent, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.data !== undefined) {
      EndpointPolicyEventData.encode(message.data, writer.uint32(10).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): EndpointPolicyDeletedEvent {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    const end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseEndpointPolicyDeletedEvent();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.data = EndpointPolicyEventData.decode(reader, reader.uint32());
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): EndpointPolicyDeletedEvent {
    return { data: isSet(object.data) ? EndpointPolicyEventData.fromJSON(object.data) : undefined };
  },

  toJSON(message: EndpointPolicyDeletedEvent): unknown {
    const obj: any = {};
    if (message.data !== undefined) {
      obj.data = EndpointPolicyEventData.toJSON(message.data);
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<EndpointPolicyDeletedEvent>, I>>(base?: I): EndpointPolicyDeletedEvent {
    return EndpointPolicyDeletedEvent.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<EndpointPolicyDeletedEvent>, I>>(object: I): EndpointPolicyDeletedEvent {
    const message = createBaseEndpointPolicyDeletedEvent();
    message.data = (object.data !== undefined && object.data !== null)
      ? EndpointPolicyEventData.fromPartial(object.data)
      : undefined;
    return message;
  },
};

function createBaseGatewayCreatedEvent(): GatewayCreatedEvent {
  return { data: undefined };
}

export const GatewayCreatedEvent: MessageFns<GatewayCreatedEvent> = {
  encode(message: GatewayCreatedEvent, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.data !== undefined) {
      GatewayEventData.encode(message.data, writer.uint32(10).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): GatewayCreatedEvent {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    const end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseGatewayCreatedEvent();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.data = GatewayEventData.decode(reader, reader.uint32());
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): GatewayCreatedEvent {
    return { data: isSet(object.data) ? GatewayEventData.fromJSON(object.data) : undefined };
  },

  toJSON(message: GatewayCreatedEvent): unknown {
    const obj: any = {};
    if (message.data !== undefined) {
      obj.data = GatewayEventData.toJSON(message.data);
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<GatewayCreatedEvent>, I>>(base?: I): GatewayCreatedEvent {
    return GatewayCreatedEvent.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<GatewayCreatedEvent>, I>>(object: I): GatewayCreatedEvent {
    const message = createBaseGatewayCreatedEvent();
    message.data = (object.data !== undefined && object.data !== null)
      ? GatewayEventData.fromPartial(object.data)
      : undefined;
    return message;
  },
};

function createBaseGatewayUpdatedEvent(): GatewayUpdatedEvent {
  return { data: undefined };
}

export const GatewayUpdatedEvent: MessageFns<GatewayUpdatedEvent> = {
  encode(message: GatewayUpdatedEvent, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.data !== undefined) {
      GatewayEventData.encode(message.data, writer.uint32(10).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): GatewayUpdatedEvent {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    const end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseGatewayUpdatedEvent();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.data = GatewayEventData.decode(reader, reader.uint32());
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): GatewayUpdatedEvent {
    return { data: isSet(object.data) ? GatewayEventData.fromJSON(object.data) : undefined };
  },

  toJSON(message: GatewayUpdatedEvent): unknown {
    const obj: any = {};
    if (message.data !== undefined) {
      obj.data = GatewayEventData.toJSON(message.data);
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<GatewayUpdatedEvent>, I>>(base?: I): GatewayUpdatedEvent {
    return GatewayUpdatedEvent.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<GatewayUpdatedEvent>, I>>(object: I): GatewayUpdatedEvent {
    const message = createBaseGatewayUpdatedEvent();
    message.data = (object.data !== undefined && object.data !== null)
      ? GatewayEventData.fromPartial(object.data)
      : undefined;
    return message;
  },
};

function createBaseGatewayDeletedEvent(): GatewayDeletedEvent {
  return { data: undefined };
}

export const GatewayDeletedEvent: MessageFns<GatewayDeletedEvent> = {
  encode(message: GatewayDeletedEvent, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.data !== undefined) {
      GatewayEventData.encode(message.data, writer.uint32(10).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): GatewayDeletedEvent {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    const end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseGatewayDeletedEvent();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.data = GatewayEventData.decode(reader, reader.uint32());
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): GatewayDeletedEvent {
    return { data: isSet(object.data) ? GatewayEventData.fromJSON(object.data) : undefined };
  },

  toJSON(message: GatewayDeletedEvent): unknown {
    const obj: any = {};
    if (message.data !== undefined) {
      obj.data = GatewayEventData.toJSON(message.data);
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<GatewayDeletedEvent>, I>>(base?: I): GatewayDeletedEvent {
    return GatewayDeletedEvent.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<GatewayDeletedEvent>, I>>(object: I): GatewayDeletedEvent {
    const message = createBaseGatewayDeletedEvent();
    message.data = (object.data !== undefined && object.data !== null)
      ? GatewayEventData.fromPartial(object.data)
      : undefined;
    return message;
  },
};

function createBaseGrpcRouteCreatedEvent(): GrpcRouteCreatedEvent {
  return { data: undefined };
}

export const GrpcRouteCreatedEvent: MessageFns<GrpcRouteCreatedEvent> = {
  encode(message: GrpcRouteCreatedEvent, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.data !== undefined) {
      GrpcRouteEventData.encode(message.data, writer.uint32(10).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): GrpcRouteCreatedEvent {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    const end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseGrpcRouteCreatedEvent();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.data = GrpcRouteEventData.decode(reader, reader.uint32());
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): GrpcRouteCreatedEvent {
    return { data: isSet(object.data) ? GrpcRouteEventData.fromJSON(object.data) : undefined };
  },

  toJSON(message: GrpcRouteCreatedEvent): unknown {
    const obj: any = {};
    if (message.data !== undefined) {
      obj.data = GrpcRouteEventData.toJSON(message.data);
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<GrpcRouteCreatedEvent>, I>>(base?: I): GrpcRouteCreatedEvent {
    return GrpcRouteCreatedEvent.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<GrpcRouteCreatedEvent>, I>>(object: I): GrpcRouteCreatedEvent {
    const message = createBaseGrpcRouteCreatedEvent();
    message.data = (object.data !== undefined && object.data !== null)
      ? GrpcRouteEventData.fromPartial(object.data)
      : undefined;
    return message;
  },
};

function createBaseGrpcRouteUpdatedEvent(): GrpcRouteUpdatedEvent {
  return { data: undefined };
}

export const GrpcRouteUpdatedEvent: MessageFns<GrpcRouteUpdatedEvent> = {
  encode(message: GrpcRouteUpdatedEvent, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.data !== undefined) {
      GrpcRouteEventData.encode(message.data, writer.uint32(10).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): GrpcRouteUpdatedEvent {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    const end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseGrpcRouteUpdatedEvent();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.data = GrpcRouteEventData.decode(reader, reader.uint32());
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): GrpcRouteUpdatedEvent {
    return { data: isSet(object.data) ? GrpcRouteEventData.fromJSON(object.data) : undefined };
  },

  toJSON(message: GrpcRouteUpdatedEvent): unknown {
    const obj: any = {};
    if (message.data !== undefined) {
      obj.data = GrpcRouteEventData.toJSON(message.data);
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<GrpcRouteUpdatedEvent>, I>>(base?: I): GrpcRouteUpdatedEvent {
    return GrpcRouteUpdatedEvent.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<GrpcRouteUpdatedEvent>, I>>(object: I): GrpcRouteUpdatedEvent {
    const message = createBaseGrpcRouteUpdatedEvent();
    message.data = (object.data !== undefined && object.data !== null)
      ? GrpcRouteEventData.fromPartial(object.data)
      : undefined;
    return message;
  },
};

function createBaseGrpcRouteDeletedEvent(): GrpcRouteDeletedEvent {
  return { data: undefined };
}

export const GrpcRouteDeletedEvent: MessageFns<GrpcRouteDeletedEvent> = {
  encode(message: GrpcRouteDeletedEvent, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.data !== undefined) {
      GrpcRouteEventData.encode(message.data, writer.uint32(10).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): GrpcRouteDeletedEvent {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    const end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseGrpcRouteDeletedEvent();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.data = GrpcRouteEventData.decode(reader, reader.uint32());
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): GrpcRouteDeletedEvent {
    return { data: isSet(object.data) ? GrpcRouteEventData.fromJSON(object.data) : undefined };
  },

  toJSON(message: GrpcRouteDeletedEvent): unknown {
    const obj: any = {};
    if (message.data !== undefined) {
      obj.data = GrpcRouteEventData.toJSON(message.data);
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<GrpcRouteDeletedEvent>, I>>(base?: I): GrpcRouteDeletedEvent {
    return GrpcRouteDeletedEvent.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<GrpcRouteDeletedEvent>, I>>(object: I): GrpcRouteDeletedEvent {
    const message = createBaseGrpcRouteDeletedEvent();
    message.data = (object.data !== undefined && object.data !== null)
      ? GrpcRouteEventData.fromPartial(object.data)
      : undefined;
    return message;
  },
};

function createBaseHttpRouteCreatedEvent(): HttpRouteCreatedEvent {
  return { data: undefined };
}

export const HttpRouteCreatedEvent: MessageFns<HttpRouteCreatedEvent> = {
  encode(message: HttpRouteCreatedEvent, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.data !== undefined) {
      HttpRouteEventData.encode(message.data, writer.uint32(10).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): HttpRouteCreatedEvent {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    const end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseHttpRouteCreatedEvent();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.data = HttpRouteEventData.decode(reader, reader.uint32());
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): HttpRouteCreatedEvent {
    return { data: isSet(object.data) ? HttpRouteEventData.fromJSON(object.data) : undefined };
  },

  toJSON(message: HttpRouteCreatedEvent): unknown {
    const obj: any = {};
    if (message.data !== undefined) {
      obj.data = HttpRouteEventData.toJSON(message.data);
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<HttpRouteCreatedEvent>, I>>(base?: I): HttpRouteCreatedEvent {
    return HttpRouteCreatedEvent.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<HttpRouteCreatedEvent>, I>>(object: I): HttpRouteCreatedEvent {
    const message = createBaseHttpRouteCreatedEvent();
    message.data = (object.data !== undefined && object.data !== null)
      ? HttpRouteEventData.fromPartial(object.data)
      : undefined;
    return message;
  },
};

function createBaseHttpRouteUpdatedEvent(): HttpRouteUpdatedEvent {
  return { data: undefined };
}

export const HttpRouteUpdatedEvent: MessageFns<HttpRouteUpdatedEvent> = {
  encode(message: HttpRouteUpdatedEvent, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.data !== undefined) {
      HttpRouteEventData.encode(message.data, writer.uint32(10).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): HttpRouteUpdatedEvent {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    const end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseHttpRouteUpdatedEvent();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.data = HttpRouteEventData.decode(reader, reader.uint32());
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): HttpRouteUpdatedEvent {
    return { data: isSet(object.data) ? HttpRouteEventData.fromJSON(object.data) : undefined };
  },

  toJSON(message: HttpRouteUpdatedEvent): unknown {
    const obj: any = {};
    if (message.data !== undefined) {
      obj.data = HttpRouteEventData.toJSON(message.data);
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<HttpRouteUpdatedEvent>, I>>(base?: I): HttpRouteUpdatedEvent {
    return HttpRouteUpdatedEvent.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<HttpRouteUpdatedEvent>, I>>(object: I): HttpRouteUpdatedEvent {
    const message = createBaseHttpRouteUpdatedEvent();
    message.data = (object.data !== undefined && object.data !== null)
      ? HttpRouteEventData.fromPartial(object.data)
      : undefined;
    return message;
  },
};

function createBaseHttpRouteDeletedEvent(): HttpRouteDeletedEvent {
  return { data: undefined };
}

export const HttpRouteDeletedEvent: MessageFns<HttpRouteDeletedEvent> = {
  encode(message: HttpRouteDeletedEvent, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.data !== undefined) {
      HttpRouteEventData.encode(message.data, writer.uint32(10).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): HttpRouteDeletedEvent {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    const end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseHttpRouteDeletedEvent();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.data = HttpRouteEventData.decode(reader, reader.uint32());
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): HttpRouteDeletedEvent {
    return { data: isSet(object.data) ? HttpRouteEventData.fromJSON(object.data) : undefined };
  },

  toJSON(message: HttpRouteDeletedEvent): unknown {
    const obj: any = {};
    if (message.data !== undefined) {
      obj.data = HttpRouteEventData.toJSON(message.data);
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<HttpRouteDeletedEvent>, I>>(base?: I): HttpRouteDeletedEvent {
    return HttpRouteDeletedEvent.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<HttpRouteDeletedEvent>, I>>(object: I): HttpRouteDeletedEvent {
    const message = createBaseHttpRouteDeletedEvent();
    message.data = (object.data !== undefined && object.data !== null)
      ? HttpRouteEventData.fromPartial(object.data)
      : undefined;
    return message;
  },
};

function createBaseTcpRouteCreatedEvent(): TcpRouteCreatedEvent {
  return { data: undefined };
}

export const TcpRouteCreatedEvent: MessageFns<TcpRouteCreatedEvent> = {
  encode(message: TcpRouteCreatedEvent, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.data !== undefined) {
      TcpRouteEventData.encode(message.data, writer.uint32(10).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): TcpRouteCreatedEvent {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    const end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseTcpRouteCreatedEvent();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.data = TcpRouteEventData.decode(reader, reader.uint32());
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): TcpRouteCreatedEvent {
    return { data: isSet(object.data) ? TcpRouteEventData.fromJSON(object.data) : undefined };
  },

  toJSON(message: TcpRouteCreatedEvent): unknown {
    const obj: any = {};
    if (message.data !== undefined) {
      obj.data = TcpRouteEventData.toJSON(message.data);
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<TcpRouteCreatedEvent>, I>>(base?: I): TcpRouteCreatedEvent {
    return TcpRouteCreatedEvent.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<TcpRouteCreatedEvent>, I>>(object: I): TcpRouteCreatedEvent {
    const message = createBaseTcpRouteCreatedEvent();
    message.data = (object.data !== undefined && object.data !== null)
      ? TcpRouteEventData.fromPartial(object.data)
      : undefined;
    return message;
  },
};

function createBaseTcpRouteUpdatedEvent(): TcpRouteUpdatedEvent {
  return { data: undefined };
}

export const TcpRouteUpdatedEvent: MessageFns<TcpRouteUpdatedEvent> = {
  encode(message: TcpRouteUpdatedEvent, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.data !== undefined) {
      TcpRouteEventData.encode(message.data, writer.uint32(10).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): TcpRouteUpdatedEvent {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    const end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseTcpRouteUpdatedEvent();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.data = TcpRouteEventData.decode(reader, reader.uint32());
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): TcpRouteUpdatedEvent {
    return { data: isSet(object.data) ? TcpRouteEventData.fromJSON(object.data) : undefined };
  },

  toJSON(message: TcpRouteUpdatedEvent): unknown {
    const obj: any = {};
    if (message.data !== undefined) {
      obj.data = TcpRouteEventData.toJSON(message.data);
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<TcpRouteUpdatedEvent>, I>>(base?: I): TcpRouteUpdatedEvent {
    return TcpRouteUpdatedEvent.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<TcpRouteUpdatedEvent>, I>>(object: I): TcpRouteUpdatedEvent {
    const message = createBaseTcpRouteUpdatedEvent();
    message.data = (object.data !== undefined && object.data !== null)
      ? TcpRouteEventData.fromPartial(object.data)
      : undefined;
    return message;
  },
};

function createBaseTcpRouteDeletedEvent(): TcpRouteDeletedEvent {
  return { data: undefined };
}

export const TcpRouteDeletedEvent: MessageFns<TcpRouteDeletedEvent> = {
  encode(message: TcpRouteDeletedEvent, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.data !== undefined) {
      TcpRouteEventData.encode(message.data, writer.uint32(10).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): TcpRouteDeletedEvent {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    const end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseTcpRouteDeletedEvent();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.data = TcpRouteEventData.decode(reader, reader.uint32());
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): TcpRouteDeletedEvent {
    return { data: isSet(object.data) ? TcpRouteEventData.fromJSON(object.data) : undefined };
  },

  toJSON(message: TcpRouteDeletedEvent): unknown {
    const obj: any = {};
    if (message.data !== undefined) {
      obj.data = TcpRouteEventData.toJSON(message.data);
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<TcpRouteDeletedEvent>, I>>(base?: I): TcpRouteDeletedEvent {
    return TcpRouteDeletedEvent.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<TcpRouteDeletedEvent>, I>>(object: I): TcpRouteDeletedEvent {
    const message = createBaseTcpRouteDeletedEvent();
    message.data = (object.data !== undefined && object.data !== null)
      ? TcpRouteEventData.fromPartial(object.data)
      : undefined;
    return message;
  },
};

function createBaseTlsRouteCreatedEvent(): TlsRouteCreatedEvent {
  return { data: undefined };
}

export const TlsRouteCreatedEvent: MessageFns<TlsRouteCreatedEvent> = {
  encode(message: TlsRouteCreatedEvent, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.data !== undefined) {
      TlsRouteEventData.encode(message.data, writer.uint32(10).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): TlsRouteCreatedEvent {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    const end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseTlsRouteCreatedEvent();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.data = TlsRouteEventData.decode(reader, reader.uint32());
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): TlsRouteCreatedEvent {
    return { data: isSet(object.data) ? TlsRouteEventData.fromJSON(object.data) : undefined };
  },

  toJSON(message: TlsRouteCreatedEvent): unknown {
    const obj: any = {};
    if (message.data !== undefined) {
      obj.data = TlsRouteEventData.toJSON(message.data);
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<TlsRouteCreatedEvent>, I>>(base?: I): TlsRouteCreatedEvent {
    return TlsRouteCreatedEvent.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<TlsRouteCreatedEvent>, I>>(object: I): TlsRouteCreatedEvent {
    const message = createBaseTlsRouteCreatedEvent();
    message.data = (object.data !== undefined && object.data !== null)
      ? TlsRouteEventData.fromPartial(object.data)
      : undefined;
    return message;
  },
};

function createBaseTlsRouteUpdatedEvent(): TlsRouteUpdatedEvent {
  return { data: undefined };
}

export const TlsRouteUpdatedEvent: MessageFns<TlsRouteUpdatedEvent> = {
  encode(message: TlsRouteUpdatedEvent, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.data !== undefined) {
      TlsRouteEventData.encode(message.data, writer.uint32(10).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): TlsRouteUpdatedEvent {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    const end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseTlsRouteUpdatedEvent();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.data = TlsRouteEventData.decode(reader, reader.uint32());
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): TlsRouteUpdatedEvent {
    return { data: isSet(object.data) ? TlsRouteEventData.fromJSON(object.data) : undefined };
  },

  toJSON(message: TlsRouteUpdatedEvent): unknown {
    const obj: any = {};
    if (message.data !== undefined) {
      obj.data = TlsRouteEventData.toJSON(message.data);
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<TlsRouteUpdatedEvent>, I>>(base?: I): TlsRouteUpdatedEvent {
    return TlsRouteUpdatedEvent.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<TlsRouteUpdatedEvent>, I>>(object: I): TlsRouteUpdatedEvent {
    const message = createBaseTlsRouteUpdatedEvent();
    message.data = (object.data !== undefined && object.data !== null)
      ? TlsRouteEventData.fromPartial(object.data)
      : undefined;
    return message;
  },
};

function createBaseTlsRouteDeletedEvent(): TlsRouteDeletedEvent {
  return { data: undefined };
}

export const TlsRouteDeletedEvent: MessageFns<TlsRouteDeletedEvent> = {
  encode(message: TlsRouteDeletedEvent, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.data !== undefined) {
      TlsRouteEventData.encode(message.data, writer.uint32(10).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): TlsRouteDeletedEvent {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    const end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseTlsRouteDeletedEvent();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.data = TlsRouteEventData.decode(reader, reader.uint32());
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): TlsRouteDeletedEvent {
    return { data: isSet(object.data) ? TlsRouteEventData.fromJSON(object.data) : undefined };
  },

  toJSON(message: TlsRouteDeletedEvent): unknown {
    const obj: any = {};
    if (message.data !== undefined) {
      obj.data = TlsRouteEventData.toJSON(message.data);
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<TlsRouteDeletedEvent>, I>>(base?: I): TlsRouteDeletedEvent {
    return TlsRouteDeletedEvent.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<TlsRouteDeletedEvent>, I>>(object: I): TlsRouteDeletedEvent {
    const message = createBaseTlsRouteDeletedEvent();
    message.data = (object.data !== undefined && object.data !== null)
      ? TlsRouteEventData.fromPartial(object.data)
      : undefined;
    return message;
  },
};

function createBaseServiceBindingCreatedEvent(): ServiceBindingCreatedEvent {
  return { data: undefined };
}

export const ServiceBindingCreatedEvent: MessageFns<ServiceBindingCreatedEvent> = {
  encode(message: ServiceBindingCreatedEvent, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.data !== undefined) {
      ServiceBindingEventData.encode(message.data, writer.uint32(10).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): ServiceBindingCreatedEvent {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    const end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseServiceBindingCreatedEvent();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.data = ServiceBindingEventData.decode(reader, reader.uint32());
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): ServiceBindingCreatedEvent {
    return { data: isSet(object.data) ? ServiceBindingEventData.fromJSON(object.data) : undefined };
  },

  toJSON(message: ServiceBindingCreatedEvent): unknown {
    const obj: any = {};
    if (message.data !== undefined) {
      obj.data = ServiceBindingEventData.toJSON(message.data);
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<ServiceBindingCreatedEvent>, I>>(base?: I): ServiceBindingCreatedEvent {
    return ServiceBindingCreatedEvent.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<ServiceBindingCreatedEvent>, I>>(object: I): ServiceBindingCreatedEvent {
    const message = createBaseServiceBindingCreatedEvent();
    message.data = (object.data !== undefined && object.data !== null)
      ? ServiceBindingEventData.fromPartial(object.data)
      : undefined;
    return message;
  },
};

function createBaseServiceBindingDeletedEvent(): ServiceBindingDeletedEvent {
  return { data: undefined };
}

export const ServiceBindingDeletedEvent: MessageFns<ServiceBindingDeletedEvent> = {
  encode(message: ServiceBindingDeletedEvent, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.data !== undefined) {
      ServiceBindingEventData.encode(message.data, writer.uint32(10).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): ServiceBindingDeletedEvent {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    const end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseServiceBindingDeletedEvent();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.data = ServiceBindingEventData.decode(reader, reader.uint32());
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): ServiceBindingDeletedEvent {
    return { data: isSet(object.data) ? ServiceBindingEventData.fromJSON(object.data) : undefined };
  },

  toJSON(message: ServiceBindingDeletedEvent): unknown {
    const obj: any = {};
    if (message.data !== undefined) {
      obj.data = ServiceBindingEventData.toJSON(message.data);
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<ServiceBindingDeletedEvent>, I>>(base?: I): ServiceBindingDeletedEvent {
    return ServiceBindingDeletedEvent.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<ServiceBindingDeletedEvent>, I>>(object: I): ServiceBindingDeletedEvent {
    const message = createBaseServiceBindingDeletedEvent();
    message.data = (object.data !== undefined && object.data !== null)
      ? ServiceBindingEventData.fromPartial(object.data)
      : undefined;
    return message;
  },
};

function createBaseMeshCreatedEvent(): MeshCreatedEvent {
  return { data: undefined };
}

export const MeshCreatedEvent: MessageFns<MeshCreatedEvent> = {
  encode(message: MeshCreatedEvent, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.data !== undefined) {
      MeshEventData.encode(message.data, writer.uint32(10).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): MeshCreatedEvent {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    const end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseMeshCreatedEvent();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.data = MeshEventData.decode(reader, reader.uint32());
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): MeshCreatedEvent {
    return { data: isSet(object.data) ? MeshEventData.fromJSON(object.data) : undefined };
  },

  toJSON(message: MeshCreatedEvent): unknown {
    const obj: any = {};
    if (message.data !== undefined) {
      obj.data = MeshEventData.toJSON(message.data);
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<MeshCreatedEvent>, I>>(base?: I): MeshCreatedEvent {
    return MeshCreatedEvent.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<MeshCreatedEvent>, I>>(object: I): MeshCreatedEvent {
    const message = createBaseMeshCreatedEvent();
    message.data = (object.data !== undefined && object.data !== null)
      ? MeshEventData.fromPartial(object.data)
      : undefined;
    return message;
  },
};

function createBaseMeshUpdatedEvent(): MeshUpdatedEvent {
  return { data: undefined };
}

export const MeshUpdatedEvent: MessageFns<MeshUpdatedEvent> = {
  encode(message: MeshUpdatedEvent, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.data !== undefined) {
      MeshEventData.encode(message.data, writer.uint32(10).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): MeshUpdatedEvent {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    const end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseMeshUpdatedEvent();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.data = MeshEventData.decode(reader, reader.uint32());
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): MeshUpdatedEvent {
    return { data: isSet(object.data) ? MeshEventData.fromJSON(object.data) : undefined };
  },

  toJSON(message: MeshUpdatedEvent): unknown {
    const obj: any = {};
    if (message.data !== undefined) {
      obj.data = MeshEventData.toJSON(message.data);
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<MeshUpdatedEvent>, I>>(base?: I): MeshUpdatedEvent {
    return MeshUpdatedEvent.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<MeshUpdatedEvent>, I>>(object: I): MeshUpdatedEvent {
    const message = createBaseMeshUpdatedEvent();
    message.data = (object.data !== undefined && object.data !== null)
      ? MeshEventData.fromPartial(object.data)
      : undefined;
    return message;
  },
};

function createBaseMeshDeletedEvent(): MeshDeletedEvent {
  return { data: undefined };
}

export const MeshDeletedEvent: MessageFns<MeshDeletedEvent> = {
  encode(message: MeshDeletedEvent, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.data !== undefined) {
      MeshEventData.encode(message.data, writer.uint32(10).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): MeshDeletedEvent {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    const end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseMeshDeletedEvent();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.data = MeshEventData.decode(reader, reader.uint32());
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): MeshDeletedEvent {
    return { data: isSet(object.data) ? MeshEventData.fromJSON(object.data) : undefined };
  },

  toJSON(message: MeshDeletedEvent): unknown {
    const obj: any = {};
    if (message.data !== undefined) {
      obj.data = MeshEventData.toJSON(message.data);
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<MeshDeletedEvent>, I>>(base?: I): MeshDeletedEvent {
    return MeshDeletedEvent.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<MeshDeletedEvent>, I>>(object: I): MeshDeletedEvent {
    const message = createBaseMeshDeletedEvent();
    message.data = (object.data !== undefined && object.data !== null)
      ? MeshEventData.fromPartial(object.data)
      : undefined;
    return message;
  },
};

type Builtin = Date | Function | Uint8Array | string | number | boolean | undefined;

export type DeepPartial<T> = T extends Builtin ? T
  : T extends Long ? string | number | Long : T extends globalThis.Array<infer U> ? globalThis.Array<DeepPartial<U>>
  : T extends ReadonlyArray<infer U> ? ReadonlyArray<DeepPartial<U>>
  : T extends {} ? { [K in keyof T]?: DeepPartial<T[K]> }
  : Partial<T>;

type KeysOfUnion<T> = T extends T ? keyof T : never;
export type Exact<P, I extends P> = P extends Builtin ? P
  : P & { [K in keyof P]: Exact<P[K], I[K]> } & { [K in Exclude<keyof I, KeysOfUnion<P>>]: never };

function isSet(value: any): boolean {
  return value !== null && value !== undefined;
}

export interface MessageFns<T> {
  encode(message: T, writer?: BinaryWriter): BinaryWriter;
  decode(input: BinaryReader | Uint8Array, length?: number): T;
  fromJSON(object: any): T;
  toJSON(message: T): unknown;
  create<I extends Exact<DeepPartial<T>, I>>(base?: I): T;
  fromPartial<I extends Exact<DeepPartial<T>, I>>(object: I): T;
}
