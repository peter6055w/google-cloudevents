// Code generated by protoc-gen-ts_proto. DO NOT EDIT.
// versions:
//   protoc-gen-ts_proto  v2.7.7
//   protoc               v6.32.0
// source: google/events/cloud/notebooks/v1/events.proto

/* eslint-disable */
import { BinaryReader, BinaryWriter } from "@bufbuild/protobuf/wire";
import Long from "long";
import {
  EnvironmentEventData,
  ExecutionEventData,
  InstanceEventData,
  RuntimeEventData,
  ScheduleEventData,
} from "./data";

export const protobufPackage = "google.events.cloud.notebooks.v1";

/** The CloudEvent raised when a Runtime is created. */
export interface RuntimeCreatedEvent {
  /** The data associated with the event. */
  data?: RuntimeEventData | undefined;
}

/** The CloudEvent raised when a Runtime is updated. */
export interface RuntimeUpdatedEvent {
  /** The data associated with the event. */
  data?: RuntimeEventData | undefined;
}

/** The CloudEvent raised when a Runtime is deleted. */
export interface RuntimeDeletedEvent {
  /** The data associated with the event. */
  data?: RuntimeEventData | undefined;
}

/** The CloudEvent raised when an Instance is created. */
export interface InstanceCreatedEvent {
  /** The data associated with the event. */
  data?: InstanceEventData | undefined;
}

/** The CloudEvent raised when an Instance is deleted. */
export interface InstanceDeletedEvent {
  /** The data associated with the event. */
  data?: InstanceEventData | undefined;
}

/** The CloudEvent raised when an Environment is created. */
export interface EnvironmentCreatedEvent {
  /** The data associated with the event. */
  data?: EnvironmentEventData | undefined;
}

/** The CloudEvent raised when an Environment is deleted. */
export interface EnvironmentDeletedEvent {
  /** The data associated with the event. */
  data?: EnvironmentEventData | undefined;
}

/** The CloudEvent raised when a Schedule is deleted. */
export interface ScheduleDeletedEvent {
  /** The data associated with the event. */
  data?: ScheduleEventData | undefined;
}

/** The CloudEvent raised when a Schedule is created. */
export interface ScheduleCreatedEvent {
  /** The data associated with the event. */
  data?: ScheduleEventData | undefined;
}

/** The CloudEvent raised when an Execution is deleted. */
export interface ExecutionDeletedEvent {
  /** The data associated with the event. */
  data?: ExecutionEventData | undefined;
}

/** The CloudEvent raised when an Execution is created. */
export interface ExecutionCreatedEvent {
  /** The data associated with the event. */
  data?: ExecutionEventData | undefined;
}

function createBaseRuntimeCreatedEvent(): RuntimeCreatedEvent {
  return { data: undefined };
}

export const RuntimeCreatedEvent: MessageFns<RuntimeCreatedEvent> = {
  encode(message: RuntimeCreatedEvent, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.data !== undefined) {
      RuntimeEventData.encode(message.data, writer.uint32(10).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): RuntimeCreatedEvent {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    const end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseRuntimeCreatedEvent();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.data = RuntimeEventData.decode(reader, reader.uint32());
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): RuntimeCreatedEvent {
    return { data: isSet(object.data) ? RuntimeEventData.fromJSON(object.data) : undefined };
  },

  toJSON(message: RuntimeCreatedEvent): unknown {
    const obj: any = {};
    if (message.data !== undefined) {
      obj.data = RuntimeEventData.toJSON(message.data);
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<RuntimeCreatedEvent>, I>>(base?: I): RuntimeCreatedEvent {
    return RuntimeCreatedEvent.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<RuntimeCreatedEvent>, I>>(object: I): RuntimeCreatedEvent {
    const message = createBaseRuntimeCreatedEvent();
    message.data = (object.data !== undefined && object.data !== null)
      ? RuntimeEventData.fromPartial(object.data)
      : undefined;
    return message;
  },
};

function createBaseRuntimeUpdatedEvent(): RuntimeUpdatedEvent {
  return { data: undefined };
}

export const RuntimeUpdatedEvent: MessageFns<RuntimeUpdatedEvent> = {
  encode(message: RuntimeUpdatedEvent, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.data !== undefined) {
      RuntimeEventData.encode(message.data, writer.uint32(10).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): RuntimeUpdatedEvent {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    const end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseRuntimeUpdatedEvent();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.data = RuntimeEventData.decode(reader, reader.uint32());
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): RuntimeUpdatedEvent {
    return { data: isSet(object.data) ? RuntimeEventData.fromJSON(object.data) : undefined };
  },

  toJSON(message: RuntimeUpdatedEvent): unknown {
    const obj: any = {};
    if (message.data !== undefined) {
      obj.data = RuntimeEventData.toJSON(message.data);
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<RuntimeUpdatedEvent>, I>>(base?: I): RuntimeUpdatedEvent {
    return RuntimeUpdatedEvent.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<RuntimeUpdatedEvent>, I>>(object: I): RuntimeUpdatedEvent {
    const message = createBaseRuntimeUpdatedEvent();
    message.data = (object.data !== undefined && object.data !== null)
      ? RuntimeEventData.fromPartial(object.data)
      : undefined;
    return message;
  },
};

function createBaseRuntimeDeletedEvent(): RuntimeDeletedEvent {
  return { data: undefined };
}

export const RuntimeDeletedEvent: MessageFns<RuntimeDeletedEvent> = {
  encode(message: RuntimeDeletedEvent, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.data !== undefined) {
      RuntimeEventData.encode(message.data, writer.uint32(10).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): RuntimeDeletedEvent {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    const end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseRuntimeDeletedEvent();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.data = RuntimeEventData.decode(reader, reader.uint32());
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): RuntimeDeletedEvent {
    return { data: isSet(object.data) ? RuntimeEventData.fromJSON(object.data) : undefined };
  },

  toJSON(message: RuntimeDeletedEvent): unknown {
    const obj: any = {};
    if (message.data !== undefined) {
      obj.data = RuntimeEventData.toJSON(message.data);
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<RuntimeDeletedEvent>, I>>(base?: I): RuntimeDeletedEvent {
    return RuntimeDeletedEvent.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<RuntimeDeletedEvent>, I>>(object: I): RuntimeDeletedEvent {
    const message = createBaseRuntimeDeletedEvent();
    message.data = (object.data !== undefined && object.data !== null)
      ? RuntimeEventData.fromPartial(object.data)
      : undefined;
    return message;
  },
};

function createBaseInstanceCreatedEvent(): InstanceCreatedEvent {
  return { data: undefined };
}

export const InstanceCreatedEvent: MessageFns<InstanceCreatedEvent> = {
  encode(message: InstanceCreatedEvent, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.data !== undefined) {
      InstanceEventData.encode(message.data, writer.uint32(10).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): InstanceCreatedEvent {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    const end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseInstanceCreatedEvent();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.data = InstanceEventData.decode(reader, reader.uint32());
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): InstanceCreatedEvent {
    return { data: isSet(object.data) ? InstanceEventData.fromJSON(object.data) : undefined };
  },

  toJSON(message: InstanceCreatedEvent): unknown {
    const obj: any = {};
    if (message.data !== undefined) {
      obj.data = InstanceEventData.toJSON(message.data);
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<InstanceCreatedEvent>, I>>(base?: I): InstanceCreatedEvent {
    return InstanceCreatedEvent.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<InstanceCreatedEvent>, I>>(object: I): InstanceCreatedEvent {
    const message = createBaseInstanceCreatedEvent();
    message.data = (object.data !== undefined && object.data !== null)
      ? InstanceEventData.fromPartial(object.data)
      : undefined;
    return message;
  },
};

function createBaseInstanceDeletedEvent(): InstanceDeletedEvent {
  return { data: undefined };
}

export const InstanceDeletedEvent: MessageFns<InstanceDeletedEvent> = {
  encode(message: InstanceDeletedEvent, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.data !== undefined) {
      InstanceEventData.encode(message.data, writer.uint32(10).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): InstanceDeletedEvent {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    const end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseInstanceDeletedEvent();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.data = InstanceEventData.decode(reader, reader.uint32());
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): InstanceDeletedEvent {
    return { data: isSet(object.data) ? InstanceEventData.fromJSON(object.data) : undefined };
  },

  toJSON(message: InstanceDeletedEvent): unknown {
    const obj: any = {};
    if (message.data !== undefined) {
      obj.data = InstanceEventData.toJSON(message.data);
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<InstanceDeletedEvent>, I>>(base?: I): InstanceDeletedEvent {
    return InstanceDeletedEvent.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<InstanceDeletedEvent>, I>>(object: I): InstanceDeletedEvent {
    const message = createBaseInstanceDeletedEvent();
    message.data = (object.data !== undefined && object.data !== null)
      ? InstanceEventData.fromPartial(object.data)
      : undefined;
    return message;
  },
};

function createBaseEnvironmentCreatedEvent(): EnvironmentCreatedEvent {
  return { data: undefined };
}

export const EnvironmentCreatedEvent: MessageFns<EnvironmentCreatedEvent> = {
  encode(message: EnvironmentCreatedEvent, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.data !== undefined) {
      EnvironmentEventData.encode(message.data, writer.uint32(10).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): EnvironmentCreatedEvent {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    const end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseEnvironmentCreatedEvent();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.data = EnvironmentEventData.decode(reader, reader.uint32());
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): EnvironmentCreatedEvent {
    return { data: isSet(object.data) ? EnvironmentEventData.fromJSON(object.data) : undefined };
  },

  toJSON(message: EnvironmentCreatedEvent): unknown {
    const obj: any = {};
    if (message.data !== undefined) {
      obj.data = EnvironmentEventData.toJSON(message.data);
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<EnvironmentCreatedEvent>, I>>(base?: I): EnvironmentCreatedEvent {
    return EnvironmentCreatedEvent.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<EnvironmentCreatedEvent>, I>>(object: I): EnvironmentCreatedEvent {
    const message = createBaseEnvironmentCreatedEvent();
    message.data = (object.data !== undefined && object.data !== null)
      ? EnvironmentEventData.fromPartial(object.data)
      : undefined;
    return message;
  },
};

function createBaseEnvironmentDeletedEvent(): EnvironmentDeletedEvent {
  return { data: undefined };
}

export const EnvironmentDeletedEvent: MessageFns<EnvironmentDeletedEvent> = {
  encode(message: EnvironmentDeletedEvent, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.data !== undefined) {
      EnvironmentEventData.encode(message.data, writer.uint32(10).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): EnvironmentDeletedEvent {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    const end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseEnvironmentDeletedEvent();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.data = EnvironmentEventData.decode(reader, reader.uint32());
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): EnvironmentDeletedEvent {
    return { data: isSet(object.data) ? EnvironmentEventData.fromJSON(object.data) : undefined };
  },

  toJSON(message: EnvironmentDeletedEvent): unknown {
    const obj: any = {};
    if (message.data !== undefined) {
      obj.data = EnvironmentEventData.toJSON(message.data);
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<EnvironmentDeletedEvent>, I>>(base?: I): EnvironmentDeletedEvent {
    return EnvironmentDeletedEvent.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<EnvironmentDeletedEvent>, I>>(object: I): EnvironmentDeletedEvent {
    const message = createBaseEnvironmentDeletedEvent();
    message.data = (object.data !== undefined && object.data !== null)
      ? EnvironmentEventData.fromPartial(object.data)
      : undefined;
    return message;
  },
};

function createBaseScheduleDeletedEvent(): ScheduleDeletedEvent {
  return { data: undefined };
}

export const ScheduleDeletedEvent: MessageFns<ScheduleDeletedEvent> = {
  encode(message: ScheduleDeletedEvent, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.data !== undefined) {
      ScheduleEventData.encode(message.data, writer.uint32(10).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): ScheduleDeletedEvent {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    const end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseScheduleDeletedEvent();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.data = ScheduleEventData.decode(reader, reader.uint32());
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): ScheduleDeletedEvent {
    return { data: isSet(object.data) ? ScheduleEventData.fromJSON(object.data) : undefined };
  },

  toJSON(message: ScheduleDeletedEvent): unknown {
    const obj: any = {};
    if (message.data !== undefined) {
      obj.data = ScheduleEventData.toJSON(message.data);
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<ScheduleDeletedEvent>, I>>(base?: I): ScheduleDeletedEvent {
    return ScheduleDeletedEvent.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<ScheduleDeletedEvent>, I>>(object: I): ScheduleDeletedEvent {
    const message = createBaseScheduleDeletedEvent();
    message.data = (object.data !== undefined && object.data !== null)
      ? ScheduleEventData.fromPartial(object.data)
      : undefined;
    return message;
  },
};

function createBaseScheduleCreatedEvent(): ScheduleCreatedEvent {
  return { data: undefined };
}

export const ScheduleCreatedEvent: MessageFns<ScheduleCreatedEvent> = {
  encode(message: ScheduleCreatedEvent, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.data !== undefined) {
      ScheduleEventData.encode(message.data, writer.uint32(10).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): ScheduleCreatedEvent {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    const end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseScheduleCreatedEvent();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.data = ScheduleEventData.decode(reader, reader.uint32());
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): ScheduleCreatedEvent {
    return { data: isSet(object.data) ? ScheduleEventData.fromJSON(object.data) : undefined };
  },

  toJSON(message: ScheduleCreatedEvent): unknown {
    const obj: any = {};
    if (message.data !== undefined) {
      obj.data = ScheduleEventData.toJSON(message.data);
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<ScheduleCreatedEvent>, I>>(base?: I): ScheduleCreatedEvent {
    return ScheduleCreatedEvent.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<ScheduleCreatedEvent>, I>>(object: I): ScheduleCreatedEvent {
    const message = createBaseScheduleCreatedEvent();
    message.data = (object.data !== undefined && object.data !== null)
      ? ScheduleEventData.fromPartial(object.data)
      : undefined;
    return message;
  },
};

function createBaseExecutionDeletedEvent(): ExecutionDeletedEvent {
  return { data: undefined };
}

export const ExecutionDeletedEvent: MessageFns<ExecutionDeletedEvent> = {
  encode(message: ExecutionDeletedEvent, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.data !== undefined) {
      ExecutionEventData.encode(message.data, writer.uint32(10).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): ExecutionDeletedEvent {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    const end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseExecutionDeletedEvent();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.data = ExecutionEventData.decode(reader, reader.uint32());
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): ExecutionDeletedEvent {
    return { data: isSet(object.data) ? ExecutionEventData.fromJSON(object.data) : undefined };
  },

  toJSON(message: ExecutionDeletedEvent): unknown {
    const obj: any = {};
    if (message.data !== undefined) {
      obj.data = ExecutionEventData.toJSON(message.data);
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<ExecutionDeletedEvent>, I>>(base?: I): ExecutionDeletedEvent {
    return ExecutionDeletedEvent.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<ExecutionDeletedEvent>, I>>(object: I): ExecutionDeletedEvent {
    const message = createBaseExecutionDeletedEvent();
    message.data = (object.data !== undefined && object.data !== null)
      ? ExecutionEventData.fromPartial(object.data)
      : undefined;
    return message;
  },
};

function createBaseExecutionCreatedEvent(): ExecutionCreatedEvent {
  return { data: undefined };
}

export const ExecutionCreatedEvent: MessageFns<ExecutionCreatedEvent> = {
  encode(message: ExecutionCreatedEvent, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.data !== undefined) {
      ExecutionEventData.encode(message.data, writer.uint32(10).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): ExecutionCreatedEvent {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    const end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseExecutionCreatedEvent();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.data = ExecutionEventData.decode(reader, reader.uint32());
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): ExecutionCreatedEvent {
    return { data: isSet(object.data) ? ExecutionEventData.fromJSON(object.data) : undefined };
  },

  toJSON(message: ExecutionCreatedEvent): unknown {
    const obj: any = {};
    if (message.data !== undefined) {
      obj.data = ExecutionEventData.toJSON(message.data);
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<ExecutionCreatedEvent>, I>>(base?: I): ExecutionCreatedEvent {
    return ExecutionCreatedEvent.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<ExecutionCreatedEvent>, I>>(object: I): ExecutionCreatedEvent {
    const message = createBaseExecutionCreatedEvent();
    message.data = (object.data !== undefined && object.data !== null)
      ? ExecutionEventData.fromPartial(object.data)
      : undefined;
    return message;
  },
};

type Builtin = Date | Function | Uint8Array | string | number | boolean | undefined;

export type DeepPartial<T> = T extends Builtin ? T
  : T extends Long ? string | number | Long : T extends globalThis.Array<infer U> ? globalThis.Array<DeepPartial<U>>
  : T extends ReadonlyArray<infer U> ? ReadonlyArray<DeepPartial<U>>
  : T extends {} ? { [K in keyof T]?: DeepPartial<T[K]> }
  : Partial<T>;

type KeysOfUnion<T> = T extends T ? keyof T : never;
export type Exact<P, I extends P> = P extends Builtin ? P
  : P & { [K in keyof P]: Exact<P[K], I[K]> } & { [K in Exclude<keyof I, KeysOfUnion<P>>]: never };

function isSet(value: any): boolean {
  return value !== null && value !== undefined;
}

export interface MessageFns<T> {
  encode(message: T, writer?: BinaryWriter): BinaryWriter;
  decode(input: BinaryReader | Uint8Array, length?: number): T;
  fromJSON(object: any): T;
  toJSON(message: T): unknown;
  create<I extends Exact<DeepPartial<T>, I>>(base?: I): T;
  fromPartial<I extends Exact<DeepPartial<T>, I>>(object: I): T;
}
