// Code generated by protoc-gen-ts_proto. DO NOT EDIT.
// versions:
//   protoc-gen-ts_proto  v2.7.7
//   protoc               v6.32.0
// source: google/events/cloud/pubsub/v1/data.proto

/* eslint-disable */
import { BinaryReader, BinaryWriter } from "@bufbuild/protobuf/wire";
import Long from "long";
import { Timestamp } from "../../../../protobuf/timestamp";

export const protobufPackage = "google.events.cloud.pubsub.v1";

/** The event data when a message is published to a topic. */
export interface MessagePublishedData {
  /** The message that was published. */
  message?:
    | PubsubMessage
    | undefined;
  /**
   * The resource name of the subscription for which this event was
   * generated. The format of the value is
   * `projects/{project-id}/subscriptions/{subscription-id}`.
   */
  subscription: string;
  /**
   * The approximate number of times that Pub/Sub has attempted to deliver
   * the associated message to a subscriber.
   *
   * More precisely, this is 1 + (number of NACKs) +
   * (number of ack_deadline exceeds) for this message.
   *
   * Upon the first delivery of a given message, `delivery_attempt` will have a
   * value of 1. The value is calculated at best effort and is approximate.
   *
   * If a DeadLetterPolicy is not set on the subscription, this will be 0.
   */
  deliveryAttempt: number;
}

/** A message published to a topic. */
export interface PubsubMessage {
  /** The binary data in the message. */
  data: Uint8Array;
  /** Attributes for this message. */
  attributes: { [key: string]: string };
  /**
   * ID of this message, assigned by the server when the message is published.
   * Guaranteed to be unique within the topic.
   */
  messageId: string;
  /**
   * The time at which the message was published, populated by the server when
   * it receives the `Publish` call.
   */
  publishTime?:
    | Date
    | undefined;
  /**
   * If non-empty, identifies related messages for which publish order should be
   * respected.
   */
  orderingKey: string;
}

export interface PubsubMessage_AttributesEntry {
  key: string;
  value: string;
}

function createBaseMessagePublishedData(): MessagePublishedData {
  return { message: undefined, subscription: "", deliveryAttempt: 0 };
}

export const MessagePublishedData: MessageFns<MessagePublishedData> = {
  encode(message: MessagePublishedData, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.message !== undefined) {
      PubsubMessage.encode(message.message, writer.uint32(10).fork()).join();
    }
    if (message.subscription !== "") {
      writer.uint32(18).string(message.subscription);
    }
    if (message.deliveryAttempt !== 0) {
      writer.uint32(24).int32(message.deliveryAttempt);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): MessagePublishedData {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    const end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseMessagePublishedData();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.message = PubsubMessage.decode(reader, reader.uint32());
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.subscription = reader.string();
          continue;
        }
        case 3: {
          if (tag !== 24) {
            break;
          }

          message.deliveryAttempt = reader.int32();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): MessagePublishedData {
    return {
      message: isSet(object.message) ? PubsubMessage.fromJSON(object.message) : undefined,
      subscription: isSet(object.subscription) ? globalThis.String(object.subscription) : "",
      deliveryAttempt: isSet(object.deliveryAttempt) ? globalThis.Number(object.deliveryAttempt) : 0,
    };
  },

  toJSON(message: MessagePublishedData): unknown {
    const obj: any = {};
    if (message.message !== undefined) {
      obj.message = PubsubMessage.toJSON(message.message);
    }
    if (message.subscription !== "") {
      obj.subscription = message.subscription;
    }
    if (message.deliveryAttempt !== 0) {
      obj.deliveryAttempt = Math.round(message.deliveryAttempt);
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<MessagePublishedData>, I>>(base?: I): MessagePublishedData {
    return MessagePublishedData.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<MessagePublishedData>, I>>(object: I): MessagePublishedData {
    const message = createBaseMessagePublishedData();
    message.message = (object.message !== undefined && object.message !== null)
      ? PubsubMessage.fromPartial(object.message)
      : undefined;
    message.subscription = object.subscription ?? "";
    message.deliveryAttempt = object.deliveryAttempt ?? 0;
    return message;
  },
};

function createBasePubsubMessage(): PubsubMessage {
  return { data: new Uint8Array(0), attributes: {}, messageId: "", publishTime: undefined, orderingKey: "" };
}

export const PubsubMessage: MessageFns<PubsubMessage> = {
  encode(message: PubsubMessage, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.data.length !== 0) {
      writer.uint32(10).bytes(message.data);
    }
    Object.entries(message.attributes).forEach(([key, value]) => {
      PubsubMessage_AttributesEntry.encode({ key: key as any, value }, writer.uint32(18).fork()).join();
    });
    if (message.messageId !== "") {
      writer.uint32(26).string(message.messageId);
    }
    if (message.publishTime !== undefined) {
      Timestamp.encode(toTimestamp(message.publishTime), writer.uint32(34).fork()).join();
    }
    if (message.orderingKey !== "") {
      writer.uint32(42).string(message.orderingKey);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): PubsubMessage {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    const end = length === undefined ? reader.len : reader.pos + length;
    const message = createBasePubsubMessage();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.data = reader.bytes();
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          const entry2 = PubsubMessage_AttributesEntry.decode(reader, reader.uint32());
          if (entry2.value !== undefined) {
            message.attributes[entry2.key] = entry2.value;
          }
          continue;
        }
        case 3: {
          if (tag !== 26) {
            break;
          }

          message.messageId = reader.string();
          continue;
        }
        case 4: {
          if (tag !== 34) {
            break;
          }

          message.publishTime = fromTimestamp(Timestamp.decode(reader, reader.uint32()));
          continue;
        }
        case 5: {
          if (tag !== 42) {
            break;
          }

          message.orderingKey = reader.string();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): PubsubMessage {
    return {
      data: isSet(object.data) ? bytesFromBase64(object.data) : new Uint8Array(0),
      attributes: isObject(object.attributes)
        ? Object.entries(object.attributes).reduce<{ [key: string]: string }>((acc, [key, value]) => {
          acc[key] = String(value);
          return acc;
        }, {})
        : {},
      messageId: isSet(object.messageId) ? globalThis.String(object.messageId) : "",
      publishTime: isSet(object.publishTime) ? fromJsonTimestamp(object.publishTime) : undefined,
      orderingKey: isSet(object.orderingKey) ? globalThis.String(object.orderingKey) : "",
    };
  },

  toJSON(message: PubsubMessage): unknown {
    const obj: any = {};
    if (message.data.length !== 0) {
      obj.data = base64FromBytes(message.data);
    }
    if (message.attributes) {
      const entries = Object.entries(message.attributes);
      if (entries.length > 0) {
        obj.attributes = {};
        entries.forEach(([k, v]) => {
          obj.attributes[k] = v;
        });
      }
    }
    if (message.messageId !== "") {
      obj.messageId = message.messageId;
    }
    if (message.publishTime !== undefined) {
      obj.publishTime = message.publishTime.toISOString();
    }
    if (message.orderingKey !== "") {
      obj.orderingKey = message.orderingKey;
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<PubsubMessage>, I>>(base?: I): PubsubMessage {
    return PubsubMessage.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<PubsubMessage>, I>>(object: I): PubsubMessage {
    const message = createBasePubsubMessage();
    message.data = object.data ?? new Uint8Array(0);
    message.attributes = Object.entries(object.attributes ?? {}).reduce<{ [key: string]: string }>(
      (acc, [key, value]) => {
        if (value !== undefined) {
          acc[key] = globalThis.String(value);
        }
        return acc;
      },
      {},
    );
    message.messageId = object.messageId ?? "";
    message.publishTime = object.publishTime ?? undefined;
    message.orderingKey = object.orderingKey ?? "";
    return message;
  },
};

function createBasePubsubMessage_AttributesEntry(): PubsubMessage_AttributesEntry {
  return { key: "", value: "" };
}

export const PubsubMessage_AttributesEntry: MessageFns<PubsubMessage_AttributesEntry> = {
  encode(message: PubsubMessage_AttributesEntry, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.key !== "") {
      writer.uint32(10).string(message.key);
    }
    if (message.value !== "") {
      writer.uint32(18).string(message.value);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): PubsubMessage_AttributesEntry {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    const end = length === undefined ? reader.len : reader.pos + length;
    const message = createBasePubsubMessage_AttributesEntry();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.key = reader.string();
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.value = reader.string();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): PubsubMessage_AttributesEntry {
    return {
      key: isSet(object.key) ? globalThis.String(object.key) : "",
      value: isSet(object.value) ? globalThis.String(object.value) : "",
    };
  },

  toJSON(message: PubsubMessage_AttributesEntry): unknown {
    const obj: any = {};
    if (message.key !== "") {
      obj.key = message.key;
    }
    if (message.value !== "") {
      obj.value = message.value;
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<PubsubMessage_AttributesEntry>, I>>(base?: I): PubsubMessage_AttributesEntry {
    return PubsubMessage_AttributesEntry.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<PubsubMessage_AttributesEntry>, I>>(
    object: I,
  ): PubsubMessage_AttributesEntry {
    const message = createBasePubsubMessage_AttributesEntry();
    message.key = object.key ?? "";
    message.value = object.value ?? "";
    return message;
  },
};

function bytesFromBase64(b64: string): Uint8Array {
  if ((globalThis as any).Buffer) {
    return Uint8Array.from(globalThis.Buffer.from(b64, "base64"));
  } else {
    const bin = globalThis.atob(b64);
    const arr = new Uint8Array(bin.length);
    for (let i = 0; i < bin.length; ++i) {
      arr[i] = bin.charCodeAt(i);
    }
    return arr;
  }
}

function base64FromBytes(arr: Uint8Array): string {
  if ((globalThis as any).Buffer) {
    return globalThis.Buffer.from(arr).toString("base64");
  } else {
    const bin: string[] = [];
    arr.forEach((byte) => {
      bin.push(globalThis.String.fromCharCode(byte));
    });
    return globalThis.btoa(bin.join(""));
  }
}

type Builtin = Date | Function | Uint8Array | string | number | boolean | undefined;

export type DeepPartial<T> = T extends Builtin ? T
  : T extends Long ? string | number | Long : T extends globalThis.Array<infer U> ? globalThis.Array<DeepPartial<U>>
  : T extends ReadonlyArray<infer U> ? ReadonlyArray<DeepPartial<U>>
  : T extends {} ? { [K in keyof T]?: DeepPartial<T[K]> }
  : Partial<T>;

type KeysOfUnion<T> = T extends T ? keyof T : never;
export type Exact<P, I extends P> = P extends Builtin ? P
  : P & { [K in keyof P]: Exact<P[K], I[K]> } & { [K in Exclude<keyof I, KeysOfUnion<P>>]: never };

function toTimestamp(date: Date): Timestamp {
  const seconds = numberToLong(Math.trunc(date.getTime() / 1_000));
  const nanos = (date.getTime() % 1_000) * 1_000_000;
  return { seconds, nanos };
}

function fromTimestamp(t: Timestamp): Date {
  let millis = (t.seconds.toNumber() || 0) * 1_000;
  millis += (t.nanos || 0) / 1_000_000;
  return new globalThis.Date(millis);
}

function fromJsonTimestamp(o: any): Date {
  if (o instanceof globalThis.Date) {
    return o;
  } else if (typeof o === "string") {
    return new globalThis.Date(o);
  } else {
    return fromTimestamp(Timestamp.fromJSON(o));
  }
}

function numberToLong(number: number) {
  return Long.fromNumber(number);
}

function isObject(value: any): boolean {
  return typeof value === "object" && value !== null;
}

function isSet(value: any): boolean {
  return value !== null && value !== undefined;
}

export interface MessageFns<T> {
  encode(message: T, writer?: BinaryWriter): BinaryWriter;
  decode(input: BinaryReader | Uint8Array, length?: number): T;
  fromJSON(object: any): T;
  toJSON(message: T): unknown;
  create<I extends Exact<DeepPartial<T>, I>>(base?: I): T;
  fromPartial<I extends Exact<DeepPartial<T>, I>>(object: I): T;
}
