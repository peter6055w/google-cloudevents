// Code generated by protoc-gen-ts_proto. DO NOT EDIT.
// versions:
//   protoc-gen-ts_proto  v2.7.7
//   protoc               v6.32.0
// source: google/events/cloud/storage/v1/data.proto

/* eslint-disable */
import { BinaryReader, BinaryWriter } from "@bufbuild/protobuf/wire";
import Long from "long";
import { Timestamp } from "../../../../protobuf/timestamp";

export const protobufPackage = "google.events.cloud.storage.v1";

/** An object within Google Cloud Storage. */
export interface StorageObjectData {
  /**
   * Content-Encoding of the object data, matching
   * [https://tools.ietf.org/html/rfc7231#section-3.1.2.2][RFC 7231 §3.1.2.2]
   */
  contentEncoding: string;
  /**
   * Content-Disposition of the object data, matching
   * [https://tools.ietf.org/html/rfc6266][RFC 6266].
   */
  contentDisposition: string;
  /**
   * Cache-Control directive for the object data, matching
   * [https://tools.ietf.org/html/rfc7234#section-5.2"][RFC 7234 §5.2].
   */
  cacheControl: string;
  /**
   * Content-Language of the object data, matching
   * [https://tools.ietf.org/html/rfc7231#section-3.1.3.2][RFC 7231 §3.1.3.2].
   */
  contentLanguage: string;
  /**
   * The version of the metadata for this object at this generation. Used for
   * preconditions and for detecting changes in metadata. A metageneration
   * number is only meaningful in the context of a particular generation of a
   * particular object.
   */
  metageneration: Long;
  /**
   * The deletion time of the object. Will be returned if and only if this
   * version of the object has been deleted.
   */
  timeDeleted?:
    | Date
    | undefined;
  /**
   * Content-Type of the object data, matching
   * [https://tools.ietf.org/html/rfc7231#section-3.1.1.5][RFC 7231 §3.1.1.5].
   * If an object is stored without a Content-Type, it is served as
   * `application/octet-stream`.
   */
  contentType: string;
  /**
   * Content-Length of the object data in bytes, matching
   * [https://tools.ietf.org/html/rfc7230#section-3.3.2][RFC 7230 §3.3.2].
   */
  size: Long;
  /**
   * The creation time of the object.
   * Attempting to set this field will result in an error.
   */
  timeCreated?:
    | Date
    | undefined;
  /**
   * CRC32c checksum. For more information about using the CRC32c
   * checksum, see
   * [https://cloud.google.com/storage/docs/hashes-etags#_JSONAPI][Hashes and
   * ETags: Best Practices].
   */
  crc32c: string;
  /**
   * Number of underlying components that make up this object. Components are
   * accumulated by compose operations.
   * Attempting to set this field will result in an error.
   */
  componentCount: number;
  /**
   * MD5 hash of the data; encoded using base64 as per
   * [https://tools.ietf.org/html/rfc4648#section-4][RFC 4648 §4]. For more
   * information about using the MD5 hash, see
   * [https://cloud.google.com/storage/docs/hashes-etags#_JSONAPI][Hashes and
   * ETags: Best Practices].
   */
  md5Hash: string;
  /**
   * HTTP 1.1 Entity tag for the object. See
   * [https://tools.ietf.org/html/rfc7232#section-2.3][RFC 7232 §2.3].
   */
  etag: string;
  /** The modification time of the object metadata. */
  updated?:
    | Date
    | undefined;
  /** Storage class of the object. */
  storageClass: string;
  /**
   * Cloud KMS Key used to encrypt this object, if the object is encrypted by
   * such a key.
   */
  kmsKeyName: string;
  /** The time at which the object's storage class was last changed. */
  timeStorageClassUpdated?:
    | Date
    | undefined;
  /** Whether an object is under temporary hold. */
  temporaryHold: boolean;
  /**
   * A server-determined value that specifies the earliest time that the
   * object's retention period expires.
   */
  retentionExpirationTime?:
    | Date
    | undefined;
  /** User-provided metadata, in key/value pairs. */
  metadata: { [key: string]: string };
  /** Whether an object is under event-based hold. */
  eventBasedHold: boolean;
  /** The name of the object. */
  name: string;
  /**
   * The ID of the object, including the bucket name, object name, and
   * generation number.
   */
  id: string;
  /** The name of the bucket containing this object. */
  bucket: string;
  /**
   * The content generation of this object. Used for object versioning.
   * Attempting to set this field will result in an error.
   */
  generation: Long;
  /**
   * Metadata of customer-supplied encryption key, if the object is encrypted by
   * such a key.
   */
  customerEncryption?:
    | StorageObjectData_CustomerEncryption
    | undefined;
  /** Media download link. */
  mediaLink: string;
  /** The link to this object. */
  selfLink: string;
  /** The kind of item this is. For objects, this is always "storage#object". */
  kind: string;
}

/** Describes the customer-specified mechanism used to store the data at rest. */
export interface StorageObjectData_CustomerEncryption {
  /** The encryption algorithm. */
  encryptionAlgorithm: string;
  /** SHA256 hash value of the encryption key. */
  keySha256: string;
}

export interface StorageObjectData_MetadataEntry {
  key: string;
  value: string;
}

function createBaseStorageObjectData(): StorageObjectData {
  return {
    contentEncoding: "",
    contentDisposition: "",
    cacheControl: "",
    contentLanguage: "",
    metageneration: Long.ZERO,
    timeDeleted: undefined,
    contentType: "",
    size: Long.ZERO,
    timeCreated: undefined,
    crc32c: "",
    componentCount: 0,
    md5Hash: "",
    etag: "",
    updated: undefined,
    storageClass: "",
    kmsKeyName: "",
    timeStorageClassUpdated: undefined,
    temporaryHold: false,
    retentionExpirationTime: undefined,
    metadata: {},
    eventBasedHold: false,
    name: "",
    id: "",
    bucket: "",
    generation: Long.ZERO,
    customerEncryption: undefined,
    mediaLink: "",
    selfLink: "",
    kind: "",
  };
}

export const StorageObjectData: MessageFns<StorageObjectData> = {
  encode(message: StorageObjectData, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.contentEncoding !== "") {
      writer.uint32(10).string(message.contentEncoding);
    }
    if (message.contentDisposition !== "") {
      writer.uint32(18).string(message.contentDisposition);
    }
    if (message.cacheControl !== "") {
      writer.uint32(26).string(message.cacheControl);
    }
    if (message.contentLanguage !== "") {
      writer.uint32(42).string(message.contentLanguage);
    }
    if (!message.metageneration.equals(Long.ZERO)) {
      writer.uint32(48).int64(message.metageneration.toString());
    }
    if (message.timeDeleted !== undefined) {
      Timestamp.encode(toTimestamp(message.timeDeleted), writer.uint32(58).fork()).join();
    }
    if (message.contentType !== "") {
      writer.uint32(66).string(message.contentType);
    }
    if (!message.size.equals(Long.ZERO)) {
      writer.uint32(72).int64(message.size.toString());
    }
    if (message.timeCreated !== undefined) {
      Timestamp.encode(toTimestamp(message.timeCreated), writer.uint32(82).fork()).join();
    }
    if (message.crc32c !== "") {
      writer.uint32(90).string(message.crc32c);
    }
    if (message.componentCount !== 0) {
      writer.uint32(96).int32(message.componentCount);
    }
    if (message.md5Hash !== "") {
      writer.uint32(106).string(message.md5Hash);
    }
    if (message.etag !== "") {
      writer.uint32(114).string(message.etag);
    }
    if (message.updated !== undefined) {
      Timestamp.encode(toTimestamp(message.updated), writer.uint32(122).fork()).join();
    }
    if (message.storageClass !== "") {
      writer.uint32(130).string(message.storageClass);
    }
    if (message.kmsKeyName !== "") {
      writer.uint32(138).string(message.kmsKeyName);
    }
    if (message.timeStorageClassUpdated !== undefined) {
      Timestamp.encode(toTimestamp(message.timeStorageClassUpdated), writer.uint32(146).fork()).join();
    }
    if (message.temporaryHold !== false) {
      writer.uint32(152).bool(message.temporaryHold);
    }
    if (message.retentionExpirationTime !== undefined) {
      Timestamp.encode(toTimestamp(message.retentionExpirationTime), writer.uint32(162).fork()).join();
    }
    Object.entries(message.metadata).forEach(([key, value]) => {
      StorageObjectData_MetadataEntry.encode({ key: key as any, value }, writer.uint32(170).fork()).join();
    });
    if (message.eventBasedHold !== false) {
      writer.uint32(232).bool(message.eventBasedHold);
    }
    if (message.name !== "") {
      writer.uint32(186).string(message.name);
    }
    if (message.id !== "") {
      writer.uint32(194).string(message.id);
    }
    if (message.bucket !== "") {
      writer.uint32(202).string(message.bucket);
    }
    if (!message.generation.equals(Long.ZERO)) {
      writer.uint32(208).int64(message.generation.toString());
    }
    if (message.customerEncryption !== undefined) {
      StorageObjectData_CustomerEncryption.encode(message.customerEncryption, writer.uint32(226).fork()).join();
    }
    if (message.mediaLink !== "") {
      writer.uint32(802).string(message.mediaLink);
    }
    if (message.selfLink !== "") {
      writer.uint32(810).string(message.selfLink);
    }
    if (message.kind !== "") {
      writer.uint32(818).string(message.kind);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): StorageObjectData {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    const end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseStorageObjectData();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.contentEncoding = reader.string();
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.contentDisposition = reader.string();
          continue;
        }
        case 3: {
          if (tag !== 26) {
            break;
          }

          message.cacheControl = reader.string();
          continue;
        }
        case 5: {
          if (tag !== 42) {
            break;
          }

          message.contentLanguage = reader.string();
          continue;
        }
        case 6: {
          if (tag !== 48) {
            break;
          }

          message.metageneration = Long.fromString(reader.int64().toString());
          continue;
        }
        case 7: {
          if (tag !== 58) {
            break;
          }

          message.timeDeleted = fromTimestamp(Timestamp.decode(reader, reader.uint32()));
          continue;
        }
        case 8: {
          if (tag !== 66) {
            break;
          }

          message.contentType = reader.string();
          continue;
        }
        case 9: {
          if (tag !== 72) {
            break;
          }

          message.size = Long.fromString(reader.int64().toString());
          continue;
        }
        case 10: {
          if (tag !== 82) {
            break;
          }

          message.timeCreated = fromTimestamp(Timestamp.decode(reader, reader.uint32()));
          continue;
        }
        case 11: {
          if (tag !== 90) {
            break;
          }

          message.crc32c = reader.string();
          continue;
        }
        case 12: {
          if (tag !== 96) {
            break;
          }

          message.componentCount = reader.int32();
          continue;
        }
        case 13: {
          if (tag !== 106) {
            break;
          }

          message.md5Hash = reader.string();
          continue;
        }
        case 14: {
          if (tag !== 114) {
            break;
          }

          message.etag = reader.string();
          continue;
        }
        case 15: {
          if (tag !== 122) {
            break;
          }

          message.updated = fromTimestamp(Timestamp.decode(reader, reader.uint32()));
          continue;
        }
        case 16: {
          if (tag !== 130) {
            break;
          }

          message.storageClass = reader.string();
          continue;
        }
        case 17: {
          if (tag !== 138) {
            break;
          }

          message.kmsKeyName = reader.string();
          continue;
        }
        case 18: {
          if (tag !== 146) {
            break;
          }

          message.timeStorageClassUpdated = fromTimestamp(Timestamp.decode(reader, reader.uint32()));
          continue;
        }
        case 19: {
          if (tag !== 152) {
            break;
          }

          message.temporaryHold = reader.bool();
          continue;
        }
        case 20: {
          if (tag !== 162) {
            break;
          }

          message.retentionExpirationTime = fromTimestamp(Timestamp.decode(reader, reader.uint32()));
          continue;
        }
        case 21: {
          if (tag !== 170) {
            break;
          }

          const entry21 = StorageObjectData_MetadataEntry.decode(reader, reader.uint32());
          if (entry21.value !== undefined) {
            message.metadata[entry21.key] = entry21.value;
          }
          continue;
        }
        case 29: {
          if (tag !== 232) {
            break;
          }

          message.eventBasedHold = reader.bool();
          continue;
        }
        case 23: {
          if (tag !== 186) {
            break;
          }

          message.name = reader.string();
          continue;
        }
        case 24: {
          if (tag !== 194) {
            break;
          }

          message.id = reader.string();
          continue;
        }
        case 25: {
          if (tag !== 202) {
            break;
          }

          message.bucket = reader.string();
          continue;
        }
        case 26: {
          if (tag !== 208) {
            break;
          }

          message.generation = Long.fromString(reader.int64().toString());
          continue;
        }
        case 28: {
          if (tag !== 226) {
            break;
          }

          message.customerEncryption = StorageObjectData_CustomerEncryption.decode(reader, reader.uint32());
          continue;
        }
        case 100: {
          if (tag !== 802) {
            break;
          }

          message.mediaLink = reader.string();
          continue;
        }
        case 101: {
          if (tag !== 810) {
            break;
          }

          message.selfLink = reader.string();
          continue;
        }
        case 102: {
          if (tag !== 818) {
            break;
          }

          message.kind = reader.string();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): StorageObjectData {
    return {
      contentEncoding: isSet(object.contentEncoding) ? globalThis.String(object.contentEncoding) : "",
      contentDisposition: isSet(object.contentDisposition) ? globalThis.String(object.contentDisposition) : "",
      cacheControl: isSet(object.cacheControl) ? globalThis.String(object.cacheControl) : "",
      contentLanguage: isSet(object.contentLanguage) ? globalThis.String(object.contentLanguage) : "",
      metageneration: isSet(object.metageneration) ? Long.fromValue(object.metageneration) : Long.ZERO,
      timeDeleted: isSet(object.timeDeleted) ? fromJsonTimestamp(object.timeDeleted) : undefined,
      contentType: isSet(object.contentType) ? globalThis.String(object.contentType) : "",
      size: isSet(object.size) ? Long.fromValue(object.size) : Long.ZERO,
      timeCreated: isSet(object.timeCreated) ? fromJsonTimestamp(object.timeCreated) : undefined,
      crc32c: isSet(object.crc32c) ? globalThis.String(object.crc32c) : "",
      componentCount: isSet(object.componentCount) ? globalThis.Number(object.componentCount) : 0,
      md5Hash: isSet(object.md5Hash) ? globalThis.String(object.md5Hash) : "",
      etag: isSet(object.etag) ? globalThis.String(object.etag) : "",
      updated: isSet(object.updated) ? fromJsonTimestamp(object.updated) : undefined,
      storageClass: isSet(object.storageClass) ? globalThis.String(object.storageClass) : "",
      kmsKeyName: isSet(object.kmsKeyName) ? globalThis.String(object.kmsKeyName) : "",
      timeStorageClassUpdated: isSet(object.timeStorageClassUpdated)
        ? fromJsonTimestamp(object.timeStorageClassUpdated)
        : undefined,
      temporaryHold: isSet(object.temporaryHold) ? globalThis.Boolean(object.temporaryHold) : false,
      retentionExpirationTime: isSet(object.retentionExpirationTime)
        ? fromJsonTimestamp(object.retentionExpirationTime)
        : undefined,
      metadata: isObject(object.metadata)
        ? Object.entries(object.metadata).reduce<{ [key: string]: string }>((acc, [key, value]) => {
          acc[key] = String(value);
          return acc;
        }, {})
        : {},
      eventBasedHold: isSet(object.eventBasedHold) ? globalThis.Boolean(object.eventBasedHold) : false,
      name: isSet(object.name) ? globalThis.String(object.name) : "",
      id: isSet(object.id) ? globalThis.String(object.id) : "",
      bucket: isSet(object.bucket) ? globalThis.String(object.bucket) : "",
      generation: isSet(object.generation) ? Long.fromValue(object.generation) : Long.ZERO,
      customerEncryption: isSet(object.customerEncryption)
        ? StorageObjectData_CustomerEncryption.fromJSON(object.customerEncryption)
        : undefined,
      mediaLink: isSet(object.mediaLink) ? globalThis.String(object.mediaLink) : "",
      selfLink: isSet(object.selfLink) ? globalThis.String(object.selfLink) : "",
      kind: isSet(object.kind) ? globalThis.String(object.kind) : "",
    };
  },

  toJSON(message: StorageObjectData): unknown {
    const obj: any = {};
    if (message.contentEncoding !== "") {
      obj.contentEncoding = message.contentEncoding;
    }
    if (message.contentDisposition !== "") {
      obj.contentDisposition = message.contentDisposition;
    }
    if (message.cacheControl !== "") {
      obj.cacheControl = message.cacheControl;
    }
    if (message.contentLanguage !== "") {
      obj.contentLanguage = message.contentLanguage;
    }
    if (!message.metageneration.equals(Long.ZERO)) {
      obj.metageneration = (message.metageneration || Long.ZERO).toString();
    }
    if (message.timeDeleted !== undefined) {
      obj.timeDeleted = message.timeDeleted.toISOString();
    }
    if (message.contentType !== "") {
      obj.contentType = message.contentType;
    }
    if (!message.size.equals(Long.ZERO)) {
      obj.size = (message.size || Long.ZERO).toString();
    }
    if (message.timeCreated !== undefined) {
      obj.timeCreated = message.timeCreated.toISOString();
    }
    if (message.crc32c !== "") {
      obj.crc32c = message.crc32c;
    }
    if (message.componentCount !== 0) {
      obj.componentCount = Math.round(message.componentCount);
    }
    if (message.md5Hash !== "") {
      obj.md5Hash = message.md5Hash;
    }
    if (message.etag !== "") {
      obj.etag = message.etag;
    }
    if (message.updated !== undefined) {
      obj.updated = message.updated.toISOString();
    }
    if (message.storageClass !== "") {
      obj.storageClass = message.storageClass;
    }
    if (message.kmsKeyName !== "") {
      obj.kmsKeyName = message.kmsKeyName;
    }
    if (message.timeStorageClassUpdated !== undefined) {
      obj.timeStorageClassUpdated = message.timeStorageClassUpdated.toISOString();
    }
    if (message.temporaryHold !== false) {
      obj.temporaryHold = message.temporaryHold;
    }
    if (message.retentionExpirationTime !== undefined) {
      obj.retentionExpirationTime = message.retentionExpirationTime.toISOString();
    }
    if (message.metadata) {
      const entries = Object.entries(message.metadata);
      if (entries.length > 0) {
        obj.metadata = {};
        entries.forEach(([k, v]) => {
          obj.metadata[k] = v;
        });
      }
    }
    if (message.eventBasedHold !== false) {
      obj.eventBasedHold = message.eventBasedHold;
    }
    if (message.name !== "") {
      obj.name = message.name;
    }
    if (message.id !== "") {
      obj.id = message.id;
    }
    if (message.bucket !== "") {
      obj.bucket = message.bucket;
    }
    if (!message.generation.equals(Long.ZERO)) {
      obj.generation = (message.generation || Long.ZERO).toString();
    }
    if (message.customerEncryption !== undefined) {
      obj.customerEncryption = StorageObjectData_CustomerEncryption.toJSON(message.customerEncryption);
    }
    if (message.mediaLink !== "") {
      obj.mediaLink = message.mediaLink;
    }
    if (message.selfLink !== "") {
      obj.selfLink = message.selfLink;
    }
    if (message.kind !== "") {
      obj.kind = message.kind;
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<StorageObjectData>, I>>(base?: I): StorageObjectData {
    return StorageObjectData.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<StorageObjectData>, I>>(object: I): StorageObjectData {
    const message = createBaseStorageObjectData();
    message.contentEncoding = object.contentEncoding ?? "";
    message.contentDisposition = object.contentDisposition ?? "";
    message.cacheControl = object.cacheControl ?? "";
    message.contentLanguage = object.contentLanguage ?? "";
    message.metageneration = (object.metageneration !== undefined && object.metageneration !== null)
      ? Long.fromValue(object.metageneration)
      : Long.ZERO;
    message.timeDeleted = object.timeDeleted ?? undefined;
    message.contentType = object.contentType ?? "";
    message.size = (object.size !== undefined && object.size !== null) ? Long.fromValue(object.size) : Long.ZERO;
    message.timeCreated = object.timeCreated ?? undefined;
    message.crc32c = object.crc32c ?? "";
    message.componentCount = object.componentCount ?? 0;
    message.md5Hash = object.md5Hash ?? "";
    message.etag = object.etag ?? "";
    message.updated = object.updated ?? undefined;
    message.storageClass = object.storageClass ?? "";
    message.kmsKeyName = object.kmsKeyName ?? "";
    message.timeStorageClassUpdated = object.timeStorageClassUpdated ?? undefined;
    message.temporaryHold = object.temporaryHold ?? false;
    message.retentionExpirationTime = object.retentionExpirationTime ?? undefined;
    message.metadata = Object.entries(object.metadata ?? {}).reduce<{ [key: string]: string }>((acc, [key, value]) => {
      if (value !== undefined) {
        acc[key] = globalThis.String(value);
      }
      return acc;
    }, {});
    message.eventBasedHold = object.eventBasedHold ?? false;
    message.name = object.name ?? "";
    message.id = object.id ?? "";
    message.bucket = object.bucket ?? "";
    message.generation = (object.generation !== undefined && object.generation !== null)
      ? Long.fromValue(object.generation)
      : Long.ZERO;
    message.customerEncryption = (object.customerEncryption !== undefined && object.customerEncryption !== null)
      ? StorageObjectData_CustomerEncryption.fromPartial(object.customerEncryption)
      : undefined;
    message.mediaLink = object.mediaLink ?? "";
    message.selfLink = object.selfLink ?? "";
    message.kind = object.kind ?? "";
    return message;
  },
};

function createBaseStorageObjectData_CustomerEncryption(): StorageObjectData_CustomerEncryption {
  return { encryptionAlgorithm: "", keySha256: "" };
}

export const StorageObjectData_CustomerEncryption: MessageFns<StorageObjectData_CustomerEncryption> = {
  encode(message: StorageObjectData_CustomerEncryption, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.encryptionAlgorithm !== "") {
      writer.uint32(10).string(message.encryptionAlgorithm);
    }
    if (message.keySha256 !== "") {
      writer.uint32(18).string(message.keySha256);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): StorageObjectData_CustomerEncryption {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    const end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseStorageObjectData_CustomerEncryption();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.encryptionAlgorithm = reader.string();
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.keySha256 = reader.string();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): StorageObjectData_CustomerEncryption {
    return {
      encryptionAlgorithm: isSet(object.encryptionAlgorithm) ? globalThis.String(object.encryptionAlgorithm) : "",
      keySha256: isSet(object.keySha256) ? globalThis.String(object.keySha256) : "",
    };
  },

  toJSON(message: StorageObjectData_CustomerEncryption): unknown {
    const obj: any = {};
    if (message.encryptionAlgorithm !== "") {
      obj.encryptionAlgorithm = message.encryptionAlgorithm;
    }
    if (message.keySha256 !== "") {
      obj.keySha256 = message.keySha256;
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<StorageObjectData_CustomerEncryption>, I>>(
    base?: I,
  ): StorageObjectData_CustomerEncryption {
    return StorageObjectData_CustomerEncryption.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<StorageObjectData_CustomerEncryption>, I>>(
    object: I,
  ): StorageObjectData_CustomerEncryption {
    const message = createBaseStorageObjectData_CustomerEncryption();
    message.encryptionAlgorithm = object.encryptionAlgorithm ?? "";
    message.keySha256 = object.keySha256 ?? "";
    return message;
  },
};

function createBaseStorageObjectData_MetadataEntry(): StorageObjectData_MetadataEntry {
  return { key: "", value: "" };
}

export const StorageObjectData_MetadataEntry: MessageFns<StorageObjectData_MetadataEntry> = {
  encode(message: StorageObjectData_MetadataEntry, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.key !== "") {
      writer.uint32(10).string(message.key);
    }
    if (message.value !== "") {
      writer.uint32(18).string(message.value);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): StorageObjectData_MetadataEntry {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    const end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseStorageObjectData_MetadataEntry();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.key = reader.string();
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.value = reader.string();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): StorageObjectData_MetadataEntry {
    return {
      key: isSet(object.key) ? globalThis.String(object.key) : "",
      value: isSet(object.value) ? globalThis.String(object.value) : "",
    };
  },

  toJSON(message: StorageObjectData_MetadataEntry): unknown {
    const obj: any = {};
    if (message.key !== "") {
      obj.key = message.key;
    }
    if (message.value !== "") {
      obj.value = message.value;
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<StorageObjectData_MetadataEntry>, I>>(base?: I): StorageObjectData_MetadataEntry {
    return StorageObjectData_MetadataEntry.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<StorageObjectData_MetadataEntry>, I>>(
    object: I,
  ): StorageObjectData_MetadataEntry {
    const message = createBaseStorageObjectData_MetadataEntry();
    message.key = object.key ?? "";
    message.value = object.value ?? "";
    return message;
  },
};

type Builtin = Date | Function | Uint8Array | string | number | boolean | undefined;

export type DeepPartial<T> = T extends Builtin ? T
  : T extends Long ? string | number | Long : T extends globalThis.Array<infer U> ? globalThis.Array<DeepPartial<U>>
  : T extends ReadonlyArray<infer U> ? ReadonlyArray<DeepPartial<U>>
  : T extends {} ? { [K in keyof T]?: DeepPartial<T[K]> }
  : Partial<T>;

type KeysOfUnion<T> = T extends T ? keyof T : never;
export type Exact<P, I extends P> = P extends Builtin ? P
  : P & { [K in keyof P]: Exact<P[K], I[K]> } & { [K in Exclude<keyof I, KeysOfUnion<P>>]: never };

function toTimestamp(date: Date): Timestamp {
  const seconds = numberToLong(Math.trunc(date.getTime() / 1_000));
  const nanos = (date.getTime() % 1_000) * 1_000_000;
  return { seconds, nanos };
}

function fromTimestamp(t: Timestamp): Date {
  let millis = (t.seconds.toNumber() || 0) * 1_000;
  millis += (t.nanos || 0) / 1_000_000;
  return new globalThis.Date(millis);
}

function fromJsonTimestamp(o: any): Date {
  if (o instanceof globalThis.Date) {
    return o;
  } else if (typeof o === "string") {
    return new globalThis.Date(o);
  } else {
    return fromTimestamp(Timestamp.fromJSON(o));
  }
}

function numberToLong(number: number) {
  return Long.fromNumber(number);
}

function isObject(value: any): boolean {
  return typeof value === "object" && value !== null;
}

function isSet(value: any): boolean {
  return value !== null && value !== undefined;
}

export interface MessageFns<T> {
  encode(message: T, writer?: BinaryWriter): BinaryWriter;
  decode(input: BinaryReader | Uint8Array, length?: number): T;
  fromJSON(object: any): T;
  toJSON(message: T): unknown;
  create<I extends Exact<DeepPartial<T>, I>>(base?: I): T;
  fromPartial<I extends Exact<DeepPartial<T>, I>>(object: I): T;
}
