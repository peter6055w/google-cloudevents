// Code generated by protoc-gen-ts_proto. DO NOT EDIT.
// versions:
//   protoc-gen-ts_proto  v2.7.7
//   protoc               v6.32.0
// source: google/events/cloud/visionai/v1/events.proto

/* eslint-disable */
import { BinaryReader, BinaryWriter } from "@bufbuild/protobuf/wire";
import Long from "long";
import {
  AnalysisEventData,
  ApplicationEventData,
  ClusterEventData,
  DraftEventData,
  EventEventData,
  ProcessEventData,
  ProcessorEventData,
  SeriesEventData,
  StreamEventData,
} from "./data";

export const protobufPackage = "google.events.cloud.visionai.v1";

/** The CloudEvent raised when an Analysis is created. */
export interface AnalysisCreatedEvent {
  /** The data associated with the event. */
  data?: AnalysisEventData | undefined;
}

/** The CloudEvent raised when an Analysis is updated. */
export interface AnalysisUpdatedEvent {
  /** The data associated with the event. */
  data?: AnalysisEventData | undefined;
}

/** The CloudEvent raised when an Analysis is deleted. */
export interface AnalysisDeletedEvent {
  /** The data associated with the event. */
  data?: AnalysisEventData | undefined;
}

/** The CloudEvent raised when a Process is created. */
export interface ProcessCreatedEvent {
  /** The data associated with the event. */
  data?: ProcessEventData | undefined;
}

/** The CloudEvent raised when a Process is updated. */
export interface ProcessUpdatedEvent {
  /** The data associated with the event. */
  data?: ProcessEventData | undefined;
}

/** The CloudEvent raised when a Process is deleted. */
export interface ProcessDeletedEvent {
  /** The data associated with the event. */
  data?: ProcessEventData | undefined;
}

/** The CloudEvent raised when an Application is created. */
export interface ApplicationCreatedEvent {
  /** The data associated with the event. */
  data?: ApplicationEventData | undefined;
}

/** The CloudEvent raised when an Application is updated. */
export interface ApplicationUpdatedEvent {
  /** The data associated with the event. */
  data?: ApplicationEventData | undefined;
}

/** The CloudEvent raised when an Application is deleted. */
export interface ApplicationDeletedEvent {
  /** The data associated with the event. */
  data?: ApplicationEventData | undefined;
}

/** The CloudEvent raised when a Draft is created. */
export interface DraftCreatedEvent {
  /** The data associated with the event. */
  data?: DraftEventData | undefined;
}

/** The CloudEvent raised when a Draft is updated. */
export interface DraftUpdatedEvent {
  /** The data associated with the event. */
  data?: DraftEventData | undefined;
}

/** The CloudEvent raised when a Draft is deleted. */
export interface DraftDeletedEvent {
  /** The data associated with the event. */
  data?: DraftEventData | undefined;
}

/** The CloudEvent raised when a Processor is created. */
export interface ProcessorCreatedEvent {
  /** The data associated with the event. */
  data?: ProcessorEventData | undefined;
}

/** The CloudEvent raised when a Processor is updated. */
export interface ProcessorUpdatedEvent {
  /** The data associated with the event. */
  data?: ProcessorEventData | undefined;
}

/** The CloudEvent raised when a Processor is deleted. */
export interface ProcessorDeletedEvent {
  /** The data associated with the event. */
  data?: ProcessorEventData | undefined;
}

/** The CloudEvent raised when a Cluster is created. */
export interface ClusterCreatedEvent {
  /** The data associated with the event. */
  data?: ClusterEventData | undefined;
}

/** The CloudEvent raised when a Cluster is updated. */
export interface ClusterUpdatedEvent {
  /** The data associated with the event. */
  data?: ClusterEventData | undefined;
}

/** The CloudEvent raised when a Cluster is deleted. */
export interface ClusterDeletedEvent {
  /** The data associated with the event. */
  data?: ClusterEventData | undefined;
}

/** The CloudEvent raised when a Stream is created. */
export interface StreamCreatedEvent {
  /** The data associated with the event. */
  data?: StreamEventData | undefined;
}

/** The CloudEvent raised when a Stream is updated. */
export interface StreamUpdatedEvent {
  /** The data associated with the event. */
  data?: StreamEventData | undefined;
}

/** The CloudEvent raised when a Stream is deleted. */
export interface StreamDeletedEvent {
  /** The data associated with the event. */
  data?: StreamEventData | undefined;
}

/** The CloudEvent raised when an Event is created. */
export interface EventCreatedEvent {
  /** The data associated with the event. */
  data?: EventEventData | undefined;
}

/** The CloudEvent raised when an Event is updated. */
export interface EventUpdatedEvent {
  /** The data associated with the event. */
  data?: EventEventData | undefined;
}

/** The CloudEvent raised when an Event is deleted. */
export interface EventDeletedEvent {
  /** The data associated with the event. */
  data?: EventEventData | undefined;
}

/** The CloudEvent raised when a Series is created. */
export interface SeriesCreatedEvent {
  /** The data associated with the event. */
  data?: SeriesEventData | undefined;
}

/** The CloudEvent raised when a Series is updated. */
export interface SeriesUpdatedEvent {
  /** The data associated with the event. */
  data?: SeriesEventData | undefined;
}

/** The CloudEvent raised when a Series is deleted. */
export interface SeriesDeletedEvent {
  /** The data associated with the event. */
  data?: SeriesEventData | undefined;
}

function createBaseAnalysisCreatedEvent(): AnalysisCreatedEvent {
  return { data: undefined };
}

export const AnalysisCreatedEvent: MessageFns<AnalysisCreatedEvent> = {
  encode(message: AnalysisCreatedEvent, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.data !== undefined) {
      AnalysisEventData.encode(message.data, writer.uint32(10).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): AnalysisCreatedEvent {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    const end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseAnalysisCreatedEvent();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.data = AnalysisEventData.decode(reader, reader.uint32());
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): AnalysisCreatedEvent {
    return { data: isSet(object.data) ? AnalysisEventData.fromJSON(object.data) : undefined };
  },

  toJSON(message: AnalysisCreatedEvent): unknown {
    const obj: any = {};
    if (message.data !== undefined) {
      obj.data = AnalysisEventData.toJSON(message.data);
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<AnalysisCreatedEvent>, I>>(base?: I): AnalysisCreatedEvent {
    return AnalysisCreatedEvent.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<AnalysisCreatedEvent>, I>>(object: I): AnalysisCreatedEvent {
    const message = createBaseAnalysisCreatedEvent();
    message.data = (object.data !== undefined && object.data !== null)
      ? AnalysisEventData.fromPartial(object.data)
      : undefined;
    return message;
  },
};

function createBaseAnalysisUpdatedEvent(): AnalysisUpdatedEvent {
  return { data: undefined };
}

export const AnalysisUpdatedEvent: MessageFns<AnalysisUpdatedEvent> = {
  encode(message: AnalysisUpdatedEvent, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.data !== undefined) {
      AnalysisEventData.encode(message.data, writer.uint32(10).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): AnalysisUpdatedEvent {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    const end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseAnalysisUpdatedEvent();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.data = AnalysisEventData.decode(reader, reader.uint32());
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): AnalysisUpdatedEvent {
    return { data: isSet(object.data) ? AnalysisEventData.fromJSON(object.data) : undefined };
  },

  toJSON(message: AnalysisUpdatedEvent): unknown {
    const obj: any = {};
    if (message.data !== undefined) {
      obj.data = AnalysisEventData.toJSON(message.data);
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<AnalysisUpdatedEvent>, I>>(base?: I): AnalysisUpdatedEvent {
    return AnalysisUpdatedEvent.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<AnalysisUpdatedEvent>, I>>(object: I): AnalysisUpdatedEvent {
    const message = createBaseAnalysisUpdatedEvent();
    message.data = (object.data !== undefined && object.data !== null)
      ? AnalysisEventData.fromPartial(object.data)
      : undefined;
    return message;
  },
};

function createBaseAnalysisDeletedEvent(): AnalysisDeletedEvent {
  return { data: undefined };
}

export const AnalysisDeletedEvent: MessageFns<AnalysisDeletedEvent> = {
  encode(message: AnalysisDeletedEvent, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.data !== undefined) {
      AnalysisEventData.encode(message.data, writer.uint32(10).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): AnalysisDeletedEvent {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    const end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseAnalysisDeletedEvent();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.data = AnalysisEventData.decode(reader, reader.uint32());
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): AnalysisDeletedEvent {
    return { data: isSet(object.data) ? AnalysisEventData.fromJSON(object.data) : undefined };
  },

  toJSON(message: AnalysisDeletedEvent): unknown {
    const obj: any = {};
    if (message.data !== undefined) {
      obj.data = AnalysisEventData.toJSON(message.data);
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<AnalysisDeletedEvent>, I>>(base?: I): AnalysisDeletedEvent {
    return AnalysisDeletedEvent.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<AnalysisDeletedEvent>, I>>(object: I): AnalysisDeletedEvent {
    const message = createBaseAnalysisDeletedEvent();
    message.data = (object.data !== undefined && object.data !== null)
      ? AnalysisEventData.fromPartial(object.data)
      : undefined;
    return message;
  },
};

function createBaseProcessCreatedEvent(): ProcessCreatedEvent {
  return { data: undefined };
}

export const ProcessCreatedEvent: MessageFns<ProcessCreatedEvent> = {
  encode(message: ProcessCreatedEvent, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.data !== undefined) {
      ProcessEventData.encode(message.data, writer.uint32(10).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): ProcessCreatedEvent {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    const end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseProcessCreatedEvent();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.data = ProcessEventData.decode(reader, reader.uint32());
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): ProcessCreatedEvent {
    return { data: isSet(object.data) ? ProcessEventData.fromJSON(object.data) : undefined };
  },

  toJSON(message: ProcessCreatedEvent): unknown {
    const obj: any = {};
    if (message.data !== undefined) {
      obj.data = ProcessEventData.toJSON(message.data);
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<ProcessCreatedEvent>, I>>(base?: I): ProcessCreatedEvent {
    return ProcessCreatedEvent.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<ProcessCreatedEvent>, I>>(object: I): ProcessCreatedEvent {
    const message = createBaseProcessCreatedEvent();
    message.data = (object.data !== undefined && object.data !== null)
      ? ProcessEventData.fromPartial(object.data)
      : undefined;
    return message;
  },
};

function createBaseProcessUpdatedEvent(): ProcessUpdatedEvent {
  return { data: undefined };
}

export const ProcessUpdatedEvent: MessageFns<ProcessUpdatedEvent> = {
  encode(message: ProcessUpdatedEvent, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.data !== undefined) {
      ProcessEventData.encode(message.data, writer.uint32(10).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): ProcessUpdatedEvent {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    const end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseProcessUpdatedEvent();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.data = ProcessEventData.decode(reader, reader.uint32());
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): ProcessUpdatedEvent {
    return { data: isSet(object.data) ? ProcessEventData.fromJSON(object.data) : undefined };
  },

  toJSON(message: ProcessUpdatedEvent): unknown {
    const obj: any = {};
    if (message.data !== undefined) {
      obj.data = ProcessEventData.toJSON(message.data);
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<ProcessUpdatedEvent>, I>>(base?: I): ProcessUpdatedEvent {
    return ProcessUpdatedEvent.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<ProcessUpdatedEvent>, I>>(object: I): ProcessUpdatedEvent {
    const message = createBaseProcessUpdatedEvent();
    message.data = (object.data !== undefined && object.data !== null)
      ? ProcessEventData.fromPartial(object.data)
      : undefined;
    return message;
  },
};

function createBaseProcessDeletedEvent(): ProcessDeletedEvent {
  return { data: undefined };
}

export const ProcessDeletedEvent: MessageFns<ProcessDeletedEvent> = {
  encode(message: ProcessDeletedEvent, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.data !== undefined) {
      ProcessEventData.encode(message.data, writer.uint32(10).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): ProcessDeletedEvent {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    const end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseProcessDeletedEvent();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.data = ProcessEventData.decode(reader, reader.uint32());
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): ProcessDeletedEvent {
    return { data: isSet(object.data) ? ProcessEventData.fromJSON(object.data) : undefined };
  },

  toJSON(message: ProcessDeletedEvent): unknown {
    const obj: any = {};
    if (message.data !== undefined) {
      obj.data = ProcessEventData.toJSON(message.data);
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<ProcessDeletedEvent>, I>>(base?: I): ProcessDeletedEvent {
    return ProcessDeletedEvent.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<ProcessDeletedEvent>, I>>(object: I): ProcessDeletedEvent {
    const message = createBaseProcessDeletedEvent();
    message.data = (object.data !== undefined && object.data !== null)
      ? ProcessEventData.fromPartial(object.data)
      : undefined;
    return message;
  },
};

function createBaseApplicationCreatedEvent(): ApplicationCreatedEvent {
  return { data: undefined };
}

export const ApplicationCreatedEvent: MessageFns<ApplicationCreatedEvent> = {
  encode(message: ApplicationCreatedEvent, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.data !== undefined) {
      ApplicationEventData.encode(message.data, writer.uint32(10).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): ApplicationCreatedEvent {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    const end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseApplicationCreatedEvent();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.data = ApplicationEventData.decode(reader, reader.uint32());
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): ApplicationCreatedEvent {
    return { data: isSet(object.data) ? ApplicationEventData.fromJSON(object.data) : undefined };
  },

  toJSON(message: ApplicationCreatedEvent): unknown {
    const obj: any = {};
    if (message.data !== undefined) {
      obj.data = ApplicationEventData.toJSON(message.data);
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<ApplicationCreatedEvent>, I>>(base?: I): ApplicationCreatedEvent {
    return ApplicationCreatedEvent.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<ApplicationCreatedEvent>, I>>(object: I): ApplicationCreatedEvent {
    const message = createBaseApplicationCreatedEvent();
    message.data = (object.data !== undefined && object.data !== null)
      ? ApplicationEventData.fromPartial(object.data)
      : undefined;
    return message;
  },
};

function createBaseApplicationUpdatedEvent(): ApplicationUpdatedEvent {
  return { data: undefined };
}

export const ApplicationUpdatedEvent: MessageFns<ApplicationUpdatedEvent> = {
  encode(message: ApplicationUpdatedEvent, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.data !== undefined) {
      ApplicationEventData.encode(message.data, writer.uint32(10).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): ApplicationUpdatedEvent {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    const end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseApplicationUpdatedEvent();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.data = ApplicationEventData.decode(reader, reader.uint32());
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): ApplicationUpdatedEvent {
    return { data: isSet(object.data) ? ApplicationEventData.fromJSON(object.data) : undefined };
  },

  toJSON(message: ApplicationUpdatedEvent): unknown {
    const obj: any = {};
    if (message.data !== undefined) {
      obj.data = ApplicationEventData.toJSON(message.data);
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<ApplicationUpdatedEvent>, I>>(base?: I): ApplicationUpdatedEvent {
    return ApplicationUpdatedEvent.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<ApplicationUpdatedEvent>, I>>(object: I): ApplicationUpdatedEvent {
    const message = createBaseApplicationUpdatedEvent();
    message.data = (object.data !== undefined && object.data !== null)
      ? ApplicationEventData.fromPartial(object.data)
      : undefined;
    return message;
  },
};

function createBaseApplicationDeletedEvent(): ApplicationDeletedEvent {
  return { data: undefined };
}

export const ApplicationDeletedEvent: MessageFns<ApplicationDeletedEvent> = {
  encode(message: ApplicationDeletedEvent, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.data !== undefined) {
      ApplicationEventData.encode(message.data, writer.uint32(10).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): ApplicationDeletedEvent {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    const end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseApplicationDeletedEvent();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.data = ApplicationEventData.decode(reader, reader.uint32());
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): ApplicationDeletedEvent {
    return { data: isSet(object.data) ? ApplicationEventData.fromJSON(object.data) : undefined };
  },

  toJSON(message: ApplicationDeletedEvent): unknown {
    const obj: any = {};
    if (message.data !== undefined) {
      obj.data = ApplicationEventData.toJSON(message.data);
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<ApplicationDeletedEvent>, I>>(base?: I): ApplicationDeletedEvent {
    return ApplicationDeletedEvent.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<ApplicationDeletedEvent>, I>>(object: I): ApplicationDeletedEvent {
    const message = createBaseApplicationDeletedEvent();
    message.data = (object.data !== undefined && object.data !== null)
      ? ApplicationEventData.fromPartial(object.data)
      : undefined;
    return message;
  },
};

function createBaseDraftCreatedEvent(): DraftCreatedEvent {
  return { data: undefined };
}

export const DraftCreatedEvent: MessageFns<DraftCreatedEvent> = {
  encode(message: DraftCreatedEvent, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.data !== undefined) {
      DraftEventData.encode(message.data, writer.uint32(10).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): DraftCreatedEvent {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    const end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseDraftCreatedEvent();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.data = DraftEventData.decode(reader, reader.uint32());
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): DraftCreatedEvent {
    return { data: isSet(object.data) ? DraftEventData.fromJSON(object.data) : undefined };
  },

  toJSON(message: DraftCreatedEvent): unknown {
    const obj: any = {};
    if (message.data !== undefined) {
      obj.data = DraftEventData.toJSON(message.data);
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<DraftCreatedEvent>, I>>(base?: I): DraftCreatedEvent {
    return DraftCreatedEvent.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<DraftCreatedEvent>, I>>(object: I): DraftCreatedEvent {
    const message = createBaseDraftCreatedEvent();
    message.data = (object.data !== undefined && object.data !== null)
      ? DraftEventData.fromPartial(object.data)
      : undefined;
    return message;
  },
};

function createBaseDraftUpdatedEvent(): DraftUpdatedEvent {
  return { data: undefined };
}

export const DraftUpdatedEvent: MessageFns<DraftUpdatedEvent> = {
  encode(message: DraftUpdatedEvent, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.data !== undefined) {
      DraftEventData.encode(message.data, writer.uint32(10).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): DraftUpdatedEvent {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    const end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseDraftUpdatedEvent();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.data = DraftEventData.decode(reader, reader.uint32());
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): DraftUpdatedEvent {
    return { data: isSet(object.data) ? DraftEventData.fromJSON(object.data) : undefined };
  },

  toJSON(message: DraftUpdatedEvent): unknown {
    const obj: any = {};
    if (message.data !== undefined) {
      obj.data = DraftEventData.toJSON(message.data);
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<DraftUpdatedEvent>, I>>(base?: I): DraftUpdatedEvent {
    return DraftUpdatedEvent.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<DraftUpdatedEvent>, I>>(object: I): DraftUpdatedEvent {
    const message = createBaseDraftUpdatedEvent();
    message.data = (object.data !== undefined && object.data !== null)
      ? DraftEventData.fromPartial(object.data)
      : undefined;
    return message;
  },
};

function createBaseDraftDeletedEvent(): DraftDeletedEvent {
  return { data: undefined };
}

export const DraftDeletedEvent: MessageFns<DraftDeletedEvent> = {
  encode(message: DraftDeletedEvent, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.data !== undefined) {
      DraftEventData.encode(message.data, writer.uint32(10).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): DraftDeletedEvent {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    const end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseDraftDeletedEvent();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.data = DraftEventData.decode(reader, reader.uint32());
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): DraftDeletedEvent {
    return { data: isSet(object.data) ? DraftEventData.fromJSON(object.data) : undefined };
  },

  toJSON(message: DraftDeletedEvent): unknown {
    const obj: any = {};
    if (message.data !== undefined) {
      obj.data = DraftEventData.toJSON(message.data);
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<DraftDeletedEvent>, I>>(base?: I): DraftDeletedEvent {
    return DraftDeletedEvent.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<DraftDeletedEvent>, I>>(object: I): DraftDeletedEvent {
    const message = createBaseDraftDeletedEvent();
    message.data = (object.data !== undefined && object.data !== null)
      ? DraftEventData.fromPartial(object.data)
      : undefined;
    return message;
  },
};

function createBaseProcessorCreatedEvent(): ProcessorCreatedEvent {
  return { data: undefined };
}

export const ProcessorCreatedEvent: MessageFns<ProcessorCreatedEvent> = {
  encode(message: ProcessorCreatedEvent, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.data !== undefined) {
      ProcessorEventData.encode(message.data, writer.uint32(10).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): ProcessorCreatedEvent {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    const end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseProcessorCreatedEvent();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.data = ProcessorEventData.decode(reader, reader.uint32());
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): ProcessorCreatedEvent {
    return { data: isSet(object.data) ? ProcessorEventData.fromJSON(object.data) : undefined };
  },

  toJSON(message: ProcessorCreatedEvent): unknown {
    const obj: any = {};
    if (message.data !== undefined) {
      obj.data = ProcessorEventData.toJSON(message.data);
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<ProcessorCreatedEvent>, I>>(base?: I): ProcessorCreatedEvent {
    return ProcessorCreatedEvent.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<ProcessorCreatedEvent>, I>>(object: I): ProcessorCreatedEvent {
    const message = createBaseProcessorCreatedEvent();
    message.data = (object.data !== undefined && object.data !== null)
      ? ProcessorEventData.fromPartial(object.data)
      : undefined;
    return message;
  },
};

function createBaseProcessorUpdatedEvent(): ProcessorUpdatedEvent {
  return { data: undefined };
}

export const ProcessorUpdatedEvent: MessageFns<ProcessorUpdatedEvent> = {
  encode(message: ProcessorUpdatedEvent, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.data !== undefined) {
      ProcessorEventData.encode(message.data, writer.uint32(10).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): ProcessorUpdatedEvent {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    const end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseProcessorUpdatedEvent();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.data = ProcessorEventData.decode(reader, reader.uint32());
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): ProcessorUpdatedEvent {
    return { data: isSet(object.data) ? ProcessorEventData.fromJSON(object.data) : undefined };
  },

  toJSON(message: ProcessorUpdatedEvent): unknown {
    const obj: any = {};
    if (message.data !== undefined) {
      obj.data = ProcessorEventData.toJSON(message.data);
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<ProcessorUpdatedEvent>, I>>(base?: I): ProcessorUpdatedEvent {
    return ProcessorUpdatedEvent.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<ProcessorUpdatedEvent>, I>>(object: I): ProcessorUpdatedEvent {
    const message = createBaseProcessorUpdatedEvent();
    message.data = (object.data !== undefined && object.data !== null)
      ? ProcessorEventData.fromPartial(object.data)
      : undefined;
    return message;
  },
};

function createBaseProcessorDeletedEvent(): ProcessorDeletedEvent {
  return { data: undefined };
}

export const ProcessorDeletedEvent: MessageFns<ProcessorDeletedEvent> = {
  encode(message: ProcessorDeletedEvent, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.data !== undefined) {
      ProcessorEventData.encode(message.data, writer.uint32(10).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): ProcessorDeletedEvent {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    const end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseProcessorDeletedEvent();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.data = ProcessorEventData.decode(reader, reader.uint32());
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): ProcessorDeletedEvent {
    return { data: isSet(object.data) ? ProcessorEventData.fromJSON(object.data) : undefined };
  },

  toJSON(message: ProcessorDeletedEvent): unknown {
    const obj: any = {};
    if (message.data !== undefined) {
      obj.data = ProcessorEventData.toJSON(message.data);
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<ProcessorDeletedEvent>, I>>(base?: I): ProcessorDeletedEvent {
    return ProcessorDeletedEvent.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<ProcessorDeletedEvent>, I>>(object: I): ProcessorDeletedEvent {
    const message = createBaseProcessorDeletedEvent();
    message.data = (object.data !== undefined && object.data !== null)
      ? ProcessorEventData.fromPartial(object.data)
      : undefined;
    return message;
  },
};

function createBaseClusterCreatedEvent(): ClusterCreatedEvent {
  return { data: undefined };
}

export const ClusterCreatedEvent: MessageFns<ClusterCreatedEvent> = {
  encode(message: ClusterCreatedEvent, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.data !== undefined) {
      ClusterEventData.encode(message.data, writer.uint32(10).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): ClusterCreatedEvent {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    const end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseClusterCreatedEvent();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.data = ClusterEventData.decode(reader, reader.uint32());
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): ClusterCreatedEvent {
    return { data: isSet(object.data) ? ClusterEventData.fromJSON(object.data) : undefined };
  },

  toJSON(message: ClusterCreatedEvent): unknown {
    const obj: any = {};
    if (message.data !== undefined) {
      obj.data = ClusterEventData.toJSON(message.data);
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<ClusterCreatedEvent>, I>>(base?: I): ClusterCreatedEvent {
    return ClusterCreatedEvent.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<ClusterCreatedEvent>, I>>(object: I): ClusterCreatedEvent {
    const message = createBaseClusterCreatedEvent();
    message.data = (object.data !== undefined && object.data !== null)
      ? ClusterEventData.fromPartial(object.data)
      : undefined;
    return message;
  },
};

function createBaseClusterUpdatedEvent(): ClusterUpdatedEvent {
  return { data: undefined };
}

export const ClusterUpdatedEvent: MessageFns<ClusterUpdatedEvent> = {
  encode(message: ClusterUpdatedEvent, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.data !== undefined) {
      ClusterEventData.encode(message.data, writer.uint32(10).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): ClusterUpdatedEvent {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    const end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseClusterUpdatedEvent();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.data = ClusterEventData.decode(reader, reader.uint32());
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): ClusterUpdatedEvent {
    return { data: isSet(object.data) ? ClusterEventData.fromJSON(object.data) : undefined };
  },

  toJSON(message: ClusterUpdatedEvent): unknown {
    const obj: any = {};
    if (message.data !== undefined) {
      obj.data = ClusterEventData.toJSON(message.data);
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<ClusterUpdatedEvent>, I>>(base?: I): ClusterUpdatedEvent {
    return ClusterUpdatedEvent.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<ClusterUpdatedEvent>, I>>(object: I): ClusterUpdatedEvent {
    const message = createBaseClusterUpdatedEvent();
    message.data = (object.data !== undefined && object.data !== null)
      ? ClusterEventData.fromPartial(object.data)
      : undefined;
    return message;
  },
};

function createBaseClusterDeletedEvent(): ClusterDeletedEvent {
  return { data: undefined };
}

export const ClusterDeletedEvent: MessageFns<ClusterDeletedEvent> = {
  encode(message: ClusterDeletedEvent, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.data !== undefined) {
      ClusterEventData.encode(message.data, writer.uint32(10).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): ClusterDeletedEvent {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    const end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseClusterDeletedEvent();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.data = ClusterEventData.decode(reader, reader.uint32());
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): ClusterDeletedEvent {
    return { data: isSet(object.data) ? ClusterEventData.fromJSON(object.data) : undefined };
  },

  toJSON(message: ClusterDeletedEvent): unknown {
    const obj: any = {};
    if (message.data !== undefined) {
      obj.data = ClusterEventData.toJSON(message.data);
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<ClusterDeletedEvent>, I>>(base?: I): ClusterDeletedEvent {
    return ClusterDeletedEvent.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<ClusterDeletedEvent>, I>>(object: I): ClusterDeletedEvent {
    const message = createBaseClusterDeletedEvent();
    message.data = (object.data !== undefined && object.data !== null)
      ? ClusterEventData.fromPartial(object.data)
      : undefined;
    return message;
  },
};

function createBaseStreamCreatedEvent(): StreamCreatedEvent {
  return { data: undefined };
}

export const StreamCreatedEvent: MessageFns<StreamCreatedEvent> = {
  encode(message: StreamCreatedEvent, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.data !== undefined) {
      StreamEventData.encode(message.data, writer.uint32(10).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): StreamCreatedEvent {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    const end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseStreamCreatedEvent();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.data = StreamEventData.decode(reader, reader.uint32());
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): StreamCreatedEvent {
    return { data: isSet(object.data) ? StreamEventData.fromJSON(object.data) : undefined };
  },

  toJSON(message: StreamCreatedEvent): unknown {
    const obj: any = {};
    if (message.data !== undefined) {
      obj.data = StreamEventData.toJSON(message.data);
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<StreamCreatedEvent>, I>>(base?: I): StreamCreatedEvent {
    return StreamCreatedEvent.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<StreamCreatedEvent>, I>>(object: I): StreamCreatedEvent {
    const message = createBaseStreamCreatedEvent();
    message.data = (object.data !== undefined && object.data !== null)
      ? StreamEventData.fromPartial(object.data)
      : undefined;
    return message;
  },
};

function createBaseStreamUpdatedEvent(): StreamUpdatedEvent {
  return { data: undefined };
}

export const StreamUpdatedEvent: MessageFns<StreamUpdatedEvent> = {
  encode(message: StreamUpdatedEvent, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.data !== undefined) {
      StreamEventData.encode(message.data, writer.uint32(10).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): StreamUpdatedEvent {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    const end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseStreamUpdatedEvent();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.data = StreamEventData.decode(reader, reader.uint32());
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): StreamUpdatedEvent {
    return { data: isSet(object.data) ? StreamEventData.fromJSON(object.data) : undefined };
  },

  toJSON(message: StreamUpdatedEvent): unknown {
    const obj: any = {};
    if (message.data !== undefined) {
      obj.data = StreamEventData.toJSON(message.data);
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<StreamUpdatedEvent>, I>>(base?: I): StreamUpdatedEvent {
    return StreamUpdatedEvent.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<StreamUpdatedEvent>, I>>(object: I): StreamUpdatedEvent {
    const message = createBaseStreamUpdatedEvent();
    message.data = (object.data !== undefined && object.data !== null)
      ? StreamEventData.fromPartial(object.data)
      : undefined;
    return message;
  },
};

function createBaseStreamDeletedEvent(): StreamDeletedEvent {
  return { data: undefined };
}

export const StreamDeletedEvent: MessageFns<StreamDeletedEvent> = {
  encode(message: StreamDeletedEvent, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.data !== undefined) {
      StreamEventData.encode(message.data, writer.uint32(10).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): StreamDeletedEvent {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    const end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseStreamDeletedEvent();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.data = StreamEventData.decode(reader, reader.uint32());
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): StreamDeletedEvent {
    return { data: isSet(object.data) ? StreamEventData.fromJSON(object.data) : undefined };
  },

  toJSON(message: StreamDeletedEvent): unknown {
    const obj: any = {};
    if (message.data !== undefined) {
      obj.data = StreamEventData.toJSON(message.data);
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<StreamDeletedEvent>, I>>(base?: I): StreamDeletedEvent {
    return StreamDeletedEvent.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<StreamDeletedEvent>, I>>(object: I): StreamDeletedEvent {
    const message = createBaseStreamDeletedEvent();
    message.data = (object.data !== undefined && object.data !== null)
      ? StreamEventData.fromPartial(object.data)
      : undefined;
    return message;
  },
};

function createBaseEventCreatedEvent(): EventCreatedEvent {
  return { data: undefined };
}

export const EventCreatedEvent: MessageFns<EventCreatedEvent> = {
  encode(message: EventCreatedEvent, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.data !== undefined) {
      EventEventData.encode(message.data, writer.uint32(10).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): EventCreatedEvent {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    const end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseEventCreatedEvent();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.data = EventEventData.decode(reader, reader.uint32());
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): EventCreatedEvent {
    return { data: isSet(object.data) ? EventEventData.fromJSON(object.data) : undefined };
  },

  toJSON(message: EventCreatedEvent): unknown {
    const obj: any = {};
    if (message.data !== undefined) {
      obj.data = EventEventData.toJSON(message.data);
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<EventCreatedEvent>, I>>(base?: I): EventCreatedEvent {
    return EventCreatedEvent.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<EventCreatedEvent>, I>>(object: I): EventCreatedEvent {
    const message = createBaseEventCreatedEvent();
    message.data = (object.data !== undefined && object.data !== null)
      ? EventEventData.fromPartial(object.data)
      : undefined;
    return message;
  },
};

function createBaseEventUpdatedEvent(): EventUpdatedEvent {
  return { data: undefined };
}

export const EventUpdatedEvent: MessageFns<EventUpdatedEvent> = {
  encode(message: EventUpdatedEvent, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.data !== undefined) {
      EventEventData.encode(message.data, writer.uint32(10).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): EventUpdatedEvent {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    const end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseEventUpdatedEvent();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.data = EventEventData.decode(reader, reader.uint32());
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): EventUpdatedEvent {
    return { data: isSet(object.data) ? EventEventData.fromJSON(object.data) : undefined };
  },

  toJSON(message: EventUpdatedEvent): unknown {
    const obj: any = {};
    if (message.data !== undefined) {
      obj.data = EventEventData.toJSON(message.data);
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<EventUpdatedEvent>, I>>(base?: I): EventUpdatedEvent {
    return EventUpdatedEvent.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<EventUpdatedEvent>, I>>(object: I): EventUpdatedEvent {
    const message = createBaseEventUpdatedEvent();
    message.data = (object.data !== undefined && object.data !== null)
      ? EventEventData.fromPartial(object.data)
      : undefined;
    return message;
  },
};

function createBaseEventDeletedEvent(): EventDeletedEvent {
  return { data: undefined };
}

export const EventDeletedEvent: MessageFns<EventDeletedEvent> = {
  encode(message: EventDeletedEvent, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.data !== undefined) {
      EventEventData.encode(message.data, writer.uint32(10).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): EventDeletedEvent {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    const end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseEventDeletedEvent();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.data = EventEventData.decode(reader, reader.uint32());
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): EventDeletedEvent {
    return { data: isSet(object.data) ? EventEventData.fromJSON(object.data) : undefined };
  },

  toJSON(message: EventDeletedEvent): unknown {
    const obj: any = {};
    if (message.data !== undefined) {
      obj.data = EventEventData.toJSON(message.data);
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<EventDeletedEvent>, I>>(base?: I): EventDeletedEvent {
    return EventDeletedEvent.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<EventDeletedEvent>, I>>(object: I): EventDeletedEvent {
    const message = createBaseEventDeletedEvent();
    message.data = (object.data !== undefined && object.data !== null)
      ? EventEventData.fromPartial(object.data)
      : undefined;
    return message;
  },
};

function createBaseSeriesCreatedEvent(): SeriesCreatedEvent {
  return { data: undefined };
}

export const SeriesCreatedEvent: MessageFns<SeriesCreatedEvent> = {
  encode(message: SeriesCreatedEvent, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.data !== undefined) {
      SeriesEventData.encode(message.data, writer.uint32(10).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): SeriesCreatedEvent {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    const end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseSeriesCreatedEvent();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.data = SeriesEventData.decode(reader, reader.uint32());
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): SeriesCreatedEvent {
    return { data: isSet(object.data) ? SeriesEventData.fromJSON(object.data) : undefined };
  },

  toJSON(message: SeriesCreatedEvent): unknown {
    const obj: any = {};
    if (message.data !== undefined) {
      obj.data = SeriesEventData.toJSON(message.data);
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<SeriesCreatedEvent>, I>>(base?: I): SeriesCreatedEvent {
    return SeriesCreatedEvent.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<SeriesCreatedEvent>, I>>(object: I): SeriesCreatedEvent {
    const message = createBaseSeriesCreatedEvent();
    message.data = (object.data !== undefined && object.data !== null)
      ? SeriesEventData.fromPartial(object.data)
      : undefined;
    return message;
  },
};

function createBaseSeriesUpdatedEvent(): SeriesUpdatedEvent {
  return { data: undefined };
}

export const SeriesUpdatedEvent: MessageFns<SeriesUpdatedEvent> = {
  encode(message: SeriesUpdatedEvent, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.data !== undefined) {
      SeriesEventData.encode(message.data, writer.uint32(10).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): SeriesUpdatedEvent {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    const end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseSeriesUpdatedEvent();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.data = SeriesEventData.decode(reader, reader.uint32());
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): SeriesUpdatedEvent {
    return { data: isSet(object.data) ? SeriesEventData.fromJSON(object.data) : undefined };
  },

  toJSON(message: SeriesUpdatedEvent): unknown {
    const obj: any = {};
    if (message.data !== undefined) {
      obj.data = SeriesEventData.toJSON(message.data);
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<SeriesUpdatedEvent>, I>>(base?: I): SeriesUpdatedEvent {
    return SeriesUpdatedEvent.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<SeriesUpdatedEvent>, I>>(object: I): SeriesUpdatedEvent {
    const message = createBaseSeriesUpdatedEvent();
    message.data = (object.data !== undefined && object.data !== null)
      ? SeriesEventData.fromPartial(object.data)
      : undefined;
    return message;
  },
};

function createBaseSeriesDeletedEvent(): SeriesDeletedEvent {
  return { data: undefined };
}

export const SeriesDeletedEvent: MessageFns<SeriesDeletedEvent> = {
  encode(message: SeriesDeletedEvent, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.data !== undefined) {
      SeriesEventData.encode(message.data, writer.uint32(10).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): SeriesDeletedEvent {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    const end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseSeriesDeletedEvent();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.data = SeriesEventData.decode(reader, reader.uint32());
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): SeriesDeletedEvent {
    return { data: isSet(object.data) ? SeriesEventData.fromJSON(object.data) : undefined };
  },

  toJSON(message: SeriesDeletedEvent): unknown {
    const obj: any = {};
    if (message.data !== undefined) {
      obj.data = SeriesEventData.toJSON(message.data);
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<SeriesDeletedEvent>, I>>(base?: I): SeriesDeletedEvent {
    return SeriesDeletedEvent.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<SeriesDeletedEvent>, I>>(object: I): SeriesDeletedEvent {
    const message = createBaseSeriesDeletedEvent();
    message.data = (object.data !== undefined && object.data !== null)
      ? SeriesEventData.fromPartial(object.data)
      : undefined;
    return message;
  },
};

type Builtin = Date | Function | Uint8Array | string | number | boolean | undefined;

export type DeepPartial<T> = T extends Builtin ? T
  : T extends Long ? string | number | Long : T extends globalThis.Array<infer U> ? globalThis.Array<DeepPartial<U>>
  : T extends ReadonlyArray<infer U> ? ReadonlyArray<DeepPartial<U>>
  : T extends {} ? { [K in keyof T]?: DeepPartial<T[K]> }
  : Partial<T>;

type KeysOfUnion<T> = T extends T ? keyof T : never;
export type Exact<P, I extends P> = P extends Builtin ? P
  : P & { [K in keyof P]: Exact<P[K], I[K]> } & { [K in Exclude<keyof I, KeysOfUnion<P>>]: never };

function isSet(value: any): boolean {
  return value !== null && value !== undefined;
}

export interface MessageFns<T> {
  encode(message: T, writer?: BinaryWriter): BinaryWriter;
  decode(input: BinaryReader | Uint8Array, length?: number): T;
  fromJSON(object: any): T;
  toJSON(message: T): unknown;
  create<I extends Exact<DeepPartial<T>, I>>(base?: I): T;
  fromPartial<I extends Exact<DeepPartial<T>, I>>(object: I): T;
}
