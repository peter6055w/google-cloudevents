// Code generated by protoc-gen-ts_proto. DO NOT EDIT.
// versions:
//   protoc-gen-ts_proto  v2.7.7
//   protoc               v6.32.0
// source: google/events/cloud/vmmigration/v1/events.proto

/* eslint-disable */
import { BinaryReader, BinaryWriter } from "@bufbuild/protobuf/wire";
import Long from "long";
import {
  CloneJobEventData,
  CutoverJobEventData,
  DatacenterConnectorEventData,
  GroupEventData,
  MigratingVmEventData,
  SourceEventData,
  TargetProjectEventData,
  UtilizationReportEventData,
} from "./data";

export const protobufPackage = "google.events.cloud.vmmigration.v1";

/** The CloudEvent raised when a Source is created. */
export interface SourceCreatedEvent {
  /** The data associated with the event. */
  data?: SourceEventData | undefined;
}

/** The CloudEvent raised when a Source is updated. */
export interface SourceUpdatedEvent {
  /** The data associated with the event. */
  data?: SourceEventData | undefined;
}

/** The CloudEvent raised when a Source is deleted. */
export interface SourceDeletedEvent {
  /** The data associated with the event. */
  data?: SourceEventData | undefined;
}

/** The CloudEvent raised when an UtilizationReport is created. */
export interface UtilizationReportCreatedEvent {
  /** The data associated with the event. */
  data?: UtilizationReportEventData | undefined;
}

/** The CloudEvent raised when an UtilizationReport is deleted. */
export interface UtilizationReportDeletedEvent {
  /** The data associated with the event. */
  data?: UtilizationReportEventData | undefined;
}

/** The CloudEvent raised when a DatacenterConnector is created. */
export interface DatacenterConnectorCreatedEvent {
  /** The data associated with the event. */
  data?: DatacenterConnectorEventData | undefined;
}

/** The CloudEvent raised when a DatacenterConnector is deleted. */
export interface DatacenterConnectorDeletedEvent {
  /** The data associated with the event. */
  data?: DatacenterConnectorEventData | undefined;
}

/** The CloudEvent raised when a MigratingVm is created. */
export interface MigratingVmCreatedEvent {
  /** The data associated with the event. */
  data?: MigratingVmEventData | undefined;
}

/** The CloudEvent raised when a MigratingVm is updated. */
export interface MigratingVmUpdatedEvent {
  /** The data associated with the event. */
  data?: MigratingVmEventData | undefined;
}

/** The CloudEvent raised when a MigratingVm is deleted. */
export interface MigratingVmDeletedEvent {
  /** The data associated with the event. */
  data?: MigratingVmEventData | undefined;
}

/** The CloudEvent raised when a CloneJob is created. */
export interface CloneJobCreatedEvent {
  /** The data associated with the event. */
  data?: CloneJobEventData | undefined;
}

/** The CloudEvent raised when a CutoverJob is created. */
export interface CutoverJobCreatedEvent {
  /** The data associated with the event. */
  data?: CutoverJobEventData | undefined;
}

/** The CloudEvent raised when a Group is created. */
export interface GroupCreatedEvent {
  /** The data associated with the event. */
  data?: GroupEventData | undefined;
}

/** The CloudEvent raised when a Group is updated. */
export interface GroupUpdatedEvent {
  /** The data associated with the event. */
  data?: GroupEventData | undefined;
}

/** The CloudEvent raised when a Group is deleted. */
export interface GroupDeletedEvent {
  /** The data associated with the event. */
  data?: GroupEventData | undefined;
}

/** The CloudEvent raised when a TargetProject is created. */
export interface TargetProjectCreatedEvent {
  /** The data associated with the event. */
  data?: TargetProjectEventData | undefined;
}

/** The CloudEvent raised when a TargetProject is updated. */
export interface TargetProjectUpdatedEvent {
  /** The data associated with the event. */
  data?: TargetProjectEventData | undefined;
}

/** The CloudEvent raised when a TargetProject is deleted. */
export interface TargetProjectDeletedEvent {
  /** The data associated with the event. */
  data?: TargetProjectEventData | undefined;
}

function createBaseSourceCreatedEvent(): SourceCreatedEvent {
  return { data: undefined };
}

export const SourceCreatedEvent: MessageFns<SourceCreatedEvent> = {
  encode(message: SourceCreatedEvent, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.data !== undefined) {
      SourceEventData.encode(message.data, writer.uint32(10).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): SourceCreatedEvent {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    const end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseSourceCreatedEvent();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.data = SourceEventData.decode(reader, reader.uint32());
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): SourceCreatedEvent {
    return { data: isSet(object.data) ? SourceEventData.fromJSON(object.data) : undefined };
  },

  toJSON(message: SourceCreatedEvent): unknown {
    const obj: any = {};
    if (message.data !== undefined) {
      obj.data = SourceEventData.toJSON(message.data);
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<SourceCreatedEvent>, I>>(base?: I): SourceCreatedEvent {
    return SourceCreatedEvent.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<SourceCreatedEvent>, I>>(object: I): SourceCreatedEvent {
    const message = createBaseSourceCreatedEvent();
    message.data = (object.data !== undefined && object.data !== null)
      ? SourceEventData.fromPartial(object.data)
      : undefined;
    return message;
  },
};

function createBaseSourceUpdatedEvent(): SourceUpdatedEvent {
  return { data: undefined };
}

export const SourceUpdatedEvent: MessageFns<SourceUpdatedEvent> = {
  encode(message: SourceUpdatedEvent, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.data !== undefined) {
      SourceEventData.encode(message.data, writer.uint32(10).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): SourceUpdatedEvent {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    const end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseSourceUpdatedEvent();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.data = SourceEventData.decode(reader, reader.uint32());
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): SourceUpdatedEvent {
    return { data: isSet(object.data) ? SourceEventData.fromJSON(object.data) : undefined };
  },

  toJSON(message: SourceUpdatedEvent): unknown {
    const obj: any = {};
    if (message.data !== undefined) {
      obj.data = SourceEventData.toJSON(message.data);
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<SourceUpdatedEvent>, I>>(base?: I): SourceUpdatedEvent {
    return SourceUpdatedEvent.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<SourceUpdatedEvent>, I>>(object: I): SourceUpdatedEvent {
    const message = createBaseSourceUpdatedEvent();
    message.data = (object.data !== undefined && object.data !== null)
      ? SourceEventData.fromPartial(object.data)
      : undefined;
    return message;
  },
};

function createBaseSourceDeletedEvent(): SourceDeletedEvent {
  return { data: undefined };
}

export const SourceDeletedEvent: MessageFns<SourceDeletedEvent> = {
  encode(message: SourceDeletedEvent, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.data !== undefined) {
      SourceEventData.encode(message.data, writer.uint32(10).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): SourceDeletedEvent {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    const end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseSourceDeletedEvent();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.data = SourceEventData.decode(reader, reader.uint32());
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): SourceDeletedEvent {
    return { data: isSet(object.data) ? SourceEventData.fromJSON(object.data) : undefined };
  },

  toJSON(message: SourceDeletedEvent): unknown {
    const obj: any = {};
    if (message.data !== undefined) {
      obj.data = SourceEventData.toJSON(message.data);
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<SourceDeletedEvent>, I>>(base?: I): SourceDeletedEvent {
    return SourceDeletedEvent.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<SourceDeletedEvent>, I>>(object: I): SourceDeletedEvent {
    const message = createBaseSourceDeletedEvent();
    message.data = (object.data !== undefined && object.data !== null)
      ? SourceEventData.fromPartial(object.data)
      : undefined;
    return message;
  },
};

function createBaseUtilizationReportCreatedEvent(): UtilizationReportCreatedEvent {
  return { data: undefined };
}

export const UtilizationReportCreatedEvent: MessageFns<UtilizationReportCreatedEvent> = {
  encode(message: UtilizationReportCreatedEvent, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.data !== undefined) {
      UtilizationReportEventData.encode(message.data, writer.uint32(10).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): UtilizationReportCreatedEvent {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    const end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseUtilizationReportCreatedEvent();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.data = UtilizationReportEventData.decode(reader, reader.uint32());
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): UtilizationReportCreatedEvent {
    return { data: isSet(object.data) ? UtilizationReportEventData.fromJSON(object.data) : undefined };
  },

  toJSON(message: UtilizationReportCreatedEvent): unknown {
    const obj: any = {};
    if (message.data !== undefined) {
      obj.data = UtilizationReportEventData.toJSON(message.data);
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<UtilizationReportCreatedEvent>, I>>(base?: I): UtilizationReportCreatedEvent {
    return UtilizationReportCreatedEvent.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<UtilizationReportCreatedEvent>, I>>(
    object: I,
  ): UtilizationReportCreatedEvent {
    const message = createBaseUtilizationReportCreatedEvent();
    message.data = (object.data !== undefined && object.data !== null)
      ? UtilizationReportEventData.fromPartial(object.data)
      : undefined;
    return message;
  },
};

function createBaseUtilizationReportDeletedEvent(): UtilizationReportDeletedEvent {
  return { data: undefined };
}

export const UtilizationReportDeletedEvent: MessageFns<UtilizationReportDeletedEvent> = {
  encode(message: UtilizationReportDeletedEvent, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.data !== undefined) {
      UtilizationReportEventData.encode(message.data, writer.uint32(10).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): UtilizationReportDeletedEvent {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    const end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseUtilizationReportDeletedEvent();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.data = UtilizationReportEventData.decode(reader, reader.uint32());
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): UtilizationReportDeletedEvent {
    return { data: isSet(object.data) ? UtilizationReportEventData.fromJSON(object.data) : undefined };
  },

  toJSON(message: UtilizationReportDeletedEvent): unknown {
    const obj: any = {};
    if (message.data !== undefined) {
      obj.data = UtilizationReportEventData.toJSON(message.data);
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<UtilizationReportDeletedEvent>, I>>(base?: I): UtilizationReportDeletedEvent {
    return UtilizationReportDeletedEvent.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<UtilizationReportDeletedEvent>, I>>(
    object: I,
  ): UtilizationReportDeletedEvent {
    const message = createBaseUtilizationReportDeletedEvent();
    message.data = (object.data !== undefined && object.data !== null)
      ? UtilizationReportEventData.fromPartial(object.data)
      : undefined;
    return message;
  },
};

function createBaseDatacenterConnectorCreatedEvent(): DatacenterConnectorCreatedEvent {
  return { data: undefined };
}

export const DatacenterConnectorCreatedEvent: MessageFns<DatacenterConnectorCreatedEvent> = {
  encode(message: DatacenterConnectorCreatedEvent, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.data !== undefined) {
      DatacenterConnectorEventData.encode(message.data, writer.uint32(10).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): DatacenterConnectorCreatedEvent {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    const end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseDatacenterConnectorCreatedEvent();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.data = DatacenterConnectorEventData.decode(reader, reader.uint32());
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): DatacenterConnectorCreatedEvent {
    return { data: isSet(object.data) ? DatacenterConnectorEventData.fromJSON(object.data) : undefined };
  },

  toJSON(message: DatacenterConnectorCreatedEvent): unknown {
    const obj: any = {};
    if (message.data !== undefined) {
      obj.data = DatacenterConnectorEventData.toJSON(message.data);
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<DatacenterConnectorCreatedEvent>, I>>(base?: I): DatacenterConnectorCreatedEvent {
    return DatacenterConnectorCreatedEvent.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<DatacenterConnectorCreatedEvent>, I>>(
    object: I,
  ): DatacenterConnectorCreatedEvent {
    const message = createBaseDatacenterConnectorCreatedEvent();
    message.data = (object.data !== undefined && object.data !== null)
      ? DatacenterConnectorEventData.fromPartial(object.data)
      : undefined;
    return message;
  },
};

function createBaseDatacenterConnectorDeletedEvent(): DatacenterConnectorDeletedEvent {
  return { data: undefined };
}

export const DatacenterConnectorDeletedEvent: MessageFns<DatacenterConnectorDeletedEvent> = {
  encode(message: DatacenterConnectorDeletedEvent, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.data !== undefined) {
      DatacenterConnectorEventData.encode(message.data, writer.uint32(10).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): DatacenterConnectorDeletedEvent {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    const end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseDatacenterConnectorDeletedEvent();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.data = DatacenterConnectorEventData.decode(reader, reader.uint32());
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): DatacenterConnectorDeletedEvent {
    return { data: isSet(object.data) ? DatacenterConnectorEventData.fromJSON(object.data) : undefined };
  },

  toJSON(message: DatacenterConnectorDeletedEvent): unknown {
    const obj: any = {};
    if (message.data !== undefined) {
      obj.data = DatacenterConnectorEventData.toJSON(message.data);
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<DatacenterConnectorDeletedEvent>, I>>(base?: I): DatacenterConnectorDeletedEvent {
    return DatacenterConnectorDeletedEvent.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<DatacenterConnectorDeletedEvent>, I>>(
    object: I,
  ): DatacenterConnectorDeletedEvent {
    const message = createBaseDatacenterConnectorDeletedEvent();
    message.data = (object.data !== undefined && object.data !== null)
      ? DatacenterConnectorEventData.fromPartial(object.data)
      : undefined;
    return message;
  },
};

function createBaseMigratingVmCreatedEvent(): MigratingVmCreatedEvent {
  return { data: undefined };
}

export const MigratingVmCreatedEvent: MessageFns<MigratingVmCreatedEvent> = {
  encode(message: MigratingVmCreatedEvent, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.data !== undefined) {
      MigratingVmEventData.encode(message.data, writer.uint32(10).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): MigratingVmCreatedEvent {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    const end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseMigratingVmCreatedEvent();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.data = MigratingVmEventData.decode(reader, reader.uint32());
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): MigratingVmCreatedEvent {
    return { data: isSet(object.data) ? MigratingVmEventData.fromJSON(object.data) : undefined };
  },

  toJSON(message: MigratingVmCreatedEvent): unknown {
    const obj: any = {};
    if (message.data !== undefined) {
      obj.data = MigratingVmEventData.toJSON(message.data);
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<MigratingVmCreatedEvent>, I>>(base?: I): MigratingVmCreatedEvent {
    return MigratingVmCreatedEvent.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<MigratingVmCreatedEvent>, I>>(object: I): MigratingVmCreatedEvent {
    const message = createBaseMigratingVmCreatedEvent();
    message.data = (object.data !== undefined && object.data !== null)
      ? MigratingVmEventData.fromPartial(object.data)
      : undefined;
    return message;
  },
};

function createBaseMigratingVmUpdatedEvent(): MigratingVmUpdatedEvent {
  return { data: undefined };
}

export const MigratingVmUpdatedEvent: MessageFns<MigratingVmUpdatedEvent> = {
  encode(message: MigratingVmUpdatedEvent, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.data !== undefined) {
      MigratingVmEventData.encode(message.data, writer.uint32(10).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): MigratingVmUpdatedEvent {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    const end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseMigratingVmUpdatedEvent();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.data = MigratingVmEventData.decode(reader, reader.uint32());
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): MigratingVmUpdatedEvent {
    return { data: isSet(object.data) ? MigratingVmEventData.fromJSON(object.data) : undefined };
  },

  toJSON(message: MigratingVmUpdatedEvent): unknown {
    const obj: any = {};
    if (message.data !== undefined) {
      obj.data = MigratingVmEventData.toJSON(message.data);
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<MigratingVmUpdatedEvent>, I>>(base?: I): MigratingVmUpdatedEvent {
    return MigratingVmUpdatedEvent.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<MigratingVmUpdatedEvent>, I>>(object: I): MigratingVmUpdatedEvent {
    const message = createBaseMigratingVmUpdatedEvent();
    message.data = (object.data !== undefined && object.data !== null)
      ? MigratingVmEventData.fromPartial(object.data)
      : undefined;
    return message;
  },
};

function createBaseMigratingVmDeletedEvent(): MigratingVmDeletedEvent {
  return { data: undefined };
}

export const MigratingVmDeletedEvent: MessageFns<MigratingVmDeletedEvent> = {
  encode(message: MigratingVmDeletedEvent, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.data !== undefined) {
      MigratingVmEventData.encode(message.data, writer.uint32(10).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): MigratingVmDeletedEvent {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    const end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseMigratingVmDeletedEvent();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.data = MigratingVmEventData.decode(reader, reader.uint32());
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): MigratingVmDeletedEvent {
    return { data: isSet(object.data) ? MigratingVmEventData.fromJSON(object.data) : undefined };
  },

  toJSON(message: MigratingVmDeletedEvent): unknown {
    const obj: any = {};
    if (message.data !== undefined) {
      obj.data = MigratingVmEventData.toJSON(message.data);
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<MigratingVmDeletedEvent>, I>>(base?: I): MigratingVmDeletedEvent {
    return MigratingVmDeletedEvent.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<MigratingVmDeletedEvent>, I>>(object: I): MigratingVmDeletedEvent {
    const message = createBaseMigratingVmDeletedEvent();
    message.data = (object.data !== undefined && object.data !== null)
      ? MigratingVmEventData.fromPartial(object.data)
      : undefined;
    return message;
  },
};

function createBaseCloneJobCreatedEvent(): CloneJobCreatedEvent {
  return { data: undefined };
}

export const CloneJobCreatedEvent: MessageFns<CloneJobCreatedEvent> = {
  encode(message: CloneJobCreatedEvent, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.data !== undefined) {
      CloneJobEventData.encode(message.data, writer.uint32(10).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): CloneJobCreatedEvent {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    const end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseCloneJobCreatedEvent();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.data = CloneJobEventData.decode(reader, reader.uint32());
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): CloneJobCreatedEvent {
    return { data: isSet(object.data) ? CloneJobEventData.fromJSON(object.data) : undefined };
  },

  toJSON(message: CloneJobCreatedEvent): unknown {
    const obj: any = {};
    if (message.data !== undefined) {
      obj.data = CloneJobEventData.toJSON(message.data);
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<CloneJobCreatedEvent>, I>>(base?: I): CloneJobCreatedEvent {
    return CloneJobCreatedEvent.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<CloneJobCreatedEvent>, I>>(object: I): CloneJobCreatedEvent {
    const message = createBaseCloneJobCreatedEvent();
    message.data = (object.data !== undefined && object.data !== null)
      ? CloneJobEventData.fromPartial(object.data)
      : undefined;
    return message;
  },
};

function createBaseCutoverJobCreatedEvent(): CutoverJobCreatedEvent {
  return { data: undefined };
}

export const CutoverJobCreatedEvent: MessageFns<CutoverJobCreatedEvent> = {
  encode(message: CutoverJobCreatedEvent, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.data !== undefined) {
      CutoverJobEventData.encode(message.data, writer.uint32(10).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): CutoverJobCreatedEvent {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    const end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseCutoverJobCreatedEvent();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.data = CutoverJobEventData.decode(reader, reader.uint32());
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): CutoverJobCreatedEvent {
    return { data: isSet(object.data) ? CutoverJobEventData.fromJSON(object.data) : undefined };
  },

  toJSON(message: CutoverJobCreatedEvent): unknown {
    const obj: any = {};
    if (message.data !== undefined) {
      obj.data = CutoverJobEventData.toJSON(message.data);
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<CutoverJobCreatedEvent>, I>>(base?: I): CutoverJobCreatedEvent {
    return CutoverJobCreatedEvent.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<CutoverJobCreatedEvent>, I>>(object: I): CutoverJobCreatedEvent {
    const message = createBaseCutoverJobCreatedEvent();
    message.data = (object.data !== undefined && object.data !== null)
      ? CutoverJobEventData.fromPartial(object.data)
      : undefined;
    return message;
  },
};

function createBaseGroupCreatedEvent(): GroupCreatedEvent {
  return { data: undefined };
}

export const GroupCreatedEvent: MessageFns<GroupCreatedEvent> = {
  encode(message: GroupCreatedEvent, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.data !== undefined) {
      GroupEventData.encode(message.data, writer.uint32(10).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): GroupCreatedEvent {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    const end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseGroupCreatedEvent();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.data = GroupEventData.decode(reader, reader.uint32());
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): GroupCreatedEvent {
    return { data: isSet(object.data) ? GroupEventData.fromJSON(object.data) : undefined };
  },

  toJSON(message: GroupCreatedEvent): unknown {
    const obj: any = {};
    if (message.data !== undefined) {
      obj.data = GroupEventData.toJSON(message.data);
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<GroupCreatedEvent>, I>>(base?: I): GroupCreatedEvent {
    return GroupCreatedEvent.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<GroupCreatedEvent>, I>>(object: I): GroupCreatedEvent {
    const message = createBaseGroupCreatedEvent();
    message.data = (object.data !== undefined && object.data !== null)
      ? GroupEventData.fromPartial(object.data)
      : undefined;
    return message;
  },
};

function createBaseGroupUpdatedEvent(): GroupUpdatedEvent {
  return { data: undefined };
}

export const GroupUpdatedEvent: MessageFns<GroupUpdatedEvent> = {
  encode(message: GroupUpdatedEvent, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.data !== undefined) {
      GroupEventData.encode(message.data, writer.uint32(10).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): GroupUpdatedEvent {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    const end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseGroupUpdatedEvent();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.data = GroupEventData.decode(reader, reader.uint32());
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): GroupUpdatedEvent {
    return { data: isSet(object.data) ? GroupEventData.fromJSON(object.data) : undefined };
  },

  toJSON(message: GroupUpdatedEvent): unknown {
    const obj: any = {};
    if (message.data !== undefined) {
      obj.data = GroupEventData.toJSON(message.data);
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<GroupUpdatedEvent>, I>>(base?: I): GroupUpdatedEvent {
    return GroupUpdatedEvent.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<GroupUpdatedEvent>, I>>(object: I): GroupUpdatedEvent {
    const message = createBaseGroupUpdatedEvent();
    message.data = (object.data !== undefined && object.data !== null)
      ? GroupEventData.fromPartial(object.data)
      : undefined;
    return message;
  },
};

function createBaseGroupDeletedEvent(): GroupDeletedEvent {
  return { data: undefined };
}

export const GroupDeletedEvent: MessageFns<GroupDeletedEvent> = {
  encode(message: GroupDeletedEvent, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.data !== undefined) {
      GroupEventData.encode(message.data, writer.uint32(10).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): GroupDeletedEvent {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    const end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseGroupDeletedEvent();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.data = GroupEventData.decode(reader, reader.uint32());
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): GroupDeletedEvent {
    return { data: isSet(object.data) ? GroupEventData.fromJSON(object.data) : undefined };
  },

  toJSON(message: GroupDeletedEvent): unknown {
    const obj: any = {};
    if (message.data !== undefined) {
      obj.data = GroupEventData.toJSON(message.data);
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<GroupDeletedEvent>, I>>(base?: I): GroupDeletedEvent {
    return GroupDeletedEvent.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<GroupDeletedEvent>, I>>(object: I): GroupDeletedEvent {
    const message = createBaseGroupDeletedEvent();
    message.data = (object.data !== undefined && object.data !== null)
      ? GroupEventData.fromPartial(object.data)
      : undefined;
    return message;
  },
};

function createBaseTargetProjectCreatedEvent(): TargetProjectCreatedEvent {
  return { data: undefined };
}

export const TargetProjectCreatedEvent: MessageFns<TargetProjectCreatedEvent> = {
  encode(message: TargetProjectCreatedEvent, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.data !== undefined) {
      TargetProjectEventData.encode(message.data, writer.uint32(10).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): TargetProjectCreatedEvent {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    const end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseTargetProjectCreatedEvent();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.data = TargetProjectEventData.decode(reader, reader.uint32());
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): TargetProjectCreatedEvent {
    return { data: isSet(object.data) ? TargetProjectEventData.fromJSON(object.data) : undefined };
  },

  toJSON(message: TargetProjectCreatedEvent): unknown {
    const obj: any = {};
    if (message.data !== undefined) {
      obj.data = TargetProjectEventData.toJSON(message.data);
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<TargetProjectCreatedEvent>, I>>(base?: I): TargetProjectCreatedEvent {
    return TargetProjectCreatedEvent.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<TargetProjectCreatedEvent>, I>>(object: I): TargetProjectCreatedEvent {
    const message = createBaseTargetProjectCreatedEvent();
    message.data = (object.data !== undefined && object.data !== null)
      ? TargetProjectEventData.fromPartial(object.data)
      : undefined;
    return message;
  },
};

function createBaseTargetProjectUpdatedEvent(): TargetProjectUpdatedEvent {
  return { data: undefined };
}

export const TargetProjectUpdatedEvent: MessageFns<TargetProjectUpdatedEvent> = {
  encode(message: TargetProjectUpdatedEvent, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.data !== undefined) {
      TargetProjectEventData.encode(message.data, writer.uint32(10).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): TargetProjectUpdatedEvent {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    const end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseTargetProjectUpdatedEvent();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.data = TargetProjectEventData.decode(reader, reader.uint32());
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): TargetProjectUpdatedEvent {
    return { data: isSet(object.data) ? TargetProjectEventData.fromJSON(object.data) : undefined };
  },

  toJSON(message: TargetProjectUpdatedEvent): unknown {
    const obj: any = {};
    if (message.data !== undefined) {
      obj.data = TargetProjectEventData.toJSON(message.data);
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<TargetProjectUpdatedEvent>, I>>(base?: I): TargetProjectUpdatedEvent {
    return TargetProjectUpdatedEvent.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<TargetProjectUpdatedEvent>, I>>(object: I): TargetProjectUpdatedEvent {
    const message = createBaseTargetProjectUpdatedEvent();
    message.data = (object.data !== undefined && object.data !== null)
      ? TargetProjectEventData.fromPartial(object.data)
      : undefined;
    return message;
  },
};

function createBaseTargetProjectDeletedEvent(): TargetProjectDeletedEvent {
  return { data: undefined };
}

export const TargetProjectDeletedEvent: MessageFns<TargetProjectDeletedEvent> = {
  encode(message: TargetProjectDeletedEvent, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.data !== undefined) {
      TargetProjectEventData.encode(message.data, writer.uint32(10).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): TargetProjectDeletedEvent {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    const end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseTargetProjectDeletedEvent();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.data = TargetProjectEventData.decode(reader, reader.uint32());
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): TargetProjectDeletedEvent {
    return { data: isSet(object.data) ? TargetProjectEventData.fromJSON(object.data) : undefined };
  },

  toJSON(message: TargetProjectDeletedEvent): unknown {
    const obj: any = {};
    if (message.data !== undefined) {
      obj.data = TargetProjectEventData.toJSON(message.data);
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<TargetProjectDeletedEvent>, I>>(base?: I): TargetProjectDeletedEvent {
    return TargetProjectDeletedEvent.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<TargetProjectDeletedEvent>, I>>(object: I): TargetProjectDeletedEvent {
    const message = createBaseTargetProjectDeletedEvent();
    message.data = (object.data !== undefined && object.data !== null)
      ? TargetProjectEventData.fromPartial(object.data)
      : undefined;
    return message;
  },
};

type Builtin = Date | Function | Uint8Array | string | number | boolean | undefined;

export type DeepPartial<T> = T extends Builtin ? T
  : T extends Long ? string | number | Long : T extends globalThis.Array<infer U> ? globalThis.Array<DeepPartial<U>>
  : T extends ReadonlyArray<infer U> ? ReadonlyArray<DeepPartial<U>>
  : T extends {} ? { [K in keyof T]?: DeepPartial<T[K]> }
  : Partial<T>;

type KeysOfUnion<T> = T extends T ? keyof T : never;
export type Exact<P, I extends P> = P extends Builtin ? P
  : P & { [K in keyof P]: Exact<P[K], I[K]> } & { [K in Exclude<keyof I, KeysOfUnion<P>>]: never };

function isSet(value: any): boolean {
  return value !== null && value !== undefined;
}

export interface MessageFns<T> {
  encode(message: T, writer?: BinaryWriter): BinaryWriter;
  decode(input: BinaryReader | Uint8Array, length?: number): T;
  fromJSON(object: any): T;
  toJSON(message: T): unknown;
  create<I extends Exact<DeepPartial<T>, I>>(base?: I): T;
  fromPartial<I extends Exact<DeepPartial<T>, I>>(object: I): T;
}
