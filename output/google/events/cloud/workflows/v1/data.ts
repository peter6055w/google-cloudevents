// Code generated by protoc-gen-ts_proto. DO NOT EDIT.
// versions:
//   protoc-gen-ts_proto  v2.7.7
//   protoc               v6.32.0
// source: google/events/cloud/workflows/v1/data.proto

/* eslint-disable */
import { BinaryReader, BinaryWriter } from "@bufbuild/protobuf/wire";
import Long from "long";
import { Timestamp } from "../../../../protobuf/timestamp";

export const protobufPackage = "google.events.cloud.workflows.v1";

/** Workflow program to be executed by Workflows. */
export interface Workflow {
  /**
   * The resource name of the workflow.
   * Format: projects/{project}/locations/{location}/workflows/{workflow}
   */
  name: string;
  /**
   * Description of the workflow provided by the user.
   * Must be at most 1000 unicode characters long.
   */
  description: string;
  /** Output only. State of the workflow deployment. */
  state: Workflow_State;
  /**
   * Output only. The revision of the workflow.
   * A new revision of a workflow is created as a result of updating the
   * following properties of a workflow:
   *
   * - [Service account][google.cloud.workflows.v1.Workflow.service_account]
   * - [Workflow code to be
   * executed][google.cloud.workflows.v1.Workflow.source_contents]
   *
   * The format is "000001-a4d", where the first 6 characters define
   * the zero-padded revision ordinal number. They are followed by a hyphen and
   * 3 hexadecimal random characters.
   */
  revisionId: string;
  /** Output only. The timestamp of when the workflow was created. */
  createTime?:
    | Date
    | undefined;
  /** Output only. The last update timestamp of the workflow. */
  updateTime?:
    | Date
    | undefined;
  /**
   * Output only. The timestamp that the latest revision of the workflow
   * was created.
   */
  revisionCreateTime?:
    | Date
    | undefined;
  /**
   * Labels associated with this workflow.
   * Labels can contain at most 64 entries. Keys and values can be no longer
   * than 63 characters and can only contain lowercase letters, numeric
   * characters, underscores and dashes. Label keys must start with a letter.
   * International characters are allowed.
   */
  labels: { [key: string]: string };
  /**
   * The service account associated with the latest workflow version.
   * This service account represents the identity of the workflow and determines
   * what permissions the workflow has.
   * Format: projects/{project}/serviceAccounts/{account} or {account}
   *
   * Using `-` as a wildcard for the `{project}` or not providing one at all
   * will infer the project from the account. The `{account}` value can be the
   * `email` address or the `unique_id` of the service account.
   *
   * If not provided, workflow will use the project's default service account.
   * Modifying this field for an existing workflow results in a new workflow
   * revision.
   */
  serviceAccount: string;
  /** Workflow code to be executed. The size limit is 128KB. */
  sourceContents?: string | undefined;
}

/**
 * Describes the current state of workflow deployment. More states may be
 * added in the future.
 */
export enum Workflow_State {
  /** STATE_UNSPECIFIED - Invalid state. */
  STATE_UNSPECIFIED = 0,
  /** ACTIVE - The workflow has been deployed successfully and is serving. */
  ACTIVE = 1,
  UNRECOGNIZED = -1,
}

export function workflow_StateFromJSON(object: any): Workflow_State {
  switch (object) {
    case 0:
    case "STATE_UNSPECIFIED":
      return Workflow_State.STATE_UNSPECIFIED;
    case 1:
    case "ACTIVE":
      return Workflow_State.ACTIVE;
    case -1:
    case "UNRECOGNIZED":
    default:
      return Workflow_State.UNRECOGNIZED;
  }
}

export function workflow_StateToJSON(object: Workflow_State): string {
  switch (object) {
    case Workflow_State.STATE_UNSPECIFIED:
      return "STATE_UNSPECIFIED";
    case Workflow_State.ACTIVE:
      return "ACTIVE";
    case Workflow_State.UNRECOGNIZED:
    default:
      return "UNRECOGNIZED";
  }
}

export interface Workflow_LabelsEntry {
  key: string;
  value: string;
}

/** The data within all Workflow events. */
export interface WorkflowEventData {
  /** Optional. The Workflow event payload. Unset for deletion events. */
  payload?: Workflow | undefined;
}

function createBaseWorkflow(): Workflow {
  return {
    name: "",
    description: "",
    state: 0,
    revisionId: "",
    createTime: undefined,
    updateTime: undefined,
    revisionCreateTime: undefined,
    labels: {},
    serviceAccount: "",
    sourceContents: undefined,
  };
}

export const Workflow: MessageFns<Workflow> = {
  encode(message: Workflow, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.name !== "") {
      writer.uint32(10).string(message.name);
    }
    if (message.description !== "") {
      writer.uint32(18).string(message.description);
    }
    if (message.state !== 0) {
      writer.uint32(24).int32(message.state);
    }
    if (message.revisionId !== "") {
      writer.uint32(34).string(message.revisionId);
    }
    if (message.createTime !== undefined) {
      Timestamp.encode(toTimestamp(message.createTime), writer.uint32(42).fork()).join();
    }
    if (message.updateTime !== undefined) {
      Timestamp.encode(toTimestamp(message.updateTime), writer.uint32(50).fork()).join();
    }
    if (message.revisionCreateTime !== undefined) {
      Timestamp.encode(toTimestamp(message.revisionCreateTime), writer.uint32(58).fork()).join();
    }
    Object.entries(message.labels).forEach(([key, value]) => {
      Workflow_LabelsEntry.encode({ key: key as any, value }, writer.uint32(66).fork()).join();
    });
    if (message.serviceAccount !== "") {
      writer.uint32(74).string(message.serviceAccount);
    }
    if (message.sourceContents !== undefined) {
      writer.uint32(82).string(message.sourceContents);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): Workflow {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    const end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseWorkflow();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.name = reader.string();
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.description = reader.string();
          continue;
        }
        case 3: {
          if (tag !== 24) {
            break;
          }

          message.state = reader.int32() as any;
          continue;
        }
        case 4: {
          if (tag !== 34) {
            break;
          }

          message.revisionId = reader.string();
          continue;
        }
        case 5: {
          if (tag !== 42) {
            break;
          }

          message.createTime = fromTimestamp(Timestamp.decode(reader, reader.uint32()));
          continue;
        }
        case 6: {
          if (tag !== 50) {
            break;
          }

          message.updateTime = fromTimestamp(Timestamp.decode(reader, reader.uint32()));
          continue;
        }
        case 7: {
          if (tag !== 58) {
            break;
          }

          message.revisionCreateTime = fromTimestamp(Timestamp.decode(reader, reader.uint32()));
          continue;
        }
        case 8: {
          if (tag !== 66) {
            break;
          }

          const entry8 = Workflow_LabelsEntry.decode(reader, reader.uint32());
          if (entry8.value !== undefined) {
            message.labels[entry8.key] = entry8.value;
          }
          continue;
        }
        case 9: {
          if (tag !== 74) {
            break;
          }

          message.serviceAccount = reader.string();
          continue;
        }
        case 10: {
          if (tag !== 82) {
            break;
          }

          message.sourceContents = reader.string();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): Workflow {
    return {
      name: isSet(object.name) ? globalThis.String(object.name) : "",
      description: isSet(object.description) ? globalThis.String(object.description) : "",
      state: isSet(object.state) ? workflow_StateFromJSON(object.state) : 0,
      revisionId: isSet(object.revisionId) ? globalThis.String(object.revisionId) : "",
      createTime: isSet(object.createTime) ? fromJsonTimestamp(object.createTime) : undefined,
      updateTime: isSet(object.updateTime) ? fromJsonTimestamp(object.updateTime) : undefined,
      revisionCreateTime: isSet(object.revisionCreateTime) ? fromJsonTimestamp(object.revisionCreateTime) : undefined,
      labels: isObject(object.labels)
        ? Object.entries(object.labels).reduce<{ [key: string]: string }>((acc, [key, value]) => {
          acc[key] = String(value);
          return acc;
        }, {})
        : {},
      serviceAccount: isSet(object.serviceAccount) ? globalThis.String(object.serviceAccount) : "",
      sourceContents: isSet(object.sourceContents) ? globalThis.String(object.sourceContents) : undefined,
    };
  },

  toJSON(message: Workflow): unknown {
    const obj: any = {};
    if (message.name !== "") {
      obj.name = message.name;
    }
    if (message.description !== "") {
      obj.description = message.description;
    }
    if (message.state !== 0) {
      obj.state = workflow_StateToJSON(message.state);
    }
    if (message.revisionId !== "") {
      obj.revisionId = message.revisionId;
    }
    if (message.createTime !== undefined) {
      obj.createTime = message.createTime.toISOString();
    }
    if (message.updateTime !== undefined) {
      obj.updateTime = message.updateTime.toISOString();
    }
    if (message.revisionCreateTime !== undefined) {
      obj.revisionCreateTime = message.revisionCreateTime.toISOString();
    }
    if (message.labels) {
      const entries = Object.entries(message.labels);
      if (entries.length > 0) {
        obj.labels = {};
        entries.forEach(([k, v]) => {
          obj.labels[k] = v;
        });
      }
    }
    if (message.serviceAccount !== "") {
      obj.serviceAccount = message.serviceAccount;
    }
    if (message.sourceContents !== undefined) {
      obj.sourceContents = message.sourceContents;
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<Workflow>, I>>(base?: I): Workflow {
    return Workflow.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<Workflow>, I>>(object: I): Workflow {
    const message = createBaseWorkflow();
    message.name = object.name ?? "";
    message.description = object.description ?? "";
    message.state = object.state ?? 0;
    message.revisionId = object.revisionId ?? "";
    message.createTime = object.createTime ?? undefined;
    message.updateTime = object.updateTime ?? undefined;
    message.revisionCreateTime = object.revisionCreateTime ?? undefined;
    message.labels = Object.entries(object.labels ?? {}).reduce<{ [key: string]: string }>((acc, [key, value]) => {
      if (value !== undefined) {
        acc[key] = globalThis.String(value);
      }
      return acc;
    }, {});
    message.serviceAccount = object.serviceAccount ?? "";
    message.sourceContents = object.sourceContents ?? undefined;
    return message;
  },
};

function createBaseWorkflow_LabelsEntry(): Workflow_LabelsEntry {
  return { key: "", value: "" };
}

export const Workflow_LabelsEntry: MessageFns<Workflow_LabelsEntry> = {
  encode(message: Workflow_LabelsEntry, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.key !== "") {
      writer.uint32(10).string(message.key);
    }
    if (message.value !== "") {
      writer.uint32(18).string(message.value);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): Workflow_LabelsEntry {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    const end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseWorkflow_LabelsEntry();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.key = reader.string();
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.value = reader.string();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): Workflow_LabelsEntry {
    return {
      key: isSet(object.key) ? globalThis.String(object.key) : "",
      value: isSet(object.value) ? globalThis.String(object.value) : "",
    };
  },

  toJSON(message: Workflow_LabelsEntry): unknown {
    const obj: any = {};
    if (message.key !== "") {
      obj.key = message.key;
    }
    if (message.value !== "") {
      obj.value = message.value;
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<Workflow_LabelsEntry>, I>>(base?: I): Workflow_LabelsEntry {
    return Workflow_LabelsEntry.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<Workflow_LabelsEntry>, I>>(object: I): Workflow_LabelsEntry {
    const message = createBaseWorkflow_LabelsEntry();
    message.key = object.key ?? "";
    message.value = object.value ?? "";
    return message;
  },
};

function createBaseWorkflowEventData(): WorkflowEventData {
  return { payload: undefined };
}

export const WorkflowEventData: MessageFns<WorkflowEventData> = {
  encode(message: WorkflowEventData, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.payload !== undefined) {
      Workflow.encode(message.payload, writer.uint32(10).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): WorkflowEventData {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    const end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseWorkflowEventData();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.payload = Workflow.decode(reader, reader.uint32());
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): WorkflowEventData {
    return { payload: isSet(object.payload) ? Workflow.fromJSON(object.payload) : undefined };
  },

  toJSON(message: WorkflowEventData): unknown {
    const obj: any = {};
    if (message.payload !== undefined) {
      obj.payload = Workflow.toJSON(message.payload);
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<WorkflowEventData>, I>>(base?: I): WorkflowEventData {
    return WorkflowEventData.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<WorkflowEventData>, I>>(object: I): WorkflowEventData {
    const message = createBaseWorkflowEventData();
    message.payload = (object.payload !== undefined && object.payload !== null)
      ? Workflow.fromPartial(object.payload)
      : undefined;
    return message;
  },
};

type Builtin = Date | Function | Uint8Array | string | number | boolean | undefined;

export type DeepPartial<T> = T extends Builtin ? T
  : T extends Long ? string | number | Long : T extends globalThis.Array<infer U> ? globalThis.Array<DeepPartial<U>>
  : T extends ReadonlyArray<infer U> ? ReadonlyArray<DeepPartial<U>>
  : T extends {} ? { [K in keyof T]?: DeepPartial<T[K]> }
  : Partial<T>;

type KeysOfUnion<T> = T extends T ? keyof T : never;
export type Exact<P, I extends P> = P extends Builtin ? P
  : P & { [K in keyof P]: Exact<P[K], I[K]> } & { [K in Exclude<keyof I, KeysOfUnion<P>>]: never };

function toTimestamp(date: Date): Timestamp {
  const seconds = numberToLong(Math.trunc(date.getTime() / 1_000));
  const nanos = (date.getTime() % 1_000) * 1_000_000;
  return { seconds, nanos };
}

function fromTimestamp(t: Timestamp): Date {
  let millis = (t.seconds.toNumber() || 0) * 1_000;
  millis += (t.nanos || 0) / 1_000_000;
  return new globalThis.Date(millis);
}

function fromJsonTimestamp(o: any): Date {
  if (o instanceof globalThis.Date) {
    return o;
  } else if (typeof o === "string") {
    return new globalThis.Date(o);
  } else {
    return fromTimestamp(Timestamp.fromJSON(o));
  }
}

function numberToLong(number: number) {
  return Long.fromNumber(number);
}

function isObject(value: any): boolean {
  return typeof value === "object" && value !== null;
}

function isSet(value: any): boolean {
  return value !== null && value !== undefined;
}

export interface MessageFns<T> {
  encode(message: T, writer?: BinaryWriter): BinaryWriter;
  decode(input: BinaryReader | Uint8Array, length?: number): T;
  fromJSON(object: any): T;
  toJSON(message: T): unknown;
  create<I extends Exact<DeepPartial<T>, I>>(base?: I): T;
  fromPartial<I extends Exact<DeepPartial<T>, I>>(object: I): T;
}
