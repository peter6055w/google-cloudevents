// Code generated by protoc-gen-ts_proto. DO NOT EDIT.
// versions:
//   protoc-gen-ts_proto  v2.7.7
//   protoc               v6.32.0
// source: google/events/cloudevent.proto

/* eslint-disable */
import { BinaryReader, BinaryWriter } from "@bufbuild/protobuf/wire";
import Long from "long";

export const protobufPackage = "google.events";

/** Description of an extension attribute. */
export interface ExtensionAttribute {
  /**
   * Name of the CloudEvents attribute, e.g. "topic".
   * This must be all lower-case, to satisfy CloudEvent requirements.
   */
  name: string;
  /** Description of the attribute. */
  description: string;
  /**
   * The name of the CloudEvents attribute in lower Camel case, e.g. "firebaseDatabaseHost".
   * This only needs to be populated if the name would otherwise be mis-represented.
   */
  camelCaseName: string;
}

function createBaseExtensionAttribute(): ExtensionAttribute {
  return { name: "", description: "", camelCaseName: "" };
}

export const ExtensionAttribute: MessageFns<ExtensionAttribute> = {
  encode(message: ExtensionAttribute, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.name !== "") {
      writer.uint32(10).string(message.name);
    }
    if (message.description !== "") {
      writer.uint32(18).string(message.description);
    }
    if (message.camelCaseName !== "") {
      writer.uint32(26).string(message.camelCaseName);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): ExtensionAttribute {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    const end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseExtensionAttribute();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.name = reader.string();
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.description = reader.string();
          continue;
        }
        case 3: {
          if (tag !== 26) {
            break;
          }

          message.camelCaseName = reader.string();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): ExtensionAttribute {
    return {
      name: isSet(object.name) ? globalThis.String(object.name) : "",
      description: isSet(object.description) ? globalThis.String(object.description) : "",
      camelCaseName: isSet(object.camelCaseName) ? globalThis.String(object.camelCaseName) : "",
    };
  },

  toJSON(message: ExtensionAttribute): unknown {
    const obj: any = {};
    if (message.name !== "") {
      obj.name = message.name;
    }
    if (message.description !== "") {
      obj.description = message.description;
    }
    if (message.camelCaseName !== "") {
      obj.camelCaseName = message.camelCaseName;
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<ExtensionAttribute>, I>>(base?: I): ExtensionAttribute {
    return ExtensionAttribute.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<ExtensionAttribute>, I>>(object: I): ExtensionAttribute {
    const message = createBaseExtensionAttribute();
    message.name = object.name ?? "";
    message.description = object.description ?? "";
    message.camelCaseName = object.camelCaseName ?? "";
    return message;
  },
};

type Builtin = Date | Function | Uint8Array | string | number | boolean | undefined;

export type DeepPartial<T> = T extends Builtin ? T
  : T extends Long ? string | number | Long : T extends globalThis.Array<infer U> ? globalThis.Array<DeepPartial<U>>
  : T extends ReadonlyArray<infer U> ? ReadonlyArray<DeepPartial<U>>
  : T extends {} ? { [K in keyof T]?: DeepPartial<T[K]> }
  : Partial<T>;

type KeysOfUnion<T> = T extends T ? keyof T : never;
export type Exact<P, I extends P> = P extends Builtin ? P
  : P & { [K in keyof P]: Exact<P[K], I[K]> } & { [K in Exclude<keyof I, KeysOfUnion<P>>]: never };

function isSet(value: any): boolean {
  return value !== null && value !== undefined;
}

export interface MessageFns<T> {
  encode(message: T, writer?: BinaryWriter): BinaryWriter;
  decode(input: BinaryReader | Uint8Array, length?: number): T;
  fromJSON(object: any): T;
  toJSON(message: T): unknown;
  create<I extends Exact<DeepPartial<T>, I>>(base?: I): T;
  fromPartial<I extends Exact<DeepPartial<T>, I>>(object: I): T;
}
