// Code generated by protoc-gen-ts_proto. DO NOT EDIT.
// versions:
//   protoc-gen-ts_proto  v2.7.7
//   protoc               v6.32.0
// source: google/events/firebase/auth/v1/data.proto

/* eslint-disable */
import { BinaryReader, BinaryWriter } from "@bufbuild/protobuf/wire";
import Long from "long";
import { Struct } from "../../../../protobuf/struct";
import { Timestamp } from "../../../../protobuf/timestamp";

export const protobufPackage = "google.events.firebase.auth.v1";

/** The data within all Firebase Auth events. */
export interface AuthEventData {
  /** The user identifier in the Firebase app. */
  uid: string;
  /** The user's primary email, if set. */
  email: string;
  /** Whether or not the user's primary email is verified. */
  emailVerified: boolean;
  /** The user's display name. */
  displayName: string;
  /** The user's photo URL. */
  photoURL: string;
  /** Whether the user is disabled. */
  disabled: boolean;
  /** Additional metadata about the user. */
  metadata?:
    | UserMetadata
    | undefined;
  /** User's info at the providers */
  providerData: UserInfo[];
  /** The user's phone number. */
  phoneNumber: string;
  /**
   * User's custom claims, typically used to define user roles and propagated
   * to an authenticated user's ID token.
   */
  customClaims?: { [key: string]: any } | undefined;
}

/** Additional metadata about the user. */
export interface UserMetadata {
  /** The date the user was created. */
  createTime?:
    | Date
    | undefined;
  /** The date the user last signed in. */
  lastSignInTime?: Date | undefined;
}

/** User's info at the identity provider */
export interface UserInfo {
  /** The user identifier for the linked provider. */
  uid: string;
  /** The email for the linked provider. */
  email: string;
  /** The display name for the linked provider. */
  displayName: string;
  /** The photo URL for the linked provider. */
  photoURL: string;
  /** The linked provider ID (e.g. "google.com" for the Google provider). */
  providerId: string;
}

function createBaseAuthEventData(): AuthEventData {
  return {
    uid: "",
    email: "",
    emailVerified: false,
    displayName: "",
    photoURL: "",
    disabled: false,
    metadata: undefined,
    providerData: [],
    phoneNumber: "",
    customClaims: undefined,
  };
}

export const AuthEventData: MessageFns<AuthEventData> = {
  encode(message: AuthEventData, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.uid !== "") {
      writer.uint32(10).string(message.uid);
    }
    if (message.email !== "") {
      writer.uint32(18).string(message.email);
    }
    if (message.emailVerified !== false) {
      writer.uint32(24).bool(message.emailVerified);
    }
    if (message.displayName !== "") {
      writer.uint32(34).string(message.displayName);
    }
    if (message.photoURL !== "") {
      writer.uint32(42).string(message.photoURL);
    }
    if (message.disabled !== false) {
      writer.uint32(48).bool(message.disabled);
    }
    if (message.metadata !== undefined) {
      UserMetadata.encode(message.metadata, writer.uint32(58).fork()).join();
    }
    for (const v of message.providerData) {
      UserInfo.encode(v!, writer.uint32(66).fork()).join();
    }
    if (message.phoneNumber !== "") {
      writer.uint32(74).string(message.phoneNumber);
    }
    if (message.customClaims !== undefined) {
      Struct.encode(Struct.wrap(message.customClaims), writer.uint32(82).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): AuthEventData {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    const end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseAuthEventData();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.uid = reader.string();
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.email = reader.string();
          continue;
        }
        case 3: {
          if (tag !== 24) {
            break;
          }

          message.emailVerified = reader.bool();
          continue;
        }
        case 4: {
          if (tag !== 34) {
            break;
          }

          message.displayName = reader.string();
          continue;
        }
        case 5: {
          if (tag !== 42) {
            break;
          }

          message.photoURL = reader.string();
          continue;
        }
        case 6: {
          if (tag !== 48) {
            break;
          }

          message.disabled = reader.bool();
          continue;
        }
        case 7: {
          if (tag !== 58) {
            break;
          }

          message.metadata = UserMetadata.decode(reader, reader.uint32());
          continue;
        }
        case 8: {
          if (tag !== 66) {
            break;
          }

          message.providerData.push(UserInfo.decode(reader, reader.uint32()));
          continue;
        }
        case 9: {
          if (tag !== 74) {
            break;
          }

          message.phoneNumber = reader.string();
          continue;
        }
        case 10: {
          if (tag !== 82) {
            break;
          }

          message.customClaims = Struct.unwrap(Struct.decode(reader, reader.uint32()));
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): AuthEventData {
    return {
      uid: isSet(object.uid) ? globalThis.String(object.uid) : "",
      email: isSet(object.email) ? globalThis.String(object.email) : "",
      emailVerified: isSet(object.emailVerified) ? globalThis.Boolean(object.emailVerified) : false,
      displayName: isSet(object.displayName) ? globalThis.String(object.displayName) : "",
      photoURL: isSet(object.photoURL) ? globalThis.String(object.photoURL) : "",
      disabled: isSet(object.disabled) ? globalThis.Boolean(object.disabled) : false,
      metadata: isSet(object.metadata) ? UserMetadata.fromJSON(object.metadata) : undefined,
      providerData: globalThis.Array.isArray(object?.providerData)
        ? object.providerData.map((e: any) => UserInfo.fromJSON(e))
        : [],
      phoneNumber: isSet(object.phoneNumber) ? globalThis.String(object.phoneNumber) : "",
      customClaims: isObject(object.customClaims) ? object.customClaims : undefined,
    };
  },

  toJSON(message: AuthEventData): unknown {
    const obj: any = {};
    if (message.uid !== "") {
      obj.uid = message.uid;
    }
    if (message.email !== "") {
      obj.email = message.email;
    }
    if (message.emailVerified !== false) {
      obj.emailVerified = message.emailVerified;
    }
    if (message.displayName !== "") {
      obj.displayName = message.displayName;
    }
    if (message.photoURL !== "") {
      obj.photoURL = message.photoURL;
    }
    if (message.disabled !== false) {
      obj.disabled = message.disabled;
    }
    if (message.metadata !== undefined) {
      obj.metadata = UserMetadata.toJSON(message.metadata);
    }
    if (message.providerData?.length) {
      obj.providerData = message.providerData.map((e) => UserInfo.toJSON(e));
    }
    if (message.phoneNumber !== "") {
      obj.phoneNumber = message.phoneNumber;
    }
    if (message.customClaims !== undefined) {
      obj.customClaims = message.customClaims;
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<AuthEventData>, I>>(base?: I): AuthEventData {
    return AuthEventData.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<AuthEventData>, I>>(object: I): AuthEventData {
    const message = createBaseAuthEventData();
    message.uid = object.uid ?? "";
    message.email = object.email ?? "";
    message.emailVerified = object.emailVerified ?? false;
    message.displayName = object.displayName ?? "";
    message.photoURL = object.photoURL ?? "";
    message.disabled = object.disabled ?? false;
    message.metadata = (object.metadata !== undefined && object.metadata !== null)
      ? UserMetadata.fromPartial(object.metadata)
      : undefined;
    message.providerData = object.providerData?.map((e) => UserInfo.fromPartial(e)) || [];
    message.phoneNumber = object.phoneNumber ?? "";
    message.customClaims = object.customClaims ?? undefined;
    return message;
  },
};

function createBaseUserMetadata(): UserMetadata {
  return { createTime: undefined, lastSignInTime: undefined };
}

export const UserMetadata: MessageFns<UserMetadata> = {
  encode(message: UserMetadata, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.createTime !== undefined) {
      Timestamp.encode(toTimestamp(message.createTime), writer.uint32(10).fork()).join();
    }
    if (message.lastSignInTime !== undefined) {
      Timestamp.encode(toTimestamp(message.lastSignInTime), writer.uint32(18).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): UserMetadata {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    const end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseUserMetadata();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.createTime = fromTimestamp(Timestamp.decode(reader, reader.uint32()));
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.lastSignInTime = fromTimestamp(Timestamp.decode(reader, reader.uint32()));
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): UserMetadata {
    return {
      createTime: isSet(object.createTime) ? fromJsonTimestamp(object.createTime) : undefined,
      lastSignInTime: isSet(object.lastSignInTime) ? fromJsonTimestamp(object.lastSignInTime) : undefined,
    };
  },

  toJSON(message: UserMetadata): unknown {
    const obj: any = {};
    if (message.createTime !== undefined) {
      obj.createTime = message.createTime.toISOString();
    }
    if (message.lastSignInTime !== undefined) {
      obj.lastSignInTime = message.lastSignInTime.toISOString();
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<UserMetadata>, I>>(base?: I): UserMetadata {
    return UserMetadata.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<UserMetadata>, I>>(object: I): UserMetadata {
    const message = createBaseUserMetadata();
    message.createTime = object.createTime ?? undefined;
    message.lastSignInTime = object.lastSignInTime ?? undefined;
    return message;
  },
};

function createBaseUserInfo(): UserInfo {
  return { uid: "", email: "", displayName: "", photoURL: "", providerId: "" };
}

export const UserInfo: MessageFns<UserInfo> = {
  encode(message: UserInfo, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.uid !== "") {
      writer.uint32(10).string(message.uid);
    }
    if (message.email !== "") {
      writer.uint32(18).string(message.email);
    }
    if (message.displayName !== "") {
      writer.uint32(26).string(message.displayName);
    }
    if (message.photoURL !== "") {
      writer.uint32(34).string(message.photoURL);
    }
    if (message.providerId !== "") {
      writer.uint32(42).string(message.providerId);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): UserInfo {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    const end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseUserInfo();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.uid = reader.string();
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.email = reader.string();
          continue;
        }
        case 3: {
          if (tag !== 26) {
            break;
          }

          message.displayName = reader.string();
          continue;
        }
        case 4: {
          if (tag !== 34) {
            break;
          }

          message.photoURL = reader.string();
          continue;
        }
        case 5: {
          if (tag !== 42) {
            break;
          }

          message.providerId = reader.string();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): UserInfo {
    return {
      uid: isSet(object.uid) ? globalThis.String(object.uid) : "",
      email: isSet(object.email) ? globalThis.String(object.email) : "",
      displayName: isSet(object.displayName) ? globalThis.String(object.displayName) : "",
      photoURL: isSet(object.photoURL) ? globalThis.String(object.photoURL) : "",
      providerId: isSet(object.providerId) ? globalThis.String(object.providerId) : "",
    };
  },

  toJSON(message: UserInfo): unknown {
    const obj: any = {};
    if (message.uid !== "") {
      obj.uid = message.uid;
    }
    if (message.email !== "") {
      obj.email = message.email;
    }
    if (message.displayName !== "") {
      obj.displayName = message.displayName;
    }
    if (message.photoURL !== "") {
      obj.photoURL = message.photoURL;
    }
    if (message.providerId !== "") {
      obj.providerId = message.providerId;
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<UserInfo>, I>>(base?: I): UserInfo {
    return UserInfo.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<UserInfo>, I>>(object: I): UserInfo {
    const message = createBaseUserInfo();
    message.uid = object.uid ?? "";
    message.email = object.email ?? "";
    message.displayName = object.displayName ?? "";
    message.photoURL = object.photoURL ?? "";
    message.providerId = object.providerId ?? "";
    return message;
  },
};

type Builtin = Date | Function | Uint8Array | string | number | boolean | undefined;

export type DeepPartial<T> = T extends Builtin ? T
  : T extends Long ? string | number | Long : T extends globalThis.Array<infer U> ? globalThis.Array<DeepPartial<U>>
  : T extends ReadonlyArray<infer U> ? ReadonlyArray<DeepPartial<U>>
  : T extends {} ? { [K in keyof T]?: DeepPartial<T[K]> }
  : Partial<T>;

type KeysOfUnion<T> = T extends T ? keyof T : never;
export type Exact<P, I extends P> = P extends Builtin ? P
  : P & { [K in keyof P]: Exact<P[K], I[K]> } & { [K in Exclude<keyof I, KeysOfUnion<P>>]: never };

function toTimestamp(date: Date): Timestamp {
  const seconds = numberToLong(Math.trunc(date.getTime() / 1_000));
  const nanos = (date.getTime() % 1_000) * 1_000_000;
  return { seconds, nanos };
}

function fromTimestamp(t: Timestamp): Date {
  let millis = (t.seconds.toNumber() || 0) * 1_000;
  millis += (t.nanos || 0) / 1_000_000;
  return new globalThis.Date(millis);
}

function fromJsonTimestamp(o: any): Date {
  if (o instanceof globalThis.Date) {
    return o;
  } else if (typeof o === "string") {
    return new globalThis.Date(o);
  } else {
    return fromTimestamp(Timestamp.fromJSON(o));
  }
}

function numberToLong(number: number) {
  return Long.fromNumber(number);
}

function isObject(value: any): boolean {
  return typeof value === "object" && value !== null;
}

function isSet(value: any): boolean {
  return value !== null && value !== undefined;
}

export interface MessageFns<T> {
  encode(message: T, writer?: BinaryWriter): BinaryWriter;
  decode(input: BinaryReader | Uint8Array, length?: number): T;
  fromJSON(object: any): T;
  toJSON(message: T): unknown;
  create<I extends Exact<DeepPartial<T>, I>>(base?: I): T;
  fromPartial<I extends Exact<DeepPartial<T>, I>>(object: I): T;
}
