// Code generated by protoc-gen-ts_proto. DO NOT EDIT.
// versions:
//   protoc-gen-ts_proto  v2.7.7
//   protoc               v6.32.0
// source: google/events/firebase/database/v1/data.proto

/* eslint-disable */
import { BinaryReader, BinaryWriter } from "@bufbuild/protobuf/wire";
import Long from "long";
import { Value } from "../../../../protobuf/struct";

export const protobufPackage = "google.events.firebase.database.v1";

/** The data within all Firebase Real Time Database reference events. */
export interface ReferenceEventData {
  /** The original data for the reference. */
  data?:
    | any
    | undefined;
  /** The change in the reference data. */
  delta?: any | undefined;
}

function createBaseReferenceEventData(): ReferenceEventData {
  return { data: undefined, delta: undefined };
}

export const ReferenceEventData: MessageFns<ReferenceEventData> = {
  encode(message: ReferenceEventData, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.data !== undefined) {
      Value.encode(Value.wrap(message.data), writer.uint32(10).fork()).join();
    }
    if (message.delta !== undefined) {
      Value.encode(Value.wrap(message.delta), writer.uint32(18).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): ReferenceEventData {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    const end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseReferenceEventData();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.data = Value.unwrap(Value.decode(reader, reader.uint32()));
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.delta = Value.unwrap(Value.decode(reader, reader.uint32()));
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): ReferenceEventData {
    return {
      data: isSet(object?.data) ? object.data : undefined,
      delta: isSet(object?.delta) ? object.delta : undefined,
    };
  },

  toJSON(message: ReferenceEventData): unknown {
    const obj: any = {};
    if (message.data !== undefined) {
      obj.data = message.data;
    }
    if (message.delta !== undefined) {
      obj.delta = message.delta;
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<ReferenceEventData>, I>>(base?: I): ReferenceEventData {
    return ReferenceEventData.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<ReferenceEventData>, I>>(object: I): ReferenceEventData {
    const message = createBaseReferenceEventData();
    message.data = object.data ?? undefined;
    message.delta = object.delta ?? undefined;
    return message;
  },
};

type Builtin = Date | Function | Uint8Array | string | number | boolean | undefined;

export type DeepPartial<T> = T extends Builtin ? T
  : T extends Long ? string | number | Long : T extends globalThis.Array<infer U> ? globalThis.Array<DeepPartial<U>>
  : T extends ReadonlyArray<infer U> ? ReadonlyArray<DeepPartial<U>>
  : T extends {} ? { [K in keyof T]?: DeepPartial<T[K]> }
  : Partial<T>;

type KeysOfUnion<T> = T extends T ? keyof T : never;
export type Exact<P, I extends P> = P extends Builtin ? P
  : P & { [K in keyof P]: Exact<P[K], I[K]> } & { [K in Exclude<keyof I, KeysOfUnion<P>>]: never };

function isSet(value: any): boolean {
  return value !== null && value !== undefined;
}

export interface MessageFns<T> {
  encode(message: T, writer?: BinaryWriter): BinaryWriter;
  decode(input: BinaryReader | Uint8Array, length?: number): T;
  fromJSON(object: any): T;
  toJSON(message: T): unknown;
  create<I extends Exact<DeepPartial<T>, I>>(base?: I): T;
  fromPartial<I extends Exact<DeepPartial<T>, I>>(object: I): T;
}
