// Code generated by protoc-gen-ts_proto. DO NOT EDIT.
// versions:
//   protoc-gen-ts_proto  v2.7.7
//   protoc               v6.32.0
// source: google/events/firebase/dataconnect/v1/events.proto

/* eslint-disable */
import { BinaryReader, BinaryWriter } from "@bufbuild/protobuf/wire";
import Long from "long";
import { ConnectorEventData, MutationEventData, SchemaEventData, ServiceEventData } from "./data";

export const protobufPackage = "google.events.firebase.dataconnect.v1";

/** The CloudEvent raised when a Service is created. */
export interface ServiceCreatedEvent {
  /** The data associated with the event. */
  data?: ServiceEventData | undefined;
}

/** The CloudEvent raised when a Service is updated. */
export interface ServiceUpdatedEvent {
  /** The data associated with the event. */
  data?: ServiceEventData | undefined;
}

/** The CloudEvent raised when a Service is deleted. */
export interface ServiceDeletedEvent {
  /** The data associated with the event. */
  data?: ServiceEventData | undefined;
}

/** The CloudEvent raised when a Schema is created. */
export interface SchemaCreatedEvent {
  /** The data associated with the event. */
  data?: SchemaEventData | undefined;
}

/** The CloudEvent raised when a Schema is updated. */
export interface SchemaUpdatedEvent {
  /** The data associated with the event. */
  data?: SchemaEventData | undefined;
}

/** The CloudEvent raised when a Schema is deleted. */
export interface SchemaDeletedEvent {
  /** The data associated with the event. */
  data?: SchemaEventData | undefined;
}

/** The CloudEvent raised when a Connector is created. */
export interface ConnectorCreatedEvent {
  /** The data associated with the event. */
  data?: ConnectorEventData | undefined;
}

/** The CloudEvent raised when a Connector is updated. */
export interface ConnectorUpdatedEvent {
  /** The data associated with the event. */
  data?: ConnectorEventData | undefined;
}

/** The CloudEvent raised when a Connector is deleted. */
export interface ConnectorDeletedEvent {
  /** The data associated with the event. */
  data?: ConnectorEventData | undefined;
}

/** The CloudEvent raised when a Mutation is executed. */
export interface MutationExecutedEvent {
  /** The data associated with the event. */
  data?: MutationEventData | undefined;
}

function createBaseServiceCreatedEvent(): ServiceCreatedEvent {
  return { data: undefined };
}

export const ServiceCreatedEvent: MessageFns<ServiceCreatedEvent> = {
  encode(message: ServiceCreatedEvent, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.data !== undefined) {
      ServiceEventData.encode(message.data, writer.uint32(10).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): ServiceCreatedEvent {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    const end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseServiceCreatedEvent();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.data = ServiceEventData.decode(reader, reader.uint32());
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): ServiceCreatedEvent {
    return { data: isSet(object.data) ? ServiceEventData.fromJSON(object.data) : undefined };
  },

  toJSON(message: ServiceCreatedEvent): unknown {
    const obj: any = {};
    if (message.data !== undefined) {
      obj.data = ServiceEventData.toJSON(message.data);
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<ServiceCreatedEvent>, I>>(base?: I): ServiceCreatedEvent {
    return ServiceCreatedEvent.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<ServiceCreatedEvent>, I>>(object: I): ServiceCreatedEvent {
    const message = createBaseServiceCreatedEvent();
    message.data = (object.data !== undefined && object.data !== null)
      ? ServiceEventData.fromPartial(object.data)
      : undefined;
    return message;
  },
};

function createBaseServiceUpdatedEvent(): ServiceUpdatedEvent {
  return { data: undefined };
}

export const ServiceUpdatedEvent: MessageFns<ServiceUpdatedEvent> = {
  encode(message: ServiceUpdatedEvent, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.data !== undefined) {
      ServiceEventData.encode(message.data, writer.uint32(10).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): ServiceUpdatedEvent {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    const end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseServiceUpdatedEvent();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.data = ServiceEventData.decode(reader, reader.uint32());
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): ServiceUpdatedEvent {
    return { data: isSet(object.data) ? ServiceEventData.fromJSON(object.data) : undefined };
  },

  toJSON(message: ServiceUpdatedEvent): unknown {
    const obj: any = {};
    if (message.data !== undefined) {
      obj.data = ServiceEventData.toJSON(message.data);
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<ServiceUpdatedEvent>, I>>(base?: I): ServiceUpdatedEvent {
    return ServiceUpdatedEvent.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<ServiceUpdatedEvent>, I>>(object: I): ServiceUpdatedEvent {
    const message = createBaseServiceUpdatedEvent();
    message.data = (object.data !== undefined && object.data !== null)
      ? ServiceEventData.fromPartial(object.data)
      : undefined;
    return message;
  },
};

function createBaseServiceDeletedEvent(): ServiceDeletedEvent {
  return { data: undefined };
}

export const ServiceDeletedEvent: MessageFns<ServiceDeletedEvent> = {
  encode(message: ServiceDeletedEvent, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.data !== undefined) {
      ServiceEventData.encode(message.data, writer.uint32(10).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): ServiceDeletedEvent {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    const end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseServiceDeletedEvent();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.data = ServiceEventData.decode(reader, reader.uint32());
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): ServiceDeletedEvent {
    return { data: isSet(object.data) ? ServiceEventData.fromJSON(object.data) : undefined };
  },

  toJSON(message: ServiceDeletedEvent): unknown {
    const obj: any = {};
    if (message.data !== undefined) {
      obj.data = ServiceEventData.toJSON(message.data);
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<ServiceDeletedEvent>, I>>(base?: I): ServiceDeletedEvent {
    return ServiceDeletedEvent.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<ServiceDeletedEvent>, I>>(object: I): ServiceDeletedEvent {
    const message = createBaseServiceDeletedEvent();
    message.data = (object.data !== undefined && object.data !== null)
      ? ServiceEventData.fromPartial(object.data)
      : undefined;
    return message;
  },
};

function createBaseSchemaCreatedEvent(): SchemaCreatedEvent {
  return { data: undefined };
}

export const SchemaCreatedEvent: MessageFns<SchemaCreatedEvent> = {
  encode(message: SchemaCreatedEvent, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.data !== undefined) {
      SchemaEventData.encode(message.data, writer.uint32(10).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): SchemaCreatedEvent {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    const end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseSchemaCreatedEvent();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.data = SchemaEventData.decode(reader, reader.uint32());
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): SchemaCreatedEvent {
    return { data: isSet(object.data) ? SchemaEventData.fromJSON(object.data) : undefined };
  },

  toJSON(message: SchemaCreatedEvent): unknown {
    const obj: any = {};
    if (message.data !== undefined) {
      obj.data = SchemaEventData.toJSON(message.data);
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<SchemaCreatedEvent>, I>>(base?: I): SchemaCreatedEvent {
    return SchemaCreatedEvent.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<SchemaCreatedEvent>, I>>(object: I): SchemaCreatedEvent {
    const message = createBaseSchemaCreatedEvent();
    message.data = (object.data !== undefined && object.data !== null)
      ? SchemaEventData.fromPartial(object.data)
      : undefined;
    return message;
  },
};

function createBaseSchemaUpdatedEvent(): SchemaUpdatedEvent {
  return { data: undefined };
}

export const SchemaUpdatedEvent: MessageFns<SchemaUpdatedEvent> = {
  encode(message: SchemaUpdatedEvent, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.data !== undefined) {
      SchemaEventData.encode(message.data, writer.uint32(10).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): SchemaUpdatedEvent {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    const end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseSchemaUpdatedEvent();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.data = SchemaEventData.decode(reader, reader.uint32());
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): SchemaUpdatedEvent {
    return { data: isSet(object.data) ? SchemaEventData.fromJSON(object.data) : undefined };
  },

  toJSON(message: SchemaUpdatedEvent): unknown {
    const obj: any = {};
    if (message.data !== undefined) {
      obj.data = SchemaEventData.toJSON(message.data);
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<SchemaUpdatedEvent>, I>>(base?: I): SchemaUpdatedEvent {
    return SchemaUpdatedEvent.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<SchemaUpdatedEvent>, I>>(object: I): SchemaUpdatedEvent {
    const message = createBaseSchemaUpdatedEvent();
    message.data = (object.data !== undefined && object.data !== null)
      ? SchemaEventData.fromPartial(object.data)
      : undefined;
    return message;
  },
};

function createBaseSchemaDeletedEvent(): SchemaDeletedEvent {
  return { data: undefined };
}

export const SchemaDeletedEvent: MessageFns<SchemaDeletedEvent> = {
  encode(message: SchemaDeletedEvent, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.data !== undefined) {
      SchemaEventData.encode(message.data, writer.uint32(10).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): SchemaDeletedEvent {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    const end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseSchemaDeletedEvent();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.data = SchemaEventData.decode(reader, reader.uint32());
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): SchemaDeletedEvent {
    return { data: isSet(object.data) ? SchemaEventData.fromJSON(object.data) : undefined };
  },

  toJSON(message: SchemaDeletedEvent): unknown {
    const obj: any = {};
    if (message.data !== undefined) {
      obj.data = SchemaEventData.toJSON(message.data);
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<SchemaDeletedEvent>, I>>(base?: I): SchemaDeletedEvent {
    return SchemaDeletedEvent.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<SchemaDeletedEvent>, I>>(object: I): SchemaDeletedEvent {
    const message = createBaseSchemaDeletedEvent();
    message.data = (object.data !== undefined && object.data !== null)
      ? SchemaEventData.fromPartial(object.data)
      : undefined;
    return message;
  },
};

function createBaseConnectorCreatedEvent(): ConnectorCreatedEvent {
  return { data: undefined };
}

export const ConnectorCreatedEvent: MessageFns<ConnectorCreatedEvent> = {
  encode(message: ConnectorCreatedEvent, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.data !== undefined) {
      ConnectorEventData.encode(message.data, writer.uint32(10).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): ConnectorCreatedEvent {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    const end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseConnectorCreatedEvent();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.data = ConnectorEventData.decode(reader, reader.uint32());
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): ConnectorCreatedEvent {
    return { data: isSet(object.data) ? ConnectorEventData.fromJSON(object.data) : undefined };
  },

  toJSON(message: ConnectorCreatedEvent): unknown {
    const obj: any = {};
    if (message.data !== undefined) {
      obj.data = ConnectorEventData.toJSON(message.data);
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<ConnectorCreatedEvent>, I>>(base?: I): ConnectorCreatedEvent {
    return ConnectorCreatedEvent.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<ConnectorCreatedEvent>, I>>(object: I): ConnectorCreatedEvent {
    const message = createBaseConnectorCreatedEvent();
    message.data = (object.data !== undefined && object.data !== null)
      ? ConnectorEventData.fromPartial(object.data)
      : undefined;
    return message;
  },
};

function createBaseConnectorUpdatedEvent(): ConnectorUpdatedEvent {
  return { data: undefined };
}

export const ConnectorUpdatedEvent: MessageFns<ConnectorUpdatedEvent> = {
  encode(message: ConnectorUpdatedEvent, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.data !== undefined) {
      ConnectorEventData.encode(message.data, writer.uint32(10).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): ConnectorUpdatedEvent {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    const end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseConnectorUpdatedEvent();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.data = ConnectorEventData.decode(reader, reader.uint32());
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): ConnectorUpdatedEvent {
    return { data: isSet(object.data) ? ConnectorEventData.fromJSON(object.data) : undefined };
  },

  toJSON(message: ConnectorUpdatedEvent): unknown {
    const obj: any = {};
    if (message.data !== undefined) {
      obj.data = ConnectorEventData.toJSON(message.data);
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<ConnectorUpdatedEvent>, I>>(base?: I): ConnectorUpdatedEvent {
    return ConnectorUpdatedEvent.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<ConnectorUpdatedEvent>, I>>(object: I): ConnectorUpdatedEvent {
    const message = createBaseConnectorUpdatedEvent();
    message.data = (object.data !== undefined && object.data !== null)
      ? ConnectorEventData.fromPartial(object.data)
      : undefined;
    return message;
  },
};

function createBaseConnectorDeletedEvent(): ConnectorDeletedEvent {
  return { data: undefined };
}

export const ConnectorDeletedEvent: MessageFns<ConnectorDeletedEvent> = {
  encode(message: ConnectorDeletedEvent, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.data !== undefined) {
      ConnectorEventData.encode(message.data, writer.uint32(10).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): ConnectorDeletedEvent {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    const end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseConnectorDeletedEvent();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.data = ConnectorEventData.decode(reader, reader.uint32());
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): ConnectorDeletedEvent {
    return { data: isSet(object.data) ? ConnectorEventData.fromJSON(object.data) : undefined };
  },

  toJSON(message: ConnectorDeletedEvent): unknown {
    const obj: any = {};
    if (message.data !== undefined) {
      obj.data = ConnectorEventData.toJSON(message.data);
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<ConnectorDeletedEvent>, I>>(base?: I): ConnectorDeletedEvent {
    return ConnectorDeletedEvent.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<ConnectorDeletedEvent>, I>>(object: I): ConnectorDeletedEvent {
    const message = createBaseConnectorDeletedEvent();
    message.data = (object.data !== undefined && object.data !== null)
      ? ConnectorEventData.fromPartial(object.data)
      : undefined;
    return message;
  },
};

function createBaseMutationExecutedEvent(): MutationExecutedEvent {
  return { data: undefined };
}

export const MutationExecutedEvent: MessageFns<MutationExecutedEvent> = {
  encode(message: MutationExecutedEvent, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.data !== undefined) {
      MutationEventData.encode(message.data, writer.uint32(10).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): MutationExecutedEvent {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    const end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseMutationExecutedEvent();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.data = MutationEventData.decode(reader, reader.uint32());
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): MutationExecutedEvent {
    return { data: isSet(object.data) ? MutationEventData.fromJSON(object.data) : undefined };
  },

  toJSON(message: MutationExecutedEvent): unknown {
    const obj: any = {};
    if (message.data !== undefined) {
      obj.data = MutationEventData.toJSON(message.data);
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<MutationExecutedEvent>, I>>(base?: I): MutationExecutedEvent {
    return MutationExecutedEvent.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<MutationExecutedEvent>, I>>(object: I): MutationExecutedEvent {
    const message = createBaseMutationExecutedEvent();
    message.data = (object.data !== undefined && object.data !== null)
      ? MutationEventData.fromPartial(object.data)
      : undefined;
    return message;
  },
};

type Builtin = Date | Function | Uint8Array | string | number | boolean | undefined;

export type DeepPartial<T> = T extends Builtin ? T
  : T extends Long ? string | number | Long : T extends globalThis.Array<infer U> ? globalThis.Array<DeepPartial<U>>
  : T extends ReadonlyArray<infer U> ? ReadonlyArray<DeepPartial<U>>
  : T extends {} ? { [K in keyof T]?: DeepPartial<T[K]> }
  : Partial<T>;

type KeysOfUnion<T> = T extends T ? keyof T : never;
export type Exact<P, I extends P> = P extends Builtin ? P
  : P & { [K in keyof P]: Exact<P[K], I[K]> } & { [K in Exclude<keyof I, KeysOfUnion<P>>]: never };

function isSet(value: any): boolean {
  return value !== null && value !== undefined;
}

export interface MessageFns<T> {
  encode(message: T, writer?: BinaryWriter): BinaryWriter;
  decode(input: BinaryReader | Uint8Array, length?: number): T;
  fromJSON(object: any): T;
  toJSON(message: T): unknown;
  create<I extends Exact<DeepPartial<T>, I>>(base?: I): T;
  fromPartial<I extends Exact<DeepPartial<T>, I>>(object: I): T;
}
