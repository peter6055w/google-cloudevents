// Code generated by protoc-gen-ts_proto. DO NOT EDIT.
// versions:
//   protoc-gen-ts_proto  v2.7.7
//   protoc               v6.32.0
// source: google/events/firebase/remoteconfig/v1/data.proto

/* eslint-disable */
import { BinaryReader, BinaryWriter } from "@bufbuild/protobuf/wire";
import Long from "long";
import { Timestamp } from "../../../../protobuf/timestamp";

export const protobufPackage = "google.events.firebase.remoteconfig.v1";

/** What type of update was associated with the Remote Config template version. */
export enum RemoteConfigUpdateOrigin {
  /** REMOTE_CONFIG_UPDATE_ORIGIN_UNSPECIFIED - Catch-all for unrecognized values. */
  REMOTE_CONFIG_UPDATE_ORIGIN_UNSPECIFIED = 0,
  /** CONSOLE - The update came from the Firebase UI. */
  CONSOLE = 1,
  /** REST_API - The update came from the Remote Config REST API. */
  REST_API = 2,
  /** ADMIN_SDK_NODE - The update came from the Firebase Admin Node SDK. */
  ADMIN_SDK_NODE = 3,
  UNRECOGNIZED = -1,
}

export function remoteConfigUpdateOriginFromJSON(object: any): RemoteConfigUpdateOrigin {
  switch (object) {
    case 0:
    case "REMOTE_CONFIG_UPDATE_ORIGIN_UNSPECIFIED":
      return RemoteConfigUpdateOrigin.REMOTE_CONFIG_UPDATE_ORIGIN_UNSPECIFIED;
    case 1:
    case "CONSOLE":
      return RemoteConfigUpdateOrigin.CONSOLE;
    case 2:
    case "REST_API":
      return RemoteConfigUpdateOrigin.REST_API;
    case 3:
    case "ADMIN_SDK_NODE":
      return RemoteConfigUpdateOrigin.ADMIN_SDK_NODE;
    case -1:
    case "UNRECOGNIZED":
    default:
      return RemoteConfigUpdateOrigin.UNRECOGNIZED;
  }
}

export function remoteConfigUpdateOriginToJSON(object: RemoteConfigUpdateOrigin): string {
  switch (object) {
    case RemoteConfigUpdateOrigin.REMOTE_CONFIG_UPDATE_ORIGIN_UNSPECIFIED:
      return "REMOTE_CONFIG_UPDATE_ORIGIN_UNSPECIFIED";
    case RemoteConfigUpdateOrigin.CONSOLE:
      return "CONSOLE";
    case RemoteConfigUpdateOrigin.REST_API:
      return "REST_API";
    case RemoteConfigUpdateOrigin.ADMIN_SDK_NODE:
      return "ADMIN_SDK_NODE";
    case RemoteConfigUpdateOrigin.UNRECOGNIZED:
    default:
      return "UNRECOGNIZED";
  }
}

/** Where the Remote Config update action originated. */
export enum RemoteConfigUpdateType {
  /** REMOTE_CONFIG_UPDATE_TYPE_UNSPECIFIED - Catch-all for unrecognized enum values. */
  REMOTE_CONFIG_UPDATE_TYPE_UNSPECIFIED = 0,
  /** INCREMENTAL_UPDATE - A regular incremental update. */
  INCREMENTAL_UPDATE = 1,
  /**
   * FORCED_UPDATE - A forced update.
   * The ETag was specified as "*" in an UpdateRemoteConfigRequest
   * request or the "Force Update" button was pressed on the console.
   */
  FORCED_UPDATE = 2,
  /** ROLLBACK - A rollback to a previous Remote Config template. */
  ROLLBACK = 3,
  UNRECOGNIZED = -1,
}

export function remoteConfigUpdateTypeFromJSON(object: any): RemoteConfigUpdateType {
  switch (object) {
    case 0:
    case "REMOTE_CONFIG_UPDATE_TYPE_UNSPECIFIED":
      return RemoteConfigUpdateType.REMOTE_CONFIG_UPDATE_TYPE_UNSPECIFIED;
    case 1:
    case "INCREMENTAL_UPDATE":
      return RemoteConfigUpdateType.INCREMENTAL_UPDATE;
    case 2:
    case "FORCED_UPDATE":
      return RemoteConfigUpdateType.FORCED_UPDATE;
    case 3:
    case "ROLLBACK":
      return RemoteConfigUpdateType.ROLLBACK;
    case -1:
    case "UNRECOGNIZED":
    default:
      return RemoteConfigUpdateType.UNRECOGNIZED;
  }
}

export function remoteConfigUpdateTypeToJSON(object: RemoteConfigUpdateType): string {
  switch (object) {
    case RemoteConfigUpdateType.REMOTE_CONFIG_UPDATE_TYPE_UNSPECIFIED:
      return "REMOTE_CONFIG_UPDATE_TYPE_UNSPECIFIED";
    case RemoteConfigUpdateType.INCREMENTAL_UPDATE:
      return "INCREMENTAL_UPDATE";
    case RemoteConfigUpdateType.FORCED_UPDATE:
      return "FORCED_UPDATE";
    case RemoteConfigUpdateType.ROLLBACK:
      return "ROLLBACK";
    case RemoteConfigUpdateType.UNRECOGNIZED:
    default:
      return "UNRECOGNIZED";
  }
}

/** The data within all Firebase Remote Config events. */
export interface RemoteConfigEventData {
  /** The version number of the version's corresponding Remote Config template. */
  versionNumber: Long;
  /** When the Remote Config template was written to the Remote Config server. */
  updateTime?:
    | Date
    | undefined;
  /**
   * Aggregation of all metadata fields about the account that performed the
   *  update.
   */
  updateUser?:
    | RemoteConfigUser
    | undefined;
  /** The user-provided description of the corresponding Remote Config template. */
  description: string;
  /** Where the update action originated. */
  updateOrigin: RemoteConfigUpdateOrigin;
  /** What type of update was made. */
  updateType: RemoteConfigUpdateType;
  /**
   * Only present if this version is the result of a rollback, and will be the
   * version number of the Remote Config template that was rolled-back to.
   */
  rollbackSource: Long;
}

/**
 * All the fields associated with the person/service account
 * that wrote a Remote Config template.
 */
export interface RemoteConfigUser {
  /** Display name. */
  name: string;
  /** Email address. */
  email: string;
  /** Image URL. */
  imageUrl: string;
}

function createBaseRemoteConfigEventData(): RemoteConfigEventData {
  return {
    versionNumber: Long.ZERO,
    updateTime: undefined,
    updateUser: undefined,
    description: "",
    updateOrigin: 0,
    updateType: 0,
    rollbackSource: Long.ZERO,
  };
}

export const RemoteConfigEventData: MessageFns<RemoteConfigEventData> = {
  encode(message: RemoteConfigEventData, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (!message.versionNumber.equals(Long.ZERO)) {
      writer.uint32(8).int64(message.versionNumber.toString());
    }
    if (message.updateTime !== undefined) {
      Timestamp.encode(toTimestamp(message.updateTime), writer.uint32(18).fork()).join();
    }
    if (message.updateUser !== undefined) {
      RemoteConfigUser.encode(message.updateUser, writer.uint32(26).fork()).join();
    }
    if (message.description !== "") {
      writer.uint32(34).string(message.description);
    }
    if (message.updateOrigin !== 0) {
      writer.uint32(40).int32(message.updateOrigin);
    }
    if (message.updateType !== 0) {
      writer.uint32(48).int32(message.updateType);
    }
    if (!message.rollbackSource.equals(Long.ZERO)) {
      writer.uint32(56).int64(message.rollbackSource.toString());
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): RemoteConfigEventData {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    const end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseRemoteConfigEventData();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 8) {
            break;
          }

          message.versionNumber = Long.fromString(reader.int64().toString());
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.updateTime = fromTimestamp(Timestamp.decode(reader, reader.uint32()));
          continue;
        }
        case 3: {
          if (tag !== 26) {
            break;
          }

          message.updateUser = RemoteConfigUser.decode(reader, reader.uint32());
          continue;
        }
        case 4: {
          if (tag !== 34) {
            break;
          }

          message.description = reader.string();
          continue;
        }
        case 5: {
          if (tag !== 40) {
            break;
          }

          message.updateOrigin = reader.int32() as any;
          continue;
        }
        case 6: {
          if (tag !== 48) {
            break;
          }

          message.updateType = reader.int32() as any;
          continue;
        }
        case 7: {
          if (tag !== 56) {
            break;
          }

          message.rollbackSource = Long.fromString(reader.int64().toString());
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): RemoteConfigEventData {
    return {
      versionNumber: isSet(object.versionNumber) ? Long.fromValue(object.versionNumber) : Long.ZERO,
      updateTime: isSet(object.updateTime) ? fromJsonTimestamp(object.updateTime) : undefined,
      updateUser: isSet(object.updateUser) ? RemoteConfigUser.fromJSON(object.updateUser) : undefined,
      description: isSet(object.description) ? globalThis.String(object.description) : "",
      updateOrigin: isSet(object.updateOrigin) ? remoteConfigUpdateOriginFromJSON(object.updateOrigin) : 0,
      updateType: isSet(object.updateType) ? remoteConfigUpdateTypeFromJSON(object.updateType) : 0,
      rollbackSource: isSet(object.rollbackSource) ? Long.fromValue(object.rollbackSource) : Long.ZERO,
    };
  },

  toJSON(message: RemoteConfigEventData): unknown {
    const obj: any = {};
    if (!message.versionNumber.equals(Long.ZERO)) {
      obj.versionNumber = (message.versionNumber || Long.ZERO).toString();
    }
    if (message.updateTime !== undefined) {
      obj.updateTime = message.updateTime.toISOString();
    }
    if (message.updateUser !== undefined) {
      obj.updateUser = RemoteConfigUser.toJSON(message.updateUser);
    }
    if (message.description !== "") {
      obj.description = message.description;
    }
    if (message.updateOrigin !== 0) {
      obj.updateOrigin = remoteConfigUpdateOriginToJSON(message.updateOrigin);
    }
    if (message.updateType !== 0) {
      obj.updateType = remoteConfigUpdateTypeToJSON(message.updateType);
    }
    if (!message.rollbackSource.equals(Long.ZERO)) {
      obj.rollbackSource = (message.rollbackSource || Long.ZERO).toString();
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<RemoteConfigEventData>, I>>(base?: I): RemoteConfigEventData {
    return RemoteConfigEventData.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<RemoteConfigEventData>, I>>(object: I): RemoteConfigEventData {
    const message = createBaseRemoteConfigEventData();
    message.versionNumber = (object.versionNumber !== undefined && object.versionNumber !== null)
      ? Long.fromValue(object.versionNumber)
      : Long.ZERO;
    message.updateTime = object.updateTime ?? undefined;
    message.updateUser = (object.updateUser !== undefined && object.updateUser !== null)
      ? RemoteConfigUser.fromPartial(object.updateUser)
      : undefined;
    message.description = object.description ?? "";
    message.updateOrigin = object.updateOrigin ?? 0;
    message.updateType = object.updateType ?? 0;
    message.rollbackSource = (object.rollbackSource !== undefined && object.rollbackSource !== null)
      ? Long.fromValue(object.rollbackSource)
      : Long.ZERO;
    return message;
  },
};

function createBaseRemoteConfigUser(): RemoteConfigUser {
  return { name: "", email: "", imageUrl: "" };
}

export const RemoteConfigUser: MessageFns<RemoteConfigUser> = {
  encode(message: RemoteConfigUser, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.name !== "") {
      writer.uint32(10).string(message.name);
    }
    if (message.email !== "") {
      writer.uint32(18).string(message.email);
    }
    if (message.imageUrl !== "") {
      writer.uint32(26).string(message.imageUrl);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): RemoteConfigUser {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    const end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseRemoteConfigUser();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.name = reader.string();
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.email = reader.string();
          continue;
        }
        case 3: {
          if (tag !== 26) {
            break;
          }

          message.imageUrl = reader.string();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): RemoteConfigUser {
    return {
      name: isSet(object.name) ? globalThis.String(object.name) : "",
      email: isSet(object.email) ? globalThis.String(object.email) : "",
      imageUrl: isSet(object.imageUrl) ? globalThis.String(object.imageUrl) : "",
    };
  },

  toJSON(message: RemoteConfigUser): unknown {
    const obj: any = {};
    if (message.name !== "") {
      obj.name = message.name;
    }
    if (message.email !== "") {
      obj.email = message.email;
    }
    if (message.imageUrl !== "") {
      obj.imageUrl = message.imageUrl;
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<RemoteConfigUser>, I>>(base?: I): RemoteConfigUser {
    return RemoteConfigUser.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<RemoteConfigUser>, I>>(object: I): RemoteConfigUser {
    const message = createBaseRemoteConfigUser();
    message.name = object.name ?? "";
    message.email = object.email ?? "";
    message.imageUrl = object.imageUrl ?? "";
    return message;
  },
};

type Builtin = Date | Function | Uint8Array | string | number | boolean | undefined;

export type DeepPartial<T> = T extends Builtin ? T
  : T extends Long ? string | number | Long : T extends globalThis.Array<infer U> ? globalThis.Array<DeepPartial<U>>
  : T extends ReadonlyArray<infer U> ? ReadonlyArray<DeepPartial<U>>
  : T extends {} ? { [K in keyof T]?: DeepPartial<T[K]> }
  : Partial<T>;

type KeysOfUnion<T> = T extends T ? keyof T : never;
export type Exact<P, I extends P> = P extends Builtin ? P
  : P & { [K in keyof P]: Exact<P[K], I[K]> } & { [K in Exclude<keyof I, KeysOfUnion<P>>]: never };

function toTimestamp(date: Date): Timestamp {
  const seconds = numberToLong(Math.trunc(date.getTime() / 1_000));
  const nanos = (date.getTime() % 1_000) * 1_000_000;
  return { seconds, nanos };
}

function fromTimestamp(t: Timestamp): Date {
  let millis = (t.seconds.toNumber() || 0) * 1_000;
  millis += (t.nanos || 0) / 1_000_000;
  return new globalThis.Date(millis);
}

function fromJsonTimestamp(o: any): Date {
  if (o instanceof globalThis.Date) {
    return o;
  } else if (typeof o === "string") {
    return new globalThis.Date(o);
  } else {
    return fromTimestamp(Timestamp.fromJSON(o));
  }
}

function numberToLong(number: number) {
  return Long.fromNumber(number);
}

function isSet(value: any): boolean {
  return value !== null && value !== undefined;
}

export interface MessageFns<T> {
  encode(message: T, writer?: BinaryWriter): BinaryWriter;
  decode(input: BinaryReader | Uint8Array, length?: number): T;
  fromJSON(object: any): T;
  toJSON(message: T): unknown;
  create<I extends Exact<DeepPartial<T>, I>>(base?: I): T;
  fromPartial<I extends Exact<DeepPartial<T>, I>>(object: I): T;
}
