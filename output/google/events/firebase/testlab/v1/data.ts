// Code generated by protoc-gen-ts_proto. DO NOT EDIT.
// versions:
//   protoc-gen-ts_proto  v2.7.7
//   protoc               v6.32.0
// source: google/events/firebase/testlab/v1/data.proto

/* eslint-disable */
import { BinaryReader, BinaryWriter } from "@bufbuild/protobuf/wire";
import Long from "long";
import { Timestamp } from "../../../../protobuf/timestamp";

export const protobufPackage = "google.events.firebase.testlab.v1";

/** Possible test states for a test matrix. */
export enum TestState {
  /** TEST_STATE_UNSPECIFIED - The default value. This value is used if the state is omitted. */
  TEST_STATE_UNSPECIFIED = 0,
  /** VALIDATING - The test matrix is being validated. */
  VALIDATING = 1,
  /** PENDING - The test matrix is waiting for resources to become available. */
  PENDING = 2,
  /** FINISHED - The test matrix has completed normally. */
  FINISHED = 3,
  /** ERROR - The test matrix has completed because of an infrastructure failure. */
  ERROR = 4,
  /** INVALID - The test matrix was not run because the provided inputs are not valid. */
  INVALID = 5,
  UNRECOGNIZED = -1,
}

export function testStateFromJSON(object: any): TestState {
  switch (object) {
    case 0:
    case "TEST_STATE_UNSPECIFIED":
      return TestState.TEST_STATE_UNSPECIFIED;
    case 1:
    case "VALIDATING":
      return TestState.VALIDATING;
    case 2:
    case "PENDING":
      return TestState.PENDING;
    case 3:
    case "FINISHED":
      return TestState.FINISHED;
    case 4:
    case "ERROR":
      return TestState.ERROR;
    case 5:
    case "INVALID":
      return TestState.INVALID;
    case -1:
    case "UNRECOGNIZED":
    default:
      return TestState.UNRECOGNIZED;
  }
}

export function testStateToJSON(object: TestState): string {
  switch (object) {
    case TestState.TEST_STATE_UNSPECIFIED:
      return "TEST_STATE_UNSPECIFIED";
    case TestState.VALIDATING:
      return "VALIDATING";
    case TestState.PENDING:
      return "PENDING";
    case TestState.FINISHED:
      return "FINISHED";
    case TestState.ERROR:
      return "ERROR";
    case TestState.INVALID:
      return "INVALID";
    case TestState.UNRECOGNIZED:
    default:
      return "UNRECOGNIZED";
  }
}

/** Outcome summary for a finished test matrix. */
export enum OutcomeSummary {
  /** OUTCOME_SUMMARY_UNSPECIFIED - The default value. This value is used if the state is omitted. */
  OUTCOME_SUMMARY_UNSPECIFIED = 0,
  /**
   * SUCCESS - The test matrix run was successful, for instance:
   * - All test cases passed.
   * - No crash of the application under test was detected.
   */
  SUCCESS = 1,
  /**
   * FAILURE - A run failed, for instance:
   * - One or more test case failed.
   * - A test timed out.
   * - The application under test crashed.
   */
  FAILURE = 2,
  /**
   * INCONCLUSIVE - Something unexpected happened. The test run should still be considered
   * unsuccessful but this is likely a transient problem and re-running the
   * test might be successful.
   */
  INCONCLUSIVE = 3,
  /** SKIPPED - All tests were skipped. */
  SKIPPED = 4,
  UNRECOGNIZED = -1,
}

export function outcomeSummaryFromJSON(object: any): OutcomeSummary {
  switch (object) {
    case 0:
    case "OUTCOME_SUMMARY_UNSPECIFIED":
      return OutcomeSummary.OUTCOME_SUMMARY_UNSPECIFIED;
    case 1:
    case "SUCCESS":
      return OutcomeSummary.SUCCESS;
    case 2:
    case "FAILURE":
      return OutcomeSummary.FAILURE;
    case 3:
    case "INCONCLUSIVE":
      return OutcomeSummary.INCONCLUSIVE;
    case 4:
    case "SKIPPED":
      return OutcomeSummary.SKIPPED;
    case -1:
    case "UNRECOGNIZED":
    default:
      return OutcomeSummary.UNRECOGNIZED;
  }
}

export function outcomeSummaryToJSON(object: OutcomeSummary): string {
  switch (object) {
    case OutcomeSummary.OUTCOME_SUMMARY_UNSPECIFIED:
      return "OUTCOME_SUMMARY_UNSPECIFIED";
    case OutcomeSummary.SUCCESS:
      return "SUCCESS";
    case OutcomeSummary.FAILURE:
      return "FAILURE";
    case OutcomeSummary.INCONCLUSIVE:
      return "INCONCLUSIVE";
    case OutcomeSummary.SKIPPED:
      return "SKIPPED";
    case OutcomeSummary.UNRECOGNIZED:
    default:
      return "UNRECOGNIZED";
  }
}

/** The data within all Firebase test matrix events. */
export interface TestMatrixEventData {
  /** Time the test matrix was created. */
  createTime?:
    | Date
    | undefined;
  /** State of the test matrix. */
  state: TestState;
  /**
   * Code that describes why the test matrix is considered invalid. Only set for
   * matrices in the INVALID state.
   */
  invalidMatrixDetails: string;
  /** Outcome summary of the test matrix. */
  outcomeSummary: OutcomeSummary;
  /** Locations where test results are stored. */
  resultStorage?:
    | ResultStorage
    | undefined;
  /** Information provided by the client that created the test matrix. */
  clientInfo?:
    | ClientInfo
    | undefined;
  /** ID of the test matrix this event belongs to. */
  testMatrixId: string;
}

/** Information about the client which invoked the test. */
export interface ClientInfo {
  /** Client name, such as "gcloud". */
  client: string;
  /** Map of detailed information about the client. */
  details: { [key: string]: string };
}

export interface ClientInfo_DetailsEntry {
  key: string;
  value: string;
}

/** Locations where test results are stored. */
export interface ResultStorage {
  /**
   * Tool Results history resource containing test results. Format is
   * `projects/{project_id}/histories/{history_id}`.
   * See https://firebase.google.com/docs/test-lab/reference/toolresults/rest
   * for more information.
   */
  toolResultsHistory: string;
  /**
   * Tool Results execution resource containing test results. Format is
   * `projects/{project_id}/histories/{history_id}/executions/{execution_id}`.
   * Optional, can be omitted in erroneous test states.
   * See https://firebase.google.com/docs/test-lab/reference/toolresults/rest
   * for more information.
   */
  toolResultsExecution: string;
  /** URI to the test results in the Firebase Web Console. */
  resultsUri: string;
  /**
   * Location in Google Cloud Storage where test results are written to.
   * In the form "gs://bucket/path/to/somewhere".
   */
  gcsPath: string;
}

function createBaseTestMatrixEventData(): TestMatrixEventData {
  return {
    createTime: undefined,
    state: 0,
    invalidMatrixDetails: "",
    outcomeSummary: 0,
    resultStorage: undefined,
    clientInfo: undefined,
    testMatrixId: "",
  };
}

export const TestMatrixEventData: MessageFns<TestMatrixEventData> = {
  encode(message: TestMatrixEventData, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.createTime !== undefined) {
      Timestamp.encode(toTimestamp(message.createTime), writer.uint32(10).fork()).join();
    }
    if (message.state !== 0) {
      writer.uint32(16).int32(message.state);
    }
    if (message.invalidMatrixDetails !== "") {
      writer.uint32(26).string(message.invalidMatrixDetails);
    }
    if (message.outcomeSummary !== 0) {
      writer.uint32(32).int32(message.outcomeSummary);
    }
    if (message.resultStorage !== undefined) {
      ResultStorage.encode(message.resultStorage, writer.uint32(42).fork()).join();
    }
    if (message.clientInfo !== undefined) {
      ClientInfo.encode(message.clientInfo, writer.uint32(50).fork()).join();
    }
    if (message.testMatrixId !== "") {
      writer.uint32(58).string(message.testMatrixId);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): TestMatrixEventData {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    const end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseTestMatrixEventData();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.createTime = fromTimestamp(Timestamp.decode(reader, reader.uint32()));
          continue;
        }
        case 2: {
          if (tag !== 16) {
            break;
          }

          message.state = reader.int32() as any;
          continue;
        }
        case 3: {
          if (tag !== 26) {
            break;
          }

          message.invalidMatrixDetails = reader.string();
          continue;
        }
        case 4: {
          if (tag !== 32) {
            break;
          }

          message.outcomeSummary = reader.int32() as any;
          continue;
        }
        case 5: {
          if (tag !== 42) {
            break;
          }

          message.resultStorage = ResultStorage.decode(reader, reader.uint32());
          continue;
        }
        case 6: {
          if (tag !== 50) {
            break;
          }

          message.clientInfo = ClientInfo.decode(reader, reader.uint32());
          continue;
        }
        case 7: {
          if (tag !== 58) {
            break;
          }

          message.testMatrixId = reader.string();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): TestMatrixEventData {
    return {
      createTime: isSet(object.createTime) ? fromJsonTimestamp(object.createTime) : undefined,
      state: isSet(object.state) ? testStateFromJSON(object.state) : 0,
      invalidMatrixDetails: isSet(object.invalidMatrixDetails) ? globalThis.String(object.invalidMatrixDetails) : "",
      outcomeSummary: isSet(object.outcomeSummary) ? outcomeSummaryFromJSON(object.outcomeSummary) : 0,
      resultStorage: isSet(object.resultStorage) ? ResultStorage.fromJSON(object.resultStorage) : undefined,
      clientInfo: isSet(object.clientInfo) ? ClientInfo.fromJSON(object.clientInfo) : undefined,
      testMatrixId: isSet(object.testMatrixId) ? globalThis.String(object.testMatrixId) : "",
    };
  },

  toJSON(message: TestMatrixEventData): unknown {
    const obj: any = {};
    if (message.createTime !== undefined) {
      obj.createTime = message.createTime.toISOString();
    }
    if (message.state !== 0) {
      obj.state = testStateToJSON(message.state);
    }
    if (message.invalidMatrixDetails !== "") {
      obj.invalidMatrixDetails = message.invalidMatrixDetails;
    }
    if (message.outcomeSummary !== 0) {
      obj.outcomeSummary = outcomeSummaryToJSON(message.outcomeSummary);
    }
    if (message.resultStorage !== undefined) {
      obj.resultStorage = ResultStorage.toJSON(message.resultStorage);
    }
    if (message.clientInfo !== undefined) {
      obj.clientInfo = ClientInfo.toJSON(message.clientInfo);
    }
    if (message.testMatrixId !== "") {
      obj.testMatrixId = message.testMatrixId;
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<TestMatrixEventData>, I>>(base?: I): TestMatrixEventData {
    return TestMatrixEventData.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<TestMatrixEventData>, I>>(object: I): TestMatrixEventData {
    const message = createBaseTestMatrixEventData();
    message.createTime = object.createTime ?? undefined;
    message.state = object.state ?? 0;
    message.invalidMatrixDetails = object.invalidMatrixDetails ?? "";
    message.outcomeSummary = object.outcomeSummary ?? 0;
    message.resultStorage = (object.resultStorage !== undefined && object.resultStorage !== null)
      ? ResultStorage.fromPartial(object.resultStorage)
      : undefined;
    message.clientInfo = (object.clientInfo !== undefined && object.clientInfo !== null)
      ? ClientInfo.fromPartial(object.clientInfo)
      : undefined;
    message.testMatrixId = object.testMatrixId ?? "";
    return message;
  },
};

function createBaseClientInfo(): ClientInfo {
  return { client: "", details: {} };
}

export const ClientInfo: MessageFns<ClientInfo> = {
  encode(message: ClientInfo, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.client !== "") {
      writer.uint32(10).string(message.client);
    }
    Object.entries(message.details).forEach(([key, value]) => {
      ClientInfo_DetailsEntry.encode({ key: key as any, value }, writer.uint32(18).fork()).join();
    });
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): ClientInfo {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    const end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseClientInfo();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.client = reader.string();
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          const entry2 = ClientInfo_DetailsEntry.decode(reader, reader.uint32());
          if (entry2.value !== undefined) {
            message.details[entry2.key] = entry2.value;
          }
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): ClientInfo {
    return {
      client: isSet(object.client) ? globalThis.String(object.client) : "",
      details: isObject(object.details)
        ? Object.entries(object.details).reduce<{ [key: string]: string }>((acc, [key, value]) => {
          acc[key] = String(value);
          return acc;
        }, {})
        : {},
    };
  },

  toJSON(message: ClientInfo): unknown {
    const obj: any = {};
    if (message.client !== "") {
      obj.client = message.client;
    }
    if (message.details) {
      const entries = Object.entries(message.details);
      if (entries.length > 0) {
        obj.details = {};
        entries.forEach(([k, v]) => {
          obj.details[k] = v;
        });
      }
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<ClientInfo>, I>>(base?: I): ClientInfo {
    return ClientInfo.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<ClientInfo>, I>>(object: I): ClientInfo {
    const message = createBaseClientInfo();
    message.client = object.client ?? "";
    message.details = Object.entries(object.details ?? {}).reduce<{ [key: string]: string }>((acc, [key, value]) => {
      if (value !== undefined) {
        acc[key] = globalThis.String(value);
      }
      return acc;
    }, {});
    return message;
  },
};

function createBaseClientInfo_DetailsEntry(): ClientInfo_DetailsEntry {
  return { key: "", value: "" };
}

export const ClientInfo_DetailsEntry: MessageFns<ClientInfo_DetailsEntry> = {
  encode(message: ClientInfo_DetailsEntry, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.key !== "") {
      writer.uint32(10).string(message.key);
    }
    if (message.value !== "") {
      writer.uint32(18).string(message.value);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): ClientInfo_DetailsEntry {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    const end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseClientInfo_DetailsEntry();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.key = reader.string();
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.value = reader.string();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): ClientInfo_DetailsEntry {
    return {
      key: isSet(object.key) ? globalThis.String(object.key) : "",
      value: isSet(object.value) ? globalThis.String(object.value) : "",
    };
  },

  toJSON(message: ClientInfo_DetailsEntry): unknown {
    const obj: any = {};
    if (message.key !== "") {
      obj.key = message.key;
    }
    if (message.value !== "") {
      obj.value = message.value;
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<ClientInfo_DetailsEntry>, I>>(base?: I): ClientInfo_DetailsEntry {
    return ClientInfo_DetailsEntry.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<ClientInfo_DetailsEntry>, I>>(object: I): ClientInfo_DetailsEntry {
    const message = createBaseClientInfo_DetailsEntry();
    message.key = object.key ?? "";
    message.value = object.value ?? "";
    return message;
  },
};

function createBaseResultStorage(): ResultStorage {
  return { toolResultsHistory: "", toolResultsExecution: "", resultsUri: "", gcsPath: "" };
}

export const ResultStorage: MessageFns<ResultStorage> = {
  encode(message: ResultStorage, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.toolResultsHistory !== "") {
      writer.uint32(10).string(message.toolResultsHistory);
    }
    if (message.toolResultsExecution !== "") {
      writer.uint32(18).string(message.toolResultsExecution);
    }
    if (message.resultsUri !== "") {
      writer.uint32(26).string(message.resultsUri);
    }
    if (message.gcsPath !== "") {
      writer.uint32(34).string(message.gcsPath);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): ResultStorage {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    const end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseResultStorage();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.toolResultsHistory = reader.string();
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.toolResultsExecution = reader.string();
          continue;
        }
        case 3: {
          if (tag !== 26) {
            break;
          }

          message.resultsUri = reader.string();
          continue;
        }
        case 4: {
          if (tag !== 34) {
            break;
          }

          message.gcsPath = reader.string();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): ResultStorage {
    return {
      toolResultsHistory: isSet(object.toolResultsHistory) ? globalThis.String(object.toolResultsHistory) : "",
      toolResultsExecution: isSet(object.toolResultsExecution) ? globalThis.String(object.toolResultsExecution) : "",
      resultsUri: isSet(object.resultsUri) ? globalThis.String(object.resultsUri) : "",
      gcsPath: isSet(object.gcsPath) ? globalThis.String(object.gcsPath) : "",
    };
  },

  toJSON(message: ResultStorage): unknown {
    const obj: any = {};
    if (message.toolResultsHistory !== "") {
      obj.toolResultsHistory = message.toolResultsHistory;
    }
    if (message.toolResultsExecution !== "") {
      obj.toolResultsExecution = message.toolResultsExecution;
    }
    if (message.resultsUri !== "") {
      obj.resultsUri = message.resultsUri;
    }
    if (message.gcsPath !== "") {
      obj.gcsPath = message.gcsPath;
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<ResultStorage>, I>>(base?: I): ResultStorage {
    return ResultStorage.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<ResultStorage>, I>>(object: I): ResultStorage {
    const message = createBaseResultStorage();
    message.toolResultsHistory = object.toolResultsHistory ?? "";
    message.toolResultsExecution = object.toolResultsExecution ?? "";
    message.resultsUri = object.resultsUri ?? "";
    message.gcsPath = object.gcsPath ?? "";
    return message;
  },
};

type Builtin = Date | Function | Uint8Array | string | number | boolean | undefined;

export type DeepPartial<T> = T extends Builtin ? T
  : T extends Long ? string | number | Long : T extends globalThis.Array<infer U> ? globalThis.Array<DeepPartial<U>>
  : T extends ReadonlyArray<infer U> ? ReadonlyArray<DeepPartial<U>>
  : T extends {} ? { [K in keyof T]?: DeepPartial<T[K]> }
  : Partial<T>;

type KeysOfUnion<T> = T extends T ? keyof T : never;
export type Exact<P, I extends P> = P extends Builtin ? P
  : P & { [K in keyof P]: Exact<P[K], I[K]> } & { [K in Exclude<keyof I, KeysOfUnion<P>>]: never };

function toTimestamp(date: Date): Timestamp {
  const seconds = numberToLong(Math.trunc(date.getTime() / 1_000));
  const nanos = (date.getTime() % 1_000) * 1_000_000;
  return { seconds, nanos };
}

function fromTimestamp(t: Timestamp): Date {
  let millis = (t.seconds.toNumber() || 0) * 1_000;
  millis += (t.nanos || 0) / 1_000_000;
  return new globalThis.Date(millis);
}

function fromJsonTimestamp(o: any): Date {
  if (o instanceof globalThis.Date) {
    return o;
  } else if (typeof o === "string") {
    return new globalThis.Date(o);
  } else {
    return fromTimestamp(Timestamp.fromJSON(o));
  }
}

function numberToLong(number: number) {
  return Long.fromNumber(number);
}

function isObject(value: any): boolean {
  return typeof value === "object" && value !== null;
}

function isSet(value: any): boolean {
  return value !== null && value !== undefined;
}

export interface MessageFns<T> {
  encode(message: T, writer?: BinaryWriter): BinaryWriter;
  decode(input: BinaryReader | Uint8Array, length?: number): T;
  fromJSON(object: any): T;
  toJSON(message: T): unknown;
  create<I extends Exact<DeepPartial<T>, I>>(base?: I): T;
  fromPartial<I extends Exact<DeepPartial<T>, I>>(object: I): T;
}
